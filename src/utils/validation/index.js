/**
 * üîí Validation Module - –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * –î–∞—Ç–∞: 30.07.2025
 */

// –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const VALIDATION_SCHEMAS = {
  email: {
    pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
    message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å'
  },
  password: {
    pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d@$!%*?&]{8,}$/,
    message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã'
  },
  phone: {
    pattern: /^[\+]?[1-9][\d]{0,15}$/,
    message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
  },
  name: {
    pattern: /^[–∞-—è—ëa-z\s-]{2,50}$/i,
    message: '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 2-50 —Å–∏–º–≤–æ–ª–æ–≤'
  }
};

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * @param {any} data - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @param {string} schema - —Å—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @returns {Object} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
export const validateInput = (data, schema) => {
  if (!data || !schema) {
    return {
      isValid: false,
      message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏'
    };
  }

  const validationSchema = VALIDATION_SCHEMAS[schema];
  if (!validationSchema) {
    return {
      isValid: false,
      message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏'
    };
  }

  const isValid = validationSchema.pattern.test(data);
  return {
    isValid,
    message: isValid ? '' : validationSchema.message
  };
};

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
 * @param {Object} formData - –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
 * @param {Object} rules - –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @returns {Object} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
export const validateForm = (formData, rules) => {
  const errors = {};
  let isValid = true;

  for (const [field, rule] of Object.entries(rules)) {
    const value = formData[field];
    const validation = validateInput(value, rule.schema);

    if (!validation.isValid) {
      errors[field] = validation.message;
      isValid = false;
    }
  }

  return { isValid, errors };
};

/**
 * –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è HTML –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç XSS
 * @param {string} input - –≤—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 * @returns {string} –æ—á–∏—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 */
export const sanitizeHTML = (input) => {
  if (typeof input !== 'string') return input;

  return input
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#x27;')
    .replace(/\//g, '&#x2F;');
};

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
 * @param {string} input - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
 * @param {string} type - —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
 * @returns {Object} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
export const processUserInput = (input, type = 'text') => {
  const sanitized = sanitizeHTML(input);
  const validation = validateInput(sanitized, type);

  return {
    original: input,
    sanitized,
    isValid: validation.isValid,
    message: validation.message
  };
};

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
 * @param {File} file - —Ñ–∞–π–ª –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @param {Object} options - –æ–ø—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @returns {Object} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
export const validateFile = (file, options = {}) => {
  const {
    maxSize = 5 * 1024 * 1024, // 5MB
    allowedTypes = ['image/jpeg', 'image/png', 'image/webp', 'application/pdf'],
    maxFiles = 1
  } = options;

  if (!file) {
    return {
      isValid: false,
      message: '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'
    };
  }

  if (file.size > maxSize) {
    return {
      isValid: false,
      message: `–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç ${maxSize / 1024 / 1024}MB`
    };
  }

  if (!allowedTypes.includes(file.type)) {
    return {
      isValid: false,
      message: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞'
    };
  }

  return {
    isValid: true,
    message: ''
  };
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default {
  validateInput,
  validateForm,
  sanitizeHTML,
  processUserInput,
  validateFile,
  VALIDATION_SCHEMAS
}; 