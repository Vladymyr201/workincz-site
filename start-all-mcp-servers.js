#!/usr/bin/env node

/**
 * üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• MCP –°–ï–†–í–ï–†–û–í –î–õ–Ø CURSOR
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –∏—Ö —Å Cursor
 */

const { spawn, execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logStep(step, message) {
  log(`\n${colors.cyan}${step}${colors.reset}`, 'bright');
  log(message);
}

class MCPCursorIntegrator {
  constructor() {
    this.servers = [
      {
        name: 'code-runner',
        command: 'npx',
        args: ['-y', 'mcp-server-code-runner'],
        description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞'
      },
      {
        name: 'sentry',
        command: 'npx',
        args: ['-y', '@sentry/mcp-server'],
        description: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫'
      },
      {
        name: 'playwright',
        command: 'npx',
        args: ['-y', '@playwright/mcp'],
        description: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'
      },
      {
        name: 'sequential-thinking',
        command: 'npx',
        args: ['-y', '@modelcontextprotocol/server-sequential-thinking'],
        description: '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ'
      },
      {
        name: 'notion',
        command: 'npx',
        args: ['-y', '@notionhq/notion-mcp-server'],
        description: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion'
      },
      {
        name: 'supabase',
        command: 'npx',
        args: ['-y', '@supabase/mcp-server-supabase'],
        description: '–†–∞–±–æ—Ç–∞ —Å Supabase'
      },
      {
        name: 'wikipedia',
        command: 'npx',
        args: ['-y', '@shelm/wikipedia-mcp-server'],
        description: '–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
      },
      {
        name: 'youtube',
        command: 'npx',
        args: ['-y', 'youtube-data-mcp-server'],
        description: '–†–∞–±–æ—Ç–∞ —Å YouTube API'
      }
    ];
    
    this.runningServers = new Map();
  }

  // –ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
  async startServer(server) {
    return new Promise((resolve, reject) => {
      log(`üöÄ –ó–∞–ø—É—Å–∫–∞—é ${server.name}...`, 'blue');
      
      const process = spawn(server.command, server.args, {
        stdio: ['pipe', 'pipe', 'pipe'],
        shell: true
      });

      let output = '';
      let errorOutput = '';

      process.stdout.on('data', (data) => {
        output += data.toString();
        log(`üì§ ${server.name}: ${data.toString().trim()}`, 'green');
      });

      process.stderr.on('data', (data) => {
        errorOutput += data.toString();
        log(`‚ö†Ô∏è ${server.name}: ${data.toString().trim()}`, 'yellow');
      });

      process.on('error', (error) => {
        log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${server.name}: ${error.message}`, 'red');
        reject(error);
      });

      process.on('close', (code) => {
        if (code === 0) {
          log(`‚úÖ ${server.name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ`, 'green');
          resolve({ server, output, errorOutput });
        } else {
          log(`‚ùå ${server.name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`, 'red');
          reject(new Error(`${server.name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`));
        }
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
      this.runningServers.set(server.name, process);

      // –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
      setTimeout(() => {
        log(`‚úÖ ${server.name} –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ`, 'green');
        resolve({ server, output, errorOutput });
      }, 3000);
    });
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
  async startAllServers() {
    logStep('üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• MCP –°–ï–†–í–ï–†–û–í', '–ó–∞–ø—É—Å–∫–∞—é –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Cursor...');

    const results = [];
    
    for (const server of this.servers) {
      try {
        const result = await this.startServer(server);
        results.push({ ...result, status: 'success' });
      } catch (error) {
        log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å ${server.name}: ${error.message}`, 'red');
        results.push({ server, status: 'failed', error: error.message });
      }
    }

    return results;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Cursor
  async createCursorConfig() {
    logStep('‚öôÔ∏è –°–û–ó–î–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò CURSOR', '–°–æ–∑–¥–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Cursor...');

    const cursorConfig = {
      mcpServers: {}
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    this.servers.forEach(server => {
      cursorConfig.mcpServers[server.name] = {
        command: server.command,
        args: server.args,
        description: server.description
      };
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    fs.writeFileSync('cursor-mcp-config.json', JSON.stringify(cursorConfig, null, 2));
    log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Cursor —Å–æ–∑–¥–∞–Ω–∞: cursor-mcp-config.json', 'green');

    return cursorConfig;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  createInstructions() {
    const instructions = `# üîß –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ò–ù–¢–ï–ì–†–ê–¶–ò–ò MCP –°–ï–†–í–ï–†–û–í –° CURSOR

## üìã –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:

### 1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor
–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤, **–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor** –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤.

### 2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MCP
–í Cursor –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤:
- **Settings** ‚Üí **Tools & Integrations** ‚Üí **MCP Tools**

### 3. –û–∂–∏–¥–∞–µ–º—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:
- ‚úÖ **code-runner** - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
- ‚úÖ **sentry** - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫  
- ‚úÖ **playwright** - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- ‚úÖ **sequential-thinking** - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ
- ‚úÖ **notion** - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion
- ‚úÖ **supabase** - –†–∞–±–æ—Ç–∞ —Å Supabase
- ‚úÖ **wikipedia** - –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- ‚úÖ **youtube** - –†–∞–±–æ—Ç–∞ —Å YouTube API

### 4. –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ –≤–∏–¥–Ω—ã:
1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã
2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: \`node monitor-mcp.js\`

### 5. –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
\`\`\`bash
# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
node start-all-mcp-servers.js

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
node monitor-mcp.js

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
node test-mcp-servers.js
\`\`\`

## üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:
–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —à–∞–≥–æ–≤ –≤ Cursor –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –≤—Å–µ –Ω–æ–≤—ã–µ MCP —Å–µ—Ä–≤–µ—Ä—ã —Å –∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏.
`;

    fs.writeFileSync('CURSOR_INTEGRATION_INSTRUCTIONS.md', instructions);
    log('‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã: CURSOR_INTEGRATION_INSTRUCTIONS.md', 'green');
  }

  // –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
  async integrate() {
    log('üöÄ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø MCP –°–ï–†–í–ï–†–û–í –° CURSOR', 'bright');
    log('–ü—Ä–æ–µ–∫—Ç: WorkInCZ', 'cyan');
    log('–í—Ä–µ–º—è: ' + new Date().toISOString(), 'cyan');

    try {
      // 1. –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
      const results = await this.startAllServers();

      // 2. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Cursor
      await this.createCursorConfig();

      // 3. –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
      this.createInstructions();

      // 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      this.showResults(results);

      log('\nüéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!', 'bright');
      log('–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.', 'cyan');

    } catch (error) {
      log('‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: ' + error.message, 'red');
      process.exit(1);
    }
  }

  // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  showResults(results) {
    const successful = results.filter(r => r.status === 'success').length;
    const failed = results.filter(r => r.status === 'failed').length;

    log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ó–ê–ü–£–°–ö–ê:', 'bright');
    log(`  –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: ${results.length}`, 'blue');
    log(`  –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ: ${successful}`, 'green');
    log(`  –û—à–∏–±–æ–∫: ${failed}`, failed > 0 ? 'red' : 'green');

    if (failed > 0) {
      log('\n‚ùå –°–ï–†–í–ï–†–´ –° –û–®–ò–ë–ö–ê–ú–ò:', 'red');
      results
        .filter(r => r.status === 'failed')
        .forEach(r => {
          log(`  - ${r.server.name}: ${r.error}`, 'red');
        });
    }

    log('\n‚úÖ –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù–ù–´–ï –°–ï–†–í–ï–†–´:', 'green');
    results
      .filter(r => r.status === 'success')
      .forEach(r => {
        log(`  - ${r.server.name}: ${r.server.description}`, 'green');
      });

    log('\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:', 'cyan');
    log('  1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor', 'blue');
    log('  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Settings ‚Üí Tools & Integrations ‚Üí MCP Tools', 'blue');
    log('  3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –≤–∏–¥–Ω—ã', 'blue');
  }
}

// –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
  const integrator = new MCPCursorIntegrator();
  integrator.integrate().then(() => {
    log('\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'green');
  }).catch(error => {
    log('\n‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: ' + error.message, 'red');
    process.exit(1);
  });
}

module.exports = MCPCursorIntegrator; 