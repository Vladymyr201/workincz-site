#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const os = require('os');

console.log('üßπ –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ö–≠–®–ê CURSOR\n');

const cursorPaths = [
  // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—É—Ç–∏ –∫—ç—à–∞ Cursor
  path.join(os.homedir(), 'AppData', 'Roaming', 'Cursor'),
  path.join(os.homedir(), 'AppData', 'Local', 'Cursor'),
  path.join(os.homedir(), '.cursor'),
  path.join(os.tmpdir(), 'cursor'),
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
  path.join(os.homedir(), 'AppData', 'Roaming', 'Cursor', 'User', 'globalStorage'),
  path.join(os.homedir(), 'AppData', 'Roaming', 'Cursor', 'User', 'workspaceStorage'),
  path.join(os.homedir(), 'AppData', 'Roaming', 'Cursor', 'logs'),
  path.join(os.homedir(), 'AppData', 'Roaming', 'Cursor', 'CachedData'),
  
  // MCP —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—É—Ç–∏
  path.join(os.homedir(), 'AppData', 'Roaming', 'Cursor', 'User', 'globalStorage', 'modelcontextprotocol'),
  path.join(os.homedir(), 'AppData', 'Local', 'Cursor', 'User', 'globalStorage', 'modelcontextprotocol'),
];

console.log('1Ô∏è‚É£ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Cursor...');
try {
  if (os.platform() === 'win32') {
    execSync('taskkill /F /IM Cursor.exe 2>nul || echo Cursor –Ω–µ –∑–∞–ø—É—â–µ–Ω', { shell: true });
    console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã Cursor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  } else {
    execSync('pkill -f Cursor 2>/dev/null || echo Cursor –Ω–µ –∑–∞–ø—É—â–µ–Ω', { shell: true });
    console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã Cursor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  }
} catch (error) {
  console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã:', error.message);
}

console.log('\n2Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...');
let clearedCount = 0;

cursorPaths.forEach(cachePath => {
  if (fs.existsSync(cachePath)) {
    try {
      console.log(`   üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ: ${cachePath}`);
      
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
      const deleteRecursive = (dirPath) => {
        if (fs.existsSync(dirPath)) {
          const files = fs.readdirSync(dirPath);
          files.forEach(file => {
            const curPath = path.join(dirPath, file);
            if (fs.lstatSync(curPath).isDirectory()) {
              deleteRecursive(curPath);
            } else {
              try {
                fs.unlinkSync(curPath);
              } catch (error) {
                console.log(`      ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: ${curPath}`);
              }
            }
          });
          try {
            fs.rmdirSync(dirPath);
          } catch (error) {
            console.log(`      ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${dirPath}`);
          }
        }
      };
      
      deleteRecursive(cachePath);
      clearedCount++;
      console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω–æ: ${cachePath}`);
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${cachePath}: ${error.message}`);
    }
  } else {
    console.log(`   ‚ö™ –ù–µ –Ω–∞–π–¥–µ–Ω: ${cachePath}`);
  }
});

console.log(`\n3Ô∏è‚É£ –û—á–∏—â–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: ${clearedCount}`);

console.log('\n4Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
try {
  if (os.platform() === 'win32') {
    execSync('del /Q /F %TEMP%\\*cursor* 2>nul || echo –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', { shell: true });
  } else {
    execSync('rm -rf /tmp/*cursor* 2>/dev/null || echo –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', { shell: true });
  }
  console.log('‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã');
} catch (error) {
  console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', error.message);
}

console.log('\n5Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ npm...');
try {
  execSync('npm cache clean --force', { stdio: 'pipe' });
  console.log('‚úÖ –ö—ç—à npm –æ—á–∏—â–µ–Ω');
} catch (error) {
  console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ npm:', error.message);
}

console.log('\nüîß –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û–°–õ–ï –û–ß–ò–°–¢–ö–ò:');
console.log('1. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä');
console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Cursor –∑–∞–Ω–æ–≤–æ');
console.log('3. –û—Ç–∫—Ä–æ–π—Ç–µ Settings ‚Üí MCP Tools');
console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ FullAutoQA - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "5 tools enabled"');
console.log('5. –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–µ–ª–µ–Ω–∞—è —Ç–æ—á–∫–∞');

console.log('\n‚ö†Ô∏è –í–ê–ñ–ù–û:');
console.log('- –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞!');
console.log('- –≠—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç –≤—Å–µ –∫—ç—à–∏ Cursor');
console.log('- MCP —Å–µ—Ä–≤–µ—Ä—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã');

console.log('\n‚úÖ –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!');
console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ FullAutoQA!'); 