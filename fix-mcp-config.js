#!/usr/bin/env node

/**
 * üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ì–õ–û–ë–ê–õ–¨–ù–û–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò MCP
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const os = require('os');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logStep(step, message) {
  log(`\n${colors.cyan}${step}${colors.reset}`, 'bright');
  log(message);
}

class MCPConfigFixer {
  constructor() {
    this.platform = os.platform();
    this.configPaths = this.getConfigPaths();
    this.newServers = {
      "code-runner": {
        "command": "npx",
        "args": ["-y", "mcp-server-code-runner"]
      },
      "notion": {
        "command": "npx",
        "args": ["-y", "@notionhq/notion-mcp-server"]
      },
      "supabase": {
        "command": "npx",
        "args": ["-y", "@supabase/mcp-server-supabase"]
      },
      "wikipedia": {
        "command": "npx",
        "args": ["-y", "@shelm/wikipedia-mcp-server"]
      },
      "youtube": {
        "command": "npx",
        "args": ["-y", "youtube-data-mcp-server"]
      },
      "firebase-mcp": {
        "command": "npx",
        "args": ["-y", "firebase-tools@latest", "experimental:mcp"]
      },
      "github-mcp": {
        "command": "npx",
        "args": ["-y", "@modelcontextprotocol/server-github"],
        "env": {
          "GITHUB_PERSONAL_ACCESS_TOKEN": "YOUR_GITHUB_TOKEN_HERE",
          "GITHUB_API_URL": "https://api.github.com",
          "GH_HOST": "github.com"
        }
      }
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
  getConfigPaths() {
    const paths = [];
    
    if (this.platform === 'win32') {
      // Windows –ø—É—Ç–∏
      const appData = process.env.APPDATA || path.join(os.homedir(), 'AppData', 'Roaming');
      paths.push(path.join(appData, 'Cursor', 'User', 'settings.json'));
      paths.push(path.join(os.homedir(), '.cursor', 'mcp.json'));
      paths.push(path.join(appData, 'Cursor', 'User', 'mcp.json'));
    } else if (this.platform === 'darwin') {
      // macOS –ø—É—Ç–∏
      paths.push(path.join(os.homedir(), 'Library', 'Application Support', 'Cursor', 'User', 'settings.json'));
      paths.push(path.join(os.homedir(), '.cursor', 'mcp.json'));
    } else {
      // Linux –ø—É—Ç–∏
      paths.push(path.join(os.homedir(), '.config', 'Cursor', 'User', 'settings.json'));
      paths.push(path.join(os.homedir(), '.cursor', 'mcp.json'));
    }

    return paths;
  }

  // –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  findConfigFile() {
    for (const configPath of this.configPaths) {
      if (fs.existsSync(configPath)) {
        log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${configPath}`, 'green');
        return configPath;
      }
    }
    
    // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    const defaultPath = this.configPaths[0];
    log(`üìù –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${defaultPath}`, 'yellow');
    return defaultPath;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
  createBackup(configPath) {
    const backupPath = configPath + '.backup.' + Date.now();
    if (fs.existsSync(configPath)) {
      fs.copyFileSync(configPath, backupPath);
      log(`üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupPath}`, 'green');
    }
    return backupPath;
  }

  // –ß—Ç–µ–Ω–∏–µ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  readAndFixConfig(configPath) {
    let config = {};
    
    if (fs.existsSync(configPath)) {
      try {
        const content = fs.readFileSync(configPath, 'utf8');
        config = JSON.parse(content);
        log(`‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω–∞`, 'green');
      } catch (error) {
        log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: ${error.message}`, 'yellow');
        log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è—é —Å–∏–Ω—Ç–∞–∫—Å–∏—Å JSON...`, 'blue');
        
        // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å JSON
        const fixedContent = this.fixJsonSyntax(content);
        try {
          config = JSON.parse(fixedContent);
          log(`‚úÖ JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω`, 'green');
        } catch (fixError) {
          log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å JSON, —Å–æ–∑–¥–∞—é –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é`, 'red');
          config = {};
        }
      }
    }

    return config;
  }

  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
  fixJsonSyntax(content) {
    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ –≤ –∫–æ–Ω—Ü–µ –æ–±—ä–µ–∫—Ç–æ–≤
    content = content.replace(/,(\s*[}\]])/g, '$1');
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ JSON –∑–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if (!content.trim().endsWith('}')) {
      content = content.trim() + '\n}';
    }
    
    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ
    content = content.replace(/^[^{]*/, '');
    
    return content;
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  addMCPServers(config) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º mcp.servers –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!config.mcp) {
      config.mcp = {};
    }
    if (!config.mcp.servers) {
      config.mcp.servers = {};
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä–≤–µ—Ä—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    const existingServers = {
      "filesystem": {
        "command": "npx",
        "args": ["-y", "@modelcontextprotocol/server-filesystem", "D:/workincz-site"]
      },
      "sequential-thinking": {
        "command": "npx",
        "args": ["-y", "@modelcontextprotocol/server-sequential-thinking"]
      },
      "context7": {
        "command": "npx",
        "args": ["-y", "@upstash/context7-mcp"]
      },
      "playwright": {
        "command": "npx",
        "args": ["-y", "@playwright/mcp"]
      },
      "time": {
        "command": "python",
        "args": ["-m", "mcp_server_time"]
      },
      "memory": {
        "command": "npx",
        "args": ["-y", "@modelcontextprotocol/server-memory"]
      },
      "sentry": {
        "command": "npx",
        "args": ["-y", "mcp-server-sentry", "--auth-token", "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"]
      }
    };

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
    const allServers = { ...existingServers, ...this.newServers };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    let addedCount = 0;
    for (const [name, server] of Object.entries(allServers)) {
      if (!config.mcp.servers[name]) {
        config.mcp.servers[name] = server;
        addedCount++;
        log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω —Å–µ—Ä–≤–µ—Ä: ${name}`, 'green');
      }
    }

    log(`üìä –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: ${addedCount}`, 'blue');
    return config;
  }

  // –ó–∞–ø–∏—Å—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  writeConfig(configPath, config) {
    try {
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      const dir = path.dirname(configPath);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
        log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`, 'green');
      }

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      const content = JSON.stringify(config, null, 2);
      fs.writeFileSync(configPath, content, 'utf8');
      log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞: ${configPath}`, 'green');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
      JSON.parse(content);
      log(`‚úÖ JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω`, 'green');

      return true;
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`, 'red');
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
  checkServerInstallation() {
    logStep('üîç –ü–†–û–í–ï–†–ö–ê –£–°–¢–ê–ù–û–í–ö–ò –°–ï–†–í–ï–†–û–í', '–ü—Ä–æ–≤–µ—Ä—è—é —É—Å—Ç–∞–Ω–æ–≤–∫—É MCP —Å–µ—Ä–≤–µ—Ä–æ–≤...');

    const servers = [
      'mcp-server-code-runner',
      '@notionhq/notion-mcp-server',
      '@supabase/mcp-server-supabase',
      '@shelm/wikipedia-mcp-server',
      'youtube-data-mcp-server'
    ];

    for (const server of servers) {
      try {
        execSync(`npx -y ${server} --help`, { stdio: 'ignore' });
        log(`‚úÖ ${server} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`, 'green');
      } catch (error) {
        log(`‚ö†Ô∏è ${server} –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...`, 'yellow');
        try {
          execSync(`npm install -g ${server}`, { stdio: 'ignore' });
          log(`‚úÖ ${server} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`, 'green');
        } catch (installError) {
          log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ${server}`, 'red');
        }
      }
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
  createInstructions(configPath) {
    const instructions = `# üéâ MCP –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ê!

## ‚úÖ –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:

1. **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å** –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP
2. **–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:**
   - code-runner (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
   - notion (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion)
   - supabase (—Ä–∞–±–æ—Ç–∞ —Å Supabase)
   - wikipedia (–ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
   - youtube (—Ä–∞–±–æ—Ç–∞ —Å YouTube API)
   - firebase-mcp (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Firebase)
   - github-mcp (—Ä–∞–±–æ—Ç–∞ —Å GitHub)

3. **–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è** –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

## üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:

### 1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor
**–í–ê–ñ–ù–û:** –ó–∞–∫—Ä–æ–π—Ç–µ Cursor –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–Ω–æ–≤–æ

### 2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤: **Settings** ‚Üí **Tools & Integrations** ‚Üí **MCP Tools**

### 3. –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
- ‚úÖ –û—à–∏–±–∫–∞ "JSON syntax error" –¥–æ–ª–∂–Ω–∞ –∏—Å—á–µ–∑–Ω—É—Ç—å
- ‚úÖ –î–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
- ‚úÖ –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã (–∑–µ–ª–µ–Ω—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏)

### 4. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞–ª–∏—Å—å:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ Developer Tools (F12)
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: \`node monitor-mcp.js\`
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª: \`${configPath}\`

## üìÅ –§–∞–π–ª—ã:
- **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:** \`${configPath}\`
- **–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è:** \`${configPath}.backup.*\`
- **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:** \`node monitor-mcp.js\`

## üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:
–ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Cursor –≤—Å–µ –Ω–æ–≤—ã–µ MCP —Å–µ—Ä–≤–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—Ç—å!

---
**–°—Ç–∞—Ç—É—Å:** ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
**–í—Ä–µ–º—è:** ${new Date().toISOString()}
`;

    fs.writeFileSync('MCP_FIX_REPORT.md', instructions);
    log('‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: MCP_FIX_REPORT.md', 'green');
  }

  // –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
  async fix() {
    log('üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï MCP –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò', 'bright');
    log('–ü—Ä–æ–µ–∫—Ç: WorkInCZ', 'cyan');
    log('–í—Ä–µ–º—è: ' + new Date().toISOString(), 'cyan');

    try {
      // 1. –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      logStep('üîç –ü–û–ò–°–ö –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò', '–ò—â—É –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP...');
      const configPath = this.findConfigFile();

      // 2. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
      logStep('üíæ –†–ï–ó–ï–†–í–ù–ê–Ø –ö–û–ü–ò–Ø', '–°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
      this.createBackup(configPath);

      // 3. –ß–∏—Ç–∞–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      logStep('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï JSON', '–ß–∏—Ç–∞—é –∏ –∏—Å–ø—Ä–∞–≤–ª—è—é JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å...');
      let config = this.readAndFixConfig(configPath);

      // 4. –î–æ–±–∞–≤–ª—è–µ–º MCP —Å–µ—Ä–≤–µ—Ä—ã
      logStep('‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–ï–†–í–ï–†–û–í', '–î–æ–±–∞–≤–ª—è—é –Ω–æ–≤—ã–µ MCP —Å–µ—Ä–≤–µ—Ä—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...');
      config = this.addMCPServers(config);

      // 5. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      logStep('üíæ –ó–ê–ü–ò–°–¨ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò', '–ó–∞–ø–∏—Å—ã–≤–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...');
      const success = this.writeConfig(configPath, config);

      if (!success) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
      }

      // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤
      this.checkServerInstallation();

      // 7. –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
      logStep('üìù –ò–ù–°–¢–†–£–ö–¶–ò–ò', '–°–æ–∑–¥–∞—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
      this.createInstructions(configPath);

      // 8. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      this.showResults(configPath, config);

      log('\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!', 'bright');
      log('–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.', 'cyan');

    } catch (error) {
      log('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ' + error.message, 'red');
      process.exit(1);
    }
  }

  // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  showResults(configPath, config) {
    const serverCount = Object.keys(config.mcp?.servers || {}).length;

    log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:', 'bright');
    log(`  –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${configPath}`, 'blue');
    log(`  –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: ${serverCount}`, 'green');
    log(`  JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–µ–Ω`, 'green');

    log('\n‚úÖ –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –°–ï–†–í–ï–†–´:', 'green');
    Object.keys(config.mcp?.servers || {}).forEach(name => {
      log(`  - ${name}`, 'green');
    });

    log('\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:', 'cyan');
    log('  1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor', 'blue');
    log('  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Settings ‚Üí Tools & Integrations ‚Üí MCP Tools', 'blue');
    log('  3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—à–∏–±–∫–∞ JSON –∏—Å—á–µ–∑–ª–∞', 'blue');
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
if (require.main === module) {
  const fixer = new MCPConfigFixer();
  fixer.fix().then(() => {
    log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!', 'green');
  }).catch(error => {
    log('\n‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ' + error.message, 'red');
    process.exit(1);
  });
}

module.exports = MCPConfigFixer; 