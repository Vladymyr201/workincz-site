// PAYMENT MANAGER - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏ Stripe –¥–ª—è WorkInCZ
// –ì–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å: —Ä–∞–∑–æ–≤—ã–µ —É—Å–ª—É–≥–∏ + success-fee + –ø–æ–¥–ø–∏—Å–∫–∏

class PaymentManager {
    constructor() {
        this.stripe = null;
        this.isStripeLoaded = false;
        this.init();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Stripe
    async init() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º Stripe.js
            if (!window.Stripe) {
                const script = document.createElement('script');
                script.src = 'https://js.stripe.com/v3/';
                script.onload = () => this.initStripe();
                document.head.appendChild(script);
            } else {
                this.initStripe();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Stripe:', error);
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Stripe —Å –ø—É–±–ª–∏—á–Ω—ã–º –∫–ª—é—á–æ–º
    initStripe() {
        // –í production –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
        const publishableKey = 'pk_test_51234567890'; // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á
        this.stripe = Stripe(publishableKey);
        this.isStripeLoaded = true;
        console.log('‚úÖ Stripe —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // ====== –†–ê–ó–û–í–´–ï –£–°–õ–£–ì–ò –≠–¢–ê–ü–ê 1 ======

    // üî• –ì–æ—Ä—è—á–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (400 Kƒç / 7 –¥–Ω–µ–π)
    async purchaseFeaturedJob(jobId, jobTitle) {
        if (!this.isStripeLoaded) {
            throw new Error('Stripe –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        }

        const amount = 40000; // 400 Kƒç –≤ —Ü–µ–Ω—Ç–∞—Ö
        const currency = 'czk';
        
        try {
            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–π intent –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (Firebase Functions)
            const response = await fetch('/api/create-payment-intent', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    amount: amount,
                    currency: currency,
                    service: 'featured_job',
                    metadata: {
                        jobId: jobId,
                        jobTitle: jobTitle,
                        duration: '7_days'
                    }
                })
            });

            const { clientSecret } = await response.json();

            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã
            const { error, paymentIntent } = await this.stripe.confirmCardPayment(clientSecret, {
                payment_method: {
                    card: this.cardElement,
                    billing_details: {
                        name: AuthManager.currentUser?.displayName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å WorkInCZ'
                    }
                }
            });

            if (error) {
                throw error;
            }

            if (paymentIntent.status === 'succeeded') {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ Firestore
                await this.updateJobAsFeatured(jobId);
                return { success: true, paymentId: paymentIntent.id };
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –≥–æ—Ä—è—á–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
            throw error;
        }
    }

    // ‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è (250 Kƒç)
    async purchaseProfileVerification(userId) {
        if (!this.isStripeLoaded) {
            throw new Error('Stripe –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        }

        const amount = 25000; // 250 Kƒç –≤ —Ü–µ–Ω—Ç–∞—Ö
        const currency = 'czk';
        
        try {
            const response = await fetch('/api/create-payment-intent', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    amount: amount,
                    currency: currency,
                    service: 'profile_verification',
                    metadata: {
                        userId: userId
                    }
                })
            });

            const { clientSecret } = await response.json();

            const { error, paymentIntent } = await this.stripe.confirmCardPayment(clientSecret, {
                payment_method: {
                    card: this.cardElement,
                    billing_details: {
                        name: AuthManager.currentUser?.displayName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å WorkInCZ'
                    }
                }
            });

            if (error) {
                throw error;
            }

            if (paymentIntent.status === 'succeeded') {
                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                await this.initiateProfileVerification(userId);
                return { success: true, paymentId: paymentIntent.id };
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    // üìà –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ (200 Kƒç / 5 –¥–Ω–µ–π)
    async purchaseResumePromotion(userId) {
        if (!this.isStripeLoaded) {
            throw new Error('Stripe –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        }

        const amount = 20000; // 200 Kƒç –≤ —Ü–µ–Ω—Ç–∞—Ö
        const currency = 'czk';
        
        try {
            const response = await fetch('/api/create-payment-intent', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    amount: amount,
                    currency: currency,
                    service: 'resume_promotion',
                    metadata: {
                        userId: userId,
                        duration: '5_days'
                    }
                })
            });

            const { clientSecret } = await response.json();

            const { error, paymentIntent } = await this.stripe.confirmCardPayment(clientSecret, {
                payment_method: {
                    card: this.cardElement,
                    billing_details: {
                        name: AuthManager.currentUser?.displayName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å WorkInCZ'
                    }
                }
            });

            if (error) {
                throw error;
            }

            if (paymentIntent.status === 'succeeded') {
                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ
                await this.activateResumePromotion(userId);
                return { success: true, paymentId: paymentIntent.id };
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Ä–µ–∑—é–º–µ:', error);
            throw error;
        }
    }

    // ====== –ì–ò–ë–†–ò–î–ù–ê–Ø –ú–û–î–ï–õ–¨: SUCCESS-FEE –ü–õ–ê–¢–ï–ñ–ò ======

    // üí∞ Success-fee –¥–ª—è –∞–≥–µ–Ω—Ç—Å—Ç–≤ (5-15% –æ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞)
    async processSuccessFeePayment(contractId, candidateId, salaryAmount) {
        if (!this.isStripeLoaded) {
            throw new Error('Stripe –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º success-fee (5-15% –æ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã)
        const successFeePercentage = 0.10; // 10% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const successFeeAmount = Math.round(salaryAmount * successFeePercentage);
        const amountInCents = successFeeAmount * 100; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ü–µ–Ω—Ç—ã

        try {
            const response = await fetch('/api/create-success-fee-payment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    amount: amountInCents,
                    currency: 'czk',
                    service: 'success_fee',
                    metadata: {
                        contractId: contractId,
                        candidateId: candidateId,
                        agencyId: this.currentUser?.uid,
                        salaryAmount: salaryAmount,
                        successFeeAmount: successFeeAmount,
                        successFeePercentage: successFeePercentage
                    }
                })
            });

            const { clientSecret } = await response.json();

            const { error, paymentIntent } = await this.stripe.confirmCardPayment(clientSecret, {
                payment_method: {
                    card: this.cardElement,
                    billing_details: {
                        name: AuthManager.currentUser?.displayName || '–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ WorkInCZ'
                    }
                }
            });

            if (error) {
                throw error;
            }

            if (paymentIntent.status === 'succeeded') {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
                await this.updateContractPaymentStatus(contractId, 'paid');
                return { success: true, paymentId: paymentIntent.id, amount: successFeeAmount };
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ success-fee:', error);
            throw error;
        }
    }

    // üè¢ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ (Premium Agency - 2,990 Kƒç/–º–µ—Å)
    async subscribeAgencyPremium(agencyId) {
        if (!this.isStripeLoaded) {
            throw new Error('Stripe –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        }

        try {
            const response = await fetch('/api/create-agency-subscription', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    agencyId: agencyId,
                    plan: 'premium_agency',
                    priceId: 'price_premium_agency_monthly', // ID —Ç–∞—Ä–∏—Ñ–∞ –≤ Stripe
                    metadata: {
                        agencyId: agencyId,
                        plan: 'premium_agency'
                    }
                })
            });

            const { subscriptionId, clientSecret } = await response.json();

            const { error, paymentIntent } = await this.stripe.confirmCardPayment(clientSecret, {
                payment_method: {
                    card: this.cardElement,
                    billing_details: {
                        name: AuthManager.currentUser?.displayName || '–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ WorkInCZ'
                    }
                }
            });

            if (error) {
                throw error;
            }

            if (paymentIntent.status === 'succeeded') {
                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞
                await this.activateAgencySubscription(agencyId, subscriptionId);
                return { success: true, subscriptionId: subscriptionId };
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞:', error);
            throw error;
        }
    }

    // üí≥ Stripe Connect –¥–ª—è –∞–≥–µ–Ω—Ç—Å—Ç–≤ (–∫–æ–º–∏—Å—Å–∏—è —Å –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏)
    async setupStripeConnectAccount(agencyId) {
        try {
            const response = await fetch('/api/create-connect-account', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    agencyId: agencyId,
                    country: 'CZ',
                    type: 'express'
                })
            });

            const { accountId, accountLink } = await response.json();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º account ID –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞
            await this.updateAgencyStripeAccount(agencyId, accountId);

            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
            window.location.href = accountLink;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Stripe Connect –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
            throw error;
        }
    }

    // ====== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ======

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
    async updateContractPaymentStatus(contractId, status) {
        try {
            const contractRef = this.db.collection('contracts').doc(contractId);
            await contractRef.update({
                payment_status: status,
                paid_at: new Date(),
                updated_at: new Date()
            });

            console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ${contractId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${status}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', error);
            throw error;
        }
    }

    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞
    async activateAgencySubscription(agencyId, subscriptionId) {
        try {
            const agencyRef = this.db.collection('users').doc(agencyId);
            await agencyRef.update({
                'subscription.type': 'premium_agency',
                'subscription.stripe_subscription_id': subscriptionId,
                'subscription.expires_at': new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // +30 –¥–Ω–µ–π
                'is_premium': true,
                updated_at: new Date()
            });

            console.log(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ ${agencyId} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞:', error);
            throw error;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Stripe Connect –∞–∫–∫–∞—É–Ω—Ç–∞ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞
    async updateAgencyStripeAccount(agencyId, accountId) {
        try {
            const agencyRef = this.db.collection('users').doc(agencyId);
            await agencyRef.update({
                'stripe_connect.account_id': accountId,
                'stripe_connect.status': 'pending',
                updated_at: new Date()
            });

            console.log(`‚úÖ Stripe Connect –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ ${agencyId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Stripe Connect –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
            throw error;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–∞–∫ "–≥–æ—Ä—è—á–∞—è"
    async updateJobAsFeatured(jobId) {
        try {
            const expirationDate = new Date();
            expirationDate.setDate(expirationDate.getDate() + 7); // +7 –¥–Ω–µ–π

            await db.collection('jobs').doc(jobId).update({
                is_featured: true,
                featured_until: expirationDate,
                featured_purchased_at: new Date()
            });

            console.log(`‚úÖ –í–∞–∫–∞–Ω—Å–∏—è ${jobId} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≥–æ—Ä—è—á–∞—è –¥–æ ${expirationDate}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–∫–∞–Ω—Å–∏–∏:', error);
            throw error;
        }
    }

    // –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
    async initiateProfileVerification(userId) {
        try {
            await db.collection('users').doc(userId).update({
                verification_requested: true,
                verification_paid: true,
                verification_status: 'pending',
                verification_requested_at: new Date()
            });

            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            await db.collection('verification_requests').add({
                userId: userId,
                requestedAt: new Date(),
                status: 'pending',
                type: 'profile_verification'
            });

            console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Ä–µ–∑—é–º–µ
    async activateResumePromotion(userId) {
        try {
            const expirationDate = new Date();
            expirationDate.setDate(expirationDate.getDate() + 5); // +5 –¥–Ω–µ–π

            await db.collection('users').doc(userId).update({
                resume_promoted: true,
                promoted_until: expirationDate,
                promotion_purchased_at: new Date()
            });

            console.log(`‚úÖ –†–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è –¥–æ ${expirationDate}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Ä–µ–∑—é–º–µ:', error);
            throw error;
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞—Ä—Ç—ã –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    createCardElement(containerId) {
        if (!this.stripe) {
                          console.log('üîß Stripe –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –æ–∂–∏–¥–∞–µ–º...');
            return;
        }

        const elements = this.stripe.elements();
        this.cardElement = elements.create('card', {
            style: {
                base: {
                    fontSize: '16px',
                    color: '#424770',
                    '::placeholder': {
                        color: '#aab7c4',
                    },
                },
                invalid: {
                    color: '#9e2146',
                },
            },
        });

        this.cardElement.mount(`#${containerId}`);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–≤–æ–¥–∞ –∫–∞—Ä—Ç—ã
        this.cardElement.on('change', (event) => {
            const displayError = document.getElementById('card-errors');
            if (event.error) {
                displayError.textContent = event.error.message;
            } else {
                displayError.textContent = '';
            }
        });
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –≤ —á–µ—à—Å–∫–∏—Ö –∫—Ä–æ–Ω–∞—Ö
    formatPrice(amountInCents, currency = 'CZK') {
        const amount = amountInCents / 100;
        return new Intl.NumberFormat('cs-CZ', {
            style: 'currency',
            currency: currency
        }).format(amount);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    async checkPaymentStatus(paymentIntentId) {
        try {
            const response = await fetch(`/api/payment-status/${paymentIntentId}`);
            const { status } = await response.json();
            return status;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:', error);
            throw error;
        }
    }
}

// ====== UI –ö–û–ú–ü–û–ù–ï–ù–¢–´ –î–õ–Ø –ü–õ–ê–¢–ï–ñ–ï–ô ======

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∫—É–ø–∫–∏ –≥–æ—Ä—è—á–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
function openFeaturedJobModal(jobId, jobTitle) {
    const modal = `
        <div id="featured-job-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white rounded-lg p-8 max-w-md w-full mx-4">
                <div class="flex justify-between items-center mb-6">
                    <h3 class="text-xl font-semibold">üî• –ì–æ—Ä—è—á–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</h3>
                    <button onclick="closeFeaturedJobModal()" class="text-gray-500 hover:text-gray-700">
                        <i class="ri-close-line text-xl"></i>
                    </button>
                </div>
                
                <div class="mb-6">
                    <div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
                        <div class="flex items-center gap-2 mb-2">
                            <span class="text-red-600 font-medium">‚ö° –ì–û–†–Ø–ß–ê–Ø –í–ê–ö–ê–ù–°–ò–Ø</span>
                        </div>
                        <p class="text-sm text-gray-600">–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç:</p>
                        <ul class="text-sm text-gray-600 mt-2 space-y-1">
                            <li>‚Ä¢ –í—ã–¥–µ–ª–µ–Ω–æ –∫—Ä–∞—Å–Ω–æ–π —Ä–∞–º–∫–æ–π</li>
                            <li>‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤ —Ç–æ–ø–µ —Å–ø–∏—Å–∫–∞</li>
                            <li>‚Ä¢ –ü–æ–º–µ—á–µ–Ω–æ –∑–Ω–∞—á–∫–æ–º ‚ö°</li>
                            <li>‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ 7 –¥–Ω–µ–π</li>
                        </ul>
                    </div>
                    
                    <div class="text-center">
                        <div class="text-3xl font-bold text-primary mb-2">400 Kƒç</div>
                        <div class="text-gray-500">–∑–∞ 7 –¥–Ω–µ–π –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è</div>
                    </div>
                </div>

                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-700 mb-2">–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã</label>
                    <div id="card-element" class="border border-gray-300 rounded-lg p-3">
                        <!-- Stripe Elements —Å–æ–∑–¥–∞—Å—Ç –∑–¥–µ—Å—å –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∫–∞—Ä—Ç—ã -->
                    </div>
                    <div id="card-errors" class="text-red-600 text-sm mt-2"></div>
                </div>

                <div class="flex gap-3">
                    <button onclick="closeFeaturedJobModal()" class="flex-1 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button onclick="processFeaturedJobPayment('${jobId}', '${jobTitle}')" class="flex-1 px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90">
                        –û–ø–ª–∞—Ç–∏—Ç—å 400 Kƒç
                    </button>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modal);
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã
    setTimeout(() => {
        paymentManager.createCardElement('card-element');
    }, 100);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeFeaturedJobModal() {
    const modal = document.getElementById('featured-job-modal');
    if (modal) {
        modal.remove();
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –≥–æ—Ä—è—á–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
async function processFeaturedJobPayment(jobId, jobTitle) {
    try {
        showLoadingState();
        const result = await paymentManager.purchaseFeaturedJob(jobId, jobTitle);
        
        if (result.success) {
            closeFeaturedJobModal();
            showSuccessMessage('üî• –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –≥–æ—Ä—è—á–µ–µ! –û–Ω–æ –±—É–¥–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–æ 7 –¥–Ω–µ–π.');
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            updateJobCardAsFeatured(jobId);
        }
    } catch (error) {
        showErrorMessage('–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã: ' + error.message);
    } finally {
        hideLoadingState();
    }
}

// –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
function showSuccessMessage(message) {
    const toast = `
        <div id="success-toast" class="fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50">
            <div class="flex items-center gap-2">
                <i class="ri-check-circle-line"></i>
                <span>${message}</span>
            </div>
        </div>
    `;
    document.body.insertAdjacentHTML('beforeend', toast);
    
    setTimeout(() => {
        const toastEl = document.getElementById('success-toast');
        if (toastEl) toastEl.remove();
    }, 5000);
}

function showErrorMessage(message) {
    const toast = `
        <div id="error-toast" class="fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50">
            <div class="flex items-center gap-2">
                <i class="ri-error-warning-line"></i>
                <span>${message}</span>
            </div>
        </div>
    `;
    document.body.insertAdjacentHTML('beforeend', toast);
    
    setTimeout(() => {
        const toastEl = document.getElementById('error-toast');
        if (toastEl) toastEl.remove();
    }, 5000);
}

function showLoadingState() {
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫ –∫–Ω–æ–ø–∫–µ
    const button = document.querySelector('[onclick*="processFeaturedJobPayment"]');
    if (button) {
        button.disabled = true;
        button.innerHTML = '<i class="ri-loader-4-line animate-spin mr-2"></i>–û–±—Ä–∞–±–æ—Ç–∫–∞...';
    }
}

function hideLoadingState() {
    const button = document.querySelector('[onclick*="processFeaturedJobPayment"]');
    if (button) {
        button.disabled = false;
        button.innerHTML = '–û–ø–ª–∞—Ç–∏—Ç—å 400 Kƒç';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–∞–∫ "–≥–æ—Ä—è—á–∞—è"
function updateJobCardAsFeatured(jobId) {
    const jobCard = document.querySelector(`[data-job-id="${jobId}"]`);
    if (jobCard) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–Ω—É—é —Ä–∞–º–∫—É –∏ –∑–Ω–∞—á–æ–∫
        jobCard.classList.add('border-red-500', 'border-2');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–æ–∫ "–≥–æ—Ä—è—á–∞—è"
        const titleElement = jobCard.querySelector('h3');
        if (titleElement && !titleElement.querySelector('.featured-badge')) {
            titleElement.insertAdjacentHTML('afterbegin', '<span class="featured-badge mr-2">‚ö°</span>');
        }
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ —Ç–æ–ø —Å–ø–∏—Å–∫–∞
        const container = jobCard.parentElement;
        container.insertBefore(jobCard, container.firstChild);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π
const paymentManager = new PaymentManager();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = PaymentManager;
} 