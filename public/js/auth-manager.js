// –ü—Ä–æ—Å—Ç–æ–π AuthManager
class AuthManager {
  constructor() {
    this.currentUser = null;
    this.isInitialized = false;
    this.init();
  }

  async init() {
    console.log('AuthManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...');
    
    if (typeof firebase === 'undefined') {
      console.log('Firebase –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –æ–∂–∏–¥–∞–µ–º...');
      return;
    }

    try {
      this.db = firebase.firestore();
      this.auth = firebase.auth();
      
      console.log('AuthManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      this.isInitialized = true;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã
      console.log('üîç AuthManager –º–µ—Ç–æ–¥—ã:', {
        hasUpdateAuthUI: typeof this.updateAuthUI,
        hasWaitForReady: typeof this.waitForReady,
        hasSubscribe: typeof this.subscribe
      });
      
      // –°–ª—É—à–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      this.auth.onAuthStateChanged((user) => {
        this.currentUser = user;
        console.log('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', user?.email || '–í—ã—Ö–æ–¥');
        this.updateAuthUI(user);
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AuthManager:', error);
    }
  }

  getCurrentUser() {
    return this.currentUser;
  }

  isReady() {
    return this.isInitialized;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  updateAuthUI(user) {
    this.currentUser = user;
    console.log('AuthManager: UI –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user?.email || '–í—ã—Ö–æ–¥');
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (window.jobsManager) {
      window.jobsManager.currentUser = user;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
    this.updateLoginButtons(user);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞
  updateLoginButtons(user) {
    const loginBtn = document.getElementById('loginBtn');
    const registerBtn = document.getElementById('registerBtn');
    const demoLoginBtn = document.getElementById('demoLoginBtn');
    
    if (user) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª
      if (loginBtn) {
        loginBtn.textContent = '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç';
        loginBtn.onclick = () => window.location.href = '/dashboard.html';
      }
      if (registerBtn) {
        registerBtn.textContent = '–í—ã–π—Ç–∏';
        registerBtn.onclick = () => this.signOut();
      }
      if (demoLoginBtn) {
        demoLoginBtn.style.display = 'none';
      }
    } else {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª
      if (loginBtn) {
        loginBtn.textContent = '–í–æ–π—Ç–∏';
        loginBtn.onclick = () => {
          if (window.enhancedAuthSystem) {
            window.enhancedAuthSystem.showEnhancedLoginModal();
          }
        };
      }
      if (registerBtn) {
        registerBtn.textContent = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è';
        registerBtn.onclick = () => {
          if (window.registrationSystem) {
            window.registrationSystem.showRegistrationModal();
          }
        };
      }
      if (demoLoginBtn) {
        demoLoginBtn.style.display = 'inline-block';
      }
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  async signOut() {
    try {
      await this.auth.signOut();
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
    }
  }

  // –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
  async waitForReady() {
    while (!this.isInitialized) {
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    return true;
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  subscribe(callback) {
    return this.auth.onAuthStateChanged(callback);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firestore
  getUserData(userId) {
    // –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    return {
      role: 'candidate',
      fullName: 'Demo User',
      email: 'demo@workincz.cz'
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
window.AuthManager = AuthManager; 