/**
 * UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤, –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
 */

class SkillsTestingUI {
    constructor(skillsTestingSystem) {
        this.skillsTestingSystem = skillsTestingSystem;
        this.currentSession = null;
        this.currentQuestionIndex = 0;
        this.testTimer = null;
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
     */
    init() {
        this.createUI();
        this.setupEventListeners();
        console.log('üé® UI —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    createUI() {
        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.createTestingPanel();
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª —Ç–µ—Å—Ç–∞
        this.createTestModal();
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        this.createResultsPanel();
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        this.createCertificatesPanel();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    createTestingPanel() {
        const panel = document.createElement('div');
        panel.id = 'skills-testing-panel';
        panel.className = 'fixed inset-0 lg:inset-auto lg:bottom-4 lg:right-4 lg:w-96 lg:h-[600px] bg-white border lg:border-gray-200 lg:rounded-lg lg:shadow-lg flex-col z-50 hidden';
        
        panel.innerHTML = `
            <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
            <div class="testing-header flex items-center justify-between p-4 border-b border-gray-200 bg-gradient-to-r from-blue-500 to-purple-600 text-white lg:rounded-t-lg">
                <div class="flex items-center gap-2">
                    <i class="ri-test-tube-line text-xl"></i>
                    <h3 class="font-semibold">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤</h3>
                </div>
                <button onclick="skillsTestingUI.closeTestingPanel()" class="text-white hover:text-gray-200">
                    <i class="ri-close-line text-xl"></i>
                </button>
            </div>
            
            <!-- –ù–∞–≤–∏–≥–∞—Ü–∏—è -->
            <div class="testing-nav flex border-b border-gray-200">
                <button onclick="skillsTestingUI.showTab('tests')" class="flex-1 py-3 px-4 text-sm font-medium text-gray-700 hover:text-blue-600 border-b-2 border-transparent hover:border-blue-600" data-tab="tests">
                    <i class="ri-list-check mr-2"></i>–¢–µ—Å—Ç—ã
                </button>
                <button onclick="skillsTestingUI.showTab('results')" class="flex-1 py-3 px-4 text-sm font-medium text-gray-700 hover:text-blue-600 border-b-2 border-transparent hover:border-blue-600" data-tab="results">
                    <i class="ri-bar-chart-line mr-2"></i>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã
                </button>
                <button onclick="skillsTestingUI.showTab('certificates')" class="flex-1 py-3 px-4 text-sm font-medium text-gray-700 hover:text-blue-600 border-b-2 border-transparent hover:border-blue-600" data-tab="certificates">
                    <i class="ri-medal-line mr-2"></i>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
                </button>
            </div>
            
            <!-- –ö–æ–Ω—Ç–µ–Ω—Ç -->
            <div class="testing-content flex-1 overflow-y-auto">
                <!-- –í–∫–ª–∞–¥–∫–∞ —Ç–µ—Å—Ç–æ–≤ -->
                <div id="tests-tab" class="p-4">
                    <div class="mb-4">
                        <h4 class="text-lg font-semibold mb-2">–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã</h4>
                        <div class="flex gap-2 mb-4">
                            <button onclick="skillsTestingUI.filterTests('all')" class="px-3 py-1 text-sm bg-blue-100 text-blue-700 rounded-full hover:bg-blue-200" data-filter="all">
                                –í—Å–µ
                            </button>
                            <button onclick="skillsTestingUI.filterTests('technical')" class="px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200" data-filter="technical">
                                üíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ
                            </button>
                            <button onclick="skillsTestingUI.filterTests('language')" class="px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200" data-filter="language">
                                üåç –Ø–∑—ã–∫–∏
                            </button>
                            <button onclick="skillsTestingUI.filterTests('soft_skills')" class="px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200" data-filter="soft_skills">
                                ü§ù –ú—è–≥–∫–∏–µ –Ω–∞–≤—ã–∫–∏
                            </button>
                        </div>
                    </div>
                    
                    <div id="tests-list" class="space-y-3">
                        <!-- –¢–µ—Å—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                    </div>
                </div>
                
                <!-- –í–∫–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ -->
                <div id="results-tab" class="p-4 hidden">
                    <div class="mb-4">
                        <h4 class="text-lg font-semibold mb-2">–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</h4>
                        <div id="results-summary" class="bg-gray-50 rounded-lg p-4 mb-4">
                            <!-- –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ -->
                        </div>
                    </div>
                    
                    <div id="results-list" class="space-y-3">
                        <!-- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                    </div>
                </div>
                
                <!-- –í–∫–ª–∞–¥–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ -->
                <div id="certificates-tab" class="p-4 hidden">
                    <div class="mb-4">
                        <h4 class="text-lg font-semibold mb-2">–í–∞—à–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã</h4>
                    </div>
                    
                    <div id="certificates-list" class="space-y-3">
                        <!-- –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(panel);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª–∞ —Ç–µ—Å—Ç–∞
     */
    createTestModal() {
        const modal = document.createElement('div');
        modal.id = 'test-modal';
        modal.className = 'fixed inset-0 z-[9999] bg-black/50 backdrop-blur-sm hidden';
        
        modal.innerHTML = `
            <div class="flex items-center justify-center min-h-screen p-4">
                <div class="bg-white rounded-xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
                    <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–∞ -->
                    <div class="test-header bg-gradient-to-r from-blue-500 to-purple-600 text-white p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <h3 id="test-title" class="text-xl font-bold mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</h3>
                                <p id="test-description" class="text-blue-100">–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</p>
                            </div>
                            <div class="text-right">
                                <div id="test-timer" class="text-2xl font-mono mb-1">00:00</div>
                                <div class="text-sm text-blue-100">–í—Ä–µ–º—è</div>
                            </div>
                        </div>
                        
                        <!-- –ü—Ä–æ–≥—Ä–µ—Å—Å -->
                        <div class="mt-4">
                            <div class="flex justify-between text-sm text-blue-100 mb-1">
                                <span>–í–æ–ø—Ä–æ—Å <span id="current-question">1</span> –∏–∑ <span id="total-questions">10</span></span>
                                <span id="progress-percent">10%</span>
                            </div>
                            <div class="w-full bg-blue-200 rounded-full h-2">
                                <div id="progress-bar" class="bg-white h-2 rounded-full transition-all duration-300" style="width: 10%"></div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–µ—Å—Ç–∞ -->
                    <div class="test-content p-6 flex-1 overflow-y-auto">
                        <div id="question-container">
                            <!-- –í–æ–ø—Ä–æ—Å—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                        </div>
                    </div>
                    
                    <!-- –ù–∞–≤–∏–≥–∞—Ü–∏—è -->
                    <div class="test-navigation bg-gray-50 p-4 flex items-center justify-between">
                        <button id="prev-question" onclick="skillsTestingUI.previousQuestion()" class="px-4 py-2 text-gray-600 hover:text-gray-800 disabled:opacity-50 disabled:cursor-not-allowed">
                            <i class="ri-arrow-left-line mr-2"></i>–ù–∞–∑–∞–¥
                        </button>
                        
                        <div class="flex gap-2">
                            <button id="save-answer" onclick="skillsTestingUI.saveAnswer()" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
                                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç
                            </button>
                            <button id="finish-test" onclick="skillsTestingUI.finishTest()" class="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 hidden">
                                –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç
                            </button>
                        </div>
                        
                        <button id="next-question" onclick="skillsTestingUI.nextQuestion()" class="px-4 py-2 text-gray-600 hover:text-gray-800 disabled:opacity-50 disabled:cursor-not-allowed">
                            –î–∞–ª–µ–µ<i class="ri-arrow-right-line ml-2"></i>
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    createResultsPanel() {
        // –ü–∞–Ω–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–Ω–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
     */
    createCertificatesPanel() {
        // –ü–∞–Ω–µ–ª—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–Ω–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    showTestingPanel() {
        const panel = document.getElementById('skills-testing-panel');
        if (panel) {
            panel.classList.remove('hidden');
            panel.classList.add('flex');
            this.loadTests();
            console.log('üé® –ü–∞–Ω–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∞');
        }
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    closeTestingPanel() {
        const panel = document.getElementById('skills-testing-panel');
        if (panel) {
            panel.classList.add('hidden');
            panel.classList.remove('flex');
            console.log('üé® –ü–∞–Ω–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∞');
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –≤–∫–ª–∞–¥–∫—É
     */
    showTab(tabName) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
        document.querySelectorAll('[id$="-tab"]').forEach(tab => {
            tab.classList.add('hidden');
        });
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã —Å –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('[data-tab]').forEach(btn => {
            btn.classList.remove('border-blue-600', 'text-blue-600');
            btn.classList.add('border-transparent', 'text-gray-700');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        const tab = document.getElementById(`${tabName}-tab`);
        if (tab) {
            tab.classList.remove('hidden');
        }
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        const btn = document.querySelector(`[data-tab="${tabName}"]`);
        if (btn) {
            btn.classList.add('border-blue-600', 'text-blue-600');
            btn.classList.remove('border-transparent', 'text-gray-700');
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        switch (tabName) {
            case 'tests':
                this.loadTests();
                break;
            case 'results':
                this.loadResults();
                break;
            case 'certificates':
                this.loadCertificates();
                break;
        }
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
     */
    filterTests(category) {
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        document.querySelectorAll('[data-filter]').forEach(btn => {
            btn.classList.remove('bg-blue-100', 'text-blue-700');
            btn.classList.add('bg-gray-100', 'text-gray-700');
        });
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
        const btn = document.querySelector(`[data-filter="${category}"]`);
        if (btn) {
            btn.classList.add('bg-blue-100', 'text-blue-700');
            btn.classList.remove('bg-gray-100', 'text-gray-700');
        }
        
        this.loadTests(category);
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤
     */
    loadTests(category = 'all') {
        const container = document.getElementById('tests-list');
        if (!container) return;

        const userId = this.getCurrentUserId();
        const tests = this.skillsTestingSystem.getAvailableTests(userId, category === 'all' ? null : category);
        const userResults = this.skillsTestingSystem.getUserTestResults(userId);

        container.innerHTML = tests.map(test => {
            const lastResult = userResults
                .filter(r => r.testId === test.id)
                .sort((a, b) => b.startTime - a.startTime)[0];

            const status = lastResult ? 
                (lastResult.status === 'passed' ? 'passed' : 'failed') : 
                'not_taken';

            return `
                <div class="test-card bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
                    <div class="flex items-start justify-between mb-3">
                        <div class="flex-1">
                            <h5 class="font-semibold text-gray-900 mb-1">${test.name}</h5>
                            <p class="text-sm text-gray-600 mb-2">${test.description}</p>
                            <div class="flex items-center gap-4 text-xs text-gray-500">
                                <span><i class="ri-time-line mr-1"></i>${test.duration} –º–∏–Ω</span>
                                <span><i class="ri-question-line mr-1"></i>${test.questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤</span>
                                <span><i class="ri-target-line mr-1"></i>${test.passingScore}% –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è</span>
                            </div>
                        </div>
                        <div class="ml-4">
                            ${this.getStatusBadge(status, lastResult?.score)}
                        </div>
                    </div>
                    
                    <div class="flex gap-2">
                        <button onclick="skillsTestingUI.startTest('${test.id}')" 
                                class="flex-1 px-3 py-2 bg-blue-500 text-white text-sm rounded-lg hover:bg-blue-600 transition-colors">
                            ${status === 'not_taken' ? '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç' : '–ü–µ—Ä–µ—Å–¥–∞—Ç—å'}
                        </button>
                        ${lastResult ? `
                            <button onclick="skillsTestingUI.showTestResult('${lastResult.id}')" 
                                    class="px-3 py-2 bg-gray-100 text-gray-700 text-sm rounded-lg hover:bg-gray-200 transition-colors">
                                –†–µ–∑—É–ª—å—Ç–∞—Ç
                            </button>
                        ` : ''}
                    </div>
                </div>
            `;
        }).join('') || '<p class="text-gray-500 text-center py-8">–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ–π–¥–∂–∞ —Å—Ç–∞—Ç—É—Å–∞
     */
    getStatusBadge(status, score) {
        switch (status) {
            case 'passed':
                return `<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                    <i class="ri-check-line mr-1"></i>–ü—Ä–æ–π–¥–µ–Ω ${score}%
                </span>`;
            case 'failed':
                return `<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                    <i class="ri-close-line mr-1"></i>–ù–µ –ø—Ä–æ–π–¥–µ–Ω ${score}%
                </span>`;
            default:
                return `<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                    <i class="ri-play-line mr-1"></i>–ù–µ –ø—Ä–æ–π–¥–µ–Ω
                </span>`;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    loadResults() {
        const container = document.getElementById('results-list');
        const summaryContainer = document.getElementById('results-summary');
        if (!container || !summaryContainer) return;

        const userId = this.getCurrentUserId();
        const results = this.skillsTestingSystem.getUserTestResults(userId);
        const analytics = this.skillsTestingSystem.getAnalytics(userId);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        summaryContainer.innerHTML = `
            <div class="grid grid-cols-2 gap-4">
                <div class="text-center">
                    <div class="text-2xl font-bold text-blue-600">${analytics.totalTests}</div>
                    <div class="text-sm text-gray-600">–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤</div>
                </div>
                <div class="text-center">
                    <div class="text-2xl font-bold text-green-600">${analytics.passedTests}</div>
                    <div class="text-sm text-gray-600">–ü—Ä–æ–π–¥–µ–Ω–æ</div>
                </div>
                <div class="text-center">
                    <div class="text-2xl font-bold text-purple-600">${analytics.averageScore}%</div>
                    <div class="text-sm text-gray-600">–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</div>
                </div>
                <div class="text-center">
                    <div class="text-2xl font-bold text-orange-600">${analytics.certificates}</div>
                    <div class="text-sm text-gray-600">–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤</div>
                </div>
            </div>
        `;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        container.innerHTML = results.length > 0 ? results.map(result => {
            const test = this.skillsTestingSystem.getTest(result.testId);
            const duration = Math.round((result.endTime - result.startTime) / 60000);
            
            return `
                <div class="result-card bg-white border border-gray-200 rounded-lg p-4">
                    <div class="flex items-center justify-between mb-3">
                        <div>
                            <h5 class="font-semibold text-gray-900">${test?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç'}</h5>
                            <p class="text-sm text-gray-600">${new Date(result.startTime).toLocaleDateString()}</p>
                        </div>
                        <div class="text-right">
                            ${this.getStatusBadge(result.status, result.score)}
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-3 gap-4 text-sm">
                        <div>
                            <span class="text-gray-500">–ë–∞–ª–ª:</span>
                            <span class="font-semibold">${result.score}%</span>
                        </div>
                        <div>
                            <span class="text-gray-500">–í—Ä–µ–º—è:</span>
                            <span class="font-semibold">${duration} –º–∏–Ω</span>
                        </div>
                        <div>
                            <span class="text-gray-500">–°—Ç–∞—Ç—É—Å:</span>
                            <span class="font-semibold">${result.status === 'passed' ? '–ü—Ä–æ–π–¥–µ–Ω' : '–ù–µ –ø—Ä–æ–π–¥–µ–Ω'}</span>
                        </div>
                    </div>
                </div>
            `).join('') : '<p class="text-gray-500 text-center py-8">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
     */
    loadCertificates() {
        const container = document.getElementById('certificates-list');
        if (!container) return;

        const userId = this.getCurrentUserId();
        const certificates = this.skillsTestingSystem.getUserCertificates(userId);

        container.innerHTML = certificates.length > 0 ? certificates.map(cert => {
            const isExpired = cert.expiresAt < Date.now();
            
            return `
                <div class="certificate-card bg-gradient-to-r from-yellow-400 to-orange-500 text-white rounded-lg p-4">
                    <div class="flex items-center justify-between mb-3">
                        <div>
                            <h5 class="font-semibold text-lg">${cert.testName}</h5>
                            <p class="text-yellow-100">${cert.skill}</p>
                        </div>
                        <div class="text-right">
                            <div class="text-2xl font-bold">${cert.score}%</div>
                            <div class="text-sm text-yellow-100">–ë–∞–ª–ª</div>
                        </div>
                    </div>
                    
                    <div class="flex items-center justify-between text-sm">
                        <span>–í—ã–¥–∞–Ω: ${new Date(cert.issuedAt).toLocaleDateString()}</span>
                        <span class="${isExpired ? 'text-red-200' : 'text-yellow-100'}">
                            ${isExpired ? '–ò—Å—Ç–µ–∫' : `–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ ${new Date(cert.expiresAt).toLocaleDateString()}`}
                        </span>
                    </div>
                    
                    <div class="mt-3 flex gap-2">
                        <button onclick="skillsTestingUI.downloadCertificate('${cert.id}')" 
                                class="flex-1 px-3 py-2 bg-white text-orange-600 text-sm rounded-lg hover:bg-gray-100 transition-colors">
                            <i class="ri-download-line mr-1"></i>–°–∫–∞—á–∞—Ç—å
                        </button>
                        <button onclick="skillsTestingUI.shareCertificate('${cert.id}')" 
                                class="px-3 py-2 bg-white text-orange-600 text-sm rounded-lg hover:bg-gray-100 transition-colors">
                            <i class="ri-share-line"></i>
                        </button>
                    </div>
                </div>
            `).join('') : '<p class="text-gray-500 text-center py-8">–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
    }

    /**
     * –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
     */
    startTest(testId) {
        const userId = this.getCurrentUserId();
        const test = this.skillsTestingSystem.getTest(testId);
        
        if (!test) {
            alert('–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        try {
            this.currentSession = this.skillsTestingSystem.startTest(userId, testId);
            this.currentQuestionIndex = 0;
            
            this.showTestModal(test);
            this.loadQuestion();
            this.startTimer(test.duration);
            
            console.log(`üß™ –ù–∞—á–∞—Ç —Ç–µ—Å—Ç: ${test.name}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç');
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª —Ç–µ—Å—Ç–∞
     */
    showTestModal(test) {
        const modal = document.getElementById('test-modal');
        const title = document.getElementById('test-title');
        const description = document.getElementById('test-description');
        const totalQuestions = document.getElementById('total-questions');
        
        if (modal && title && description && totalQuestions) {
            title.textContent = test.name;
            description.textContent = test.description;
            totalQuestions.textContent = test.questions.length;
            
            modal.classList.remove('hidden');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å
     */
    loadQuestion() {
        if (!this.currentSession) return;

        const test = this.skillsTestingSystem.getTest(this.currentSession.testId);
        const question = test.questions[this.currentQuestionIndex];
        
        if (!question) return;

        const container = document.getElementById('question-container');
        const currentQuestionEl = document.getElementById('current-question');
        const progressBar = document.getElementById('progress-bar');
        const progressPercent = document.getElementById('progress-percent');
        
        if (container && currentQuestionEl && progressBar && progressPercent) {
            currentQuestionEl.textContent = this.currentQuestionIndex + 1;
            
            const progress = ((this.currentQuestionIndex + 1) / test.questions.length) * 100;
            progressBar.style.width = `${progress}%`;
            progressPercent.textContent = `${Math.round(progress)}%`;
            
            container.innerHTML = this.renderQuestion(question);
        }
        
        this.updateNavigationButtons();
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
     */
    renderQuestion(question) {
        switch (question.type) {
            case 'multiple_choice':
                return `
                    <div class="question-container">
                        <h4 class="text-lg font-semibold mb-4">${question.question}</h4>
                        <div class="space-y-3">
                            ${question.options.map((option, index) => `
                                <label class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                    <input type="radio" name="answer" value="${index}" class="mr-3">
                                    <span>${option}</span>
                                </label>
                            `).join('')}
                        </div>
                    </div>
                `;
                
            case 'translation':
                return `
                    <div class="question-container">
                        <h4 class="text-lg font-semibold mb-4">${question.question}</h4>
                        <div class="space-y-3">
                            <textarea id="translation-answer" 
                                      class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" 
                                      rows="3" 
                                      placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."></textarea>
                        </div>
                    </div>
                `;
                
            case 'code':
                return `
                    <div class="question-container">
                        <h4 class="text-lg font-semibold mb-4">${question.question}</h4>
                        <div class="space-y-3">
                            <pre class="bg-gray-100 p-4 rounded-lg text-sm overflow-x-auto">${question.template}</pre>
                            <textarea id="code-answer" 
                                      class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent font-mono text-sm" 
                                      rows="8" 
                                      placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–¥...">${question.template}</textarea>
                        </div>
                    </div>
                `;
                
            case 'scenario':
                return `
                    <div class="question-container">
                        <h4 class="text-lg font-semibold mb-4">${question.question}</h4>
                        <div class="space-y-3">
                            ${question.options.map((option, index) => `
                                <label class="flex items-start p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                    <input type="radio" name="answer" value="${index}" class="mr-3 mt-1">
                                    <span>${option}</span>
                                </label>
                            `).join('')}
                        </div>
                    </div>
                `;
                
            default:
                return '<p>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞</p>';
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    updateNavigationButtons() {
        if (!this.currentSession) return;

        const test = this.skillsTestingSystem.getTest(this.currentSession.testId);
        const prevBtn = document.getElementById('prev-question');
        const nextBtn = document.getElementById('next-question');
        const finishBtn = document.getElementById('finish-test');
        
        if (prevBtn && nextBtn && finishBtn) {
            prevBtn.disabled = this.currentQuestionIndex === 0;
            nextBtn.disabled = this.currentQuestionIndex === test.questions.length - 1;
            
            if (this.currentQuestionIndex === test.questions.length - 1) {
                finishBtn.classList.remove('hidden');
            } else {
                finishBtn.classList.add('hidden');
            }
        }
    }

    /**
     * –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
     */
    nextQuestion() {
        if (!this.currentSession) return;

        const test = this.skillsTestingSystem.getTest(this.currentSession.testId);
        if (this.currentQuestionIndex < test.questions.length - 1) {
            this.currentQuestionIndex++;
            this.loadQuestion();
        }
    }

    /**
     * –ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
     */
    previousQuestion() {
        if (this.currentQuestionIndex > 0) {
            this.currentQuestionIndex--;
            this.loadQuestion();
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç
     */
    saveAnswer() {
        if (!this.currentSession) return;

        const test = this.skillsTestingSystem.getTest(this.currentSession.testId);
        const question = test.questions[this.currentQuestionIndex];
        let answer = null;

        switch (question.type) {
            case 'multiple_choice':
            case 'scenario':
                const radio = document.querySelector('input[name="answer"]:checked');
                answer = radio ? parseInt(radio.value) : null;
                break;
                
            case 'translation':
                const textarea = document.getElementById('translation-answer');
                answer = textarea ? textarea.value : '';
                break;
                
            case 'code':
                const codeTextarea = document.getElementById('code-answer');
                answer = codeTextarea ? codeTextarea.value : '';
                break;
        }

        if (answer !== null) {
            this.skillsTestingSystem.submitAnswer(this.currentSession.id, question.id, answer);
            console.log(`üíæ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ${question.id}`);
        }
    }

    /**
     * –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç
     */
    finishTest() {
        if (!this.currentSession) return;

        try {
            const result = this.skillsTestingSystem.finishTest(this.currentSession.id);
            this.stopTimer();
            this.hideTestModal();
            
            this.showTestResult(result);
            
            console.log(`‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.score}%`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç');
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
     */
    showTestResult(result) {
        const modal = document.createElement('div');
        modal.className = 'fixed inset-0 z-[9999] bg-black/50 backdrop-blur-sm flex items-center justify-center p-4';
        
        const isPassed = result.passed;
        const test = this.skillsTestingSystem.getTest(result.session.testId);
        
        modal.innerHTML = `
            <div class="bg-white rounded-xl shadow-2xl max-w-md w-full p-6">
                <div class="text-center">
                    <div class="text-6xl mb-4">${isPassed ? 'üéâ' : 'üòî'}</div>
                    <h3 class="text-xl font-bold mb-2">${isPassed ? '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!' : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'}</h3>
                    <p class="text-gray-600 mb-4">${test.name}</p>
                    
                    <div class="bg-gray-50 rounded-lg p-4 mb-6">
                        <div class="text-3xl font-bold text-blue-600 mb-1">${result.score}%</div>
                        <div class="text-sm text-gray-600">–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç</div>
                    </div>
                    
                    <div class="text-sm text-gray-600 mb-6">
                        ${isPassed ? 
                            '–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç –∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç!' : 
                            `–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω—É–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º ${test.passingScore}%`
                        }
                    </div>
                    
                    <div class="flex gap-3">
                        <button onclick="this.closest('.fixed').remove()" 
                                class="flex-1 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200">
                            –ó–∞–∫—Ä—ã—Ç—å
                        </button>
                        ${!isPassed ? `
                            <button onclick="skillsTestingUI.retakeTest('${test.id}'); this.closest('.fixed').remove()" 
                                    class="flex-1 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
                                –ü–µ—Ä–µ—Å–¥–∞—Ç—å
                            </button>
                        ` : ''}
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
    }

    /**
     * –ü–µ—Ä–µ—Å–¥–∞—Ç—å —Ç–µ—Å—Ç
     */
    retakeTest(testId) {
        this.startTest(testId);
    }

    /**
     * –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª —Ç–µ—Å—Ç–∞
     */
    hideTestModal() {
        const modal = document.getElementById('test-modal');
        if (modal) {
            modal.classList.add('hidden');
        }
    }

    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä
     */
    startTimer(durationMinutes) {
        let timeLeft = durationMinutes * 60; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        const updateTimer = () => {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            const timerEl = document.getElementById('test-timer');
            
            if (timerEl) {
                timerEl.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }
            
            if (timeLeft <= 0) {
                this.finishTest();
                return;
            }
            
            timeLeft--;
            this.testTimer = setTimeout(updateTimer, 1000);
        };
        
        updateTimer();
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä
     */
    stopTimer() {
        if (this.testTimer) {
            clearTimeout(this.testTimer);
            this.testTimer = null;
        }
    }

    /**
     * –°–∫–∞—á–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
     */
    downloadCertificate(certificateId) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
        console.log(`üìÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: ${certificateId}`);
        alert('–§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ');
    }

    /**
     * –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º
     */
    shareCertificate(certificateId) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–æ—Ü—Å–µ—Ç—è–º–∏
        console.log(`üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º: ${certificateId}`);
        alert('–§—É–Ω–∫—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ');
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getCurrentUserId() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        return 'demo_user';
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ESC –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–æ–≤
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.hideTestModal();
                this.closeTestingPanel();
            }
        });
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SkillsTestingUI;
} 