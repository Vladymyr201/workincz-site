/**
 * –°–∏—Å—Ç–µ–º–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
 */

class PushNotificationSystem {
    constructor() {
        this.isSupported = 'serviceWorker' in navigator && 'PushManager' in window;
        this.subscription = null;
        this.notificationSettings = {
            newJobs: true,
            applicationUpdates: true,
            messages: true,
            recommendations: true,
            promotions: false,
            quietHours: { start: 22, end: 8 },
            frequency: 'immediate' // immediate, daily, weekly
        };
        this.notificationHistory = [];
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    async init() {
        if (!this.isSupported) {
            console.log('‚ùå Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
            return;
        }

        try {
            await this.registerServiceWorker();
            await this.loadSettings();
            await this.checkSubscription();
            this.setupEventListeners();
            console.log('üîî –°–∏—Å—Ç–µ–º–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        }
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker
     */
    async registerServiceWorker() {
        try {
            const registration = await navigator.serviceWorker.register('/sw.js');
            console.log('Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration);
            return registration;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    async loadSettings() {
        try {
            const savedSettings = localStorage.getItem('notificationSettings');
            if (savedSettings) {
                this.notificationSettings = { ...this.notificationSettings, ...JSON.parse(savedSettings) };
            }

            const savedHistory = localStorage.getItem('notificationHistory');
            if (savedHistory) {
                this.notificationHistory = JSON.parse(savedHistory);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    saveSettings() {
        try {
            localStorage.setItem('notificationSettings', JSON.stringify(this.notificationSettings));
            localStorage.setItem('notificationHistory', JSON.stringify(this.notificationHistory));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    async checkSubscription() {
        try {
            const registration = await navigator.serviceWorker.ready;
            this.subscription = await registration.pushManager.getSubscription();
            
            if (this.subscription) {
                console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞');
                return true;
            } else {
                console.log('‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return false;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
            return false;
        }
    }

    /**
     * –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    async requestPermission() {
        try {
            const permission = await Notification.requestPermission();
            
            if (permission === 'granted') {
                console.log('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ');
                await this.subscribeToPush();
                return true;
            } else if (permission === 'denied') {
                console.log('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
                this.showPermissionDeniedMessage();
                return false;
            } else {
                console.log('‚ùì –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ');
                return false;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:', error);
            return false;
        }
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    async subscribeToPush() {
        try {
            const registration = await navigator.serviceWorker.ready;
            
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã VAPID public key
            const vapidPublicKey = 'BEl62iUYgUivxIkv69yViEuiBIa1HxFRPz4KbJtS7Ek';
            const convertedVapidKey = this.urlBase64ToUint8Array(vapidPublicKey);
            
            this.subscription = await registration.pushManager.subscribe({
                userVisibleOnly: true,
                applicationServerKey: convertedVapidKey
            });

            console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞');
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            await this.sendSubscriptionToServer(this.subscription);
            
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            return false;
        }
    }

    /**
     * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    async unsubscribeFromPush() {
        try {
            if (this.subscription) {
                await this.subscription.unsubscribe();
                this.subscription = null;
                console.log('‚úÖ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
                
                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –æ–± –æ—Ç–ø–∏—Å–∫–µ
                await this.sendUnsubscriptionToServer();
                
                return true;
            }
            return false;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
            return false;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
     */
    async sendSubscriptionToServer(subscription) {
        try {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –∑–∞–ø—Ä–æ—Å
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', subscription);
            
            // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            await new Promise(resolve => setTimeout(resolve, 100));
            
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
            return false;
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –æ–± –æ—Ç–ø–∏—Å–∫–µ
     */
    async sendUnsubscriptionToServer() {
        try {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –∑–∞–ø—Ä–æ—Å
            console.log('üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –æ–± –æ—Ç–ø–∏—Å–∫–µ');
            
            // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            await new Promise(resolve => setTimeout(resolve, 100));
            
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –æ–± –æ—Ç–ø–∏—Å–∫–µ:', error);
            return false;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    async sendPushNotification(notificationData) {
        try {
            if (!this.subscription) {
                console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
                return false;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if (!this.shouldSendNotification(notificationData.type)) {
                console.log('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã');
                return false;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ç–∏—à–∏–Ω—ã
            if (this.isInQuietHours()) {
                console.log('üîá –í—Ä–µ–º—è —Ç–∏—à–∏–Ω—ã - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ');
                return false;
            }

            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notificationData);
            
            // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            await new Promise(resolve => setTimeout(resolve, 100));
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            this.addToHistory(notificationData);
            
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    shouldSendNotification(type) {
        return this.notificationSettings[type] !== false;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ç–∏—à–∏–Ω—ã
     */
    isInQuietHours() {
        const now = new Date();
        const currentHour = now.getHours();
        const { start, end } = this.notificationSettings.quietHours;
        
        if (start > end) {
            // –í—Ä–µ–º—è —Ç–∏—à–∏–Ω—ã –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
            return currentHour >= start || currentHour <= end;
        } else {
            return currentHour >= start && currentHour <= end;
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
     */
    addToHistory(notificationData) {
        const historyItem = {
            ...notificationData,
            timestamp: Date.now(),
            read: false
        };
        
        this.notificationHistory.unshift(historyItem);
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        if (this.notificationHistory.length > 100) {
            this.notificationHistory = this.notificationHistory.slice(0, 100);
        }
        
        this.saveSettings();
    }

    /**
     * –û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
     */
    markAsRead(notificationId) {
        const notification = this.notificationHistory.find(n => n.id === notificationId);
        if (notification) {
            notification.read = true;
            this.saveSettings();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    getUnreadNotifications() {
        return this.notificationHistory.filter(n => !n.read);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    getUnreadCount() {
        return this.getUnreadNotifications().length;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    updateSettings(newSettings) {
        this.notificationSettings = { ...this.notificationSettings, ...newSettings };
        this.saveSettings();
        console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
        document.addEventListener('click', (e) => {
            if (e.target.closest('.notification-item')) {
                const notificationId = e.target.closest('.notification-item').dataset.notificationId;
                this.markAsRead(notificationId);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç Service Worker
        navigator.serviceWorker.addEventListener('message', (event) => {
            if (event.data && event.data.type === 'NOTIFICATION_CLICKED') {
                this.handleNotificationClick(event.data.notification);
            }
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
     */
    handleNotificationClick(notification) {
        console.log('üîî –ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é:', notification);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        switch (notification.type) {
            case 'newJob':
                this.openJobDetails(notification.jobId);
                break;
            case 'applicationUpdate':
                this.openApplicationDetails(notification.applicationId);
                break;
            case 'message':
                this.openMessage(notification.messageId);
                break;
            case 'recommendation':
                this.openRecommendation(notification.recommendationId);
                break;
            default:
                console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notification.type);
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏
     */
    openJobDetails(jobId) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏
        console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:', jobId);
        // window.location.href = `/job/${jobId}`;
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏
     */
    openApplicationDetails(applicationId) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞—è–≤–∫–µ
        console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞—è–≤–∫–∏:', applicationId);
        // window.location.href = `/application/${applicationId}`;
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    openMessage(messageId) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', messageId);
        // window.location.href = `/messages/${messageId}`;
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
     */
    openRecommendation(recommendationId) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', recommendationId);
        // window.location.href = `/recommendations/${recommendationId}`;
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
     */
    showPermissionDeniedMessage() {
        const message = document.createElement('div');
        message.className = 'fixed top-4 right-4 bg-red-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
        message.innerHTML = `
            <div class="flex items-center">
                <span class="mr-2">üîî</span>
                <span>–†–∞–∑—Ä–µ—à–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</span>
            </div>
        `;
        
        document.body.appendChild(message);
        
        setTimeout(() => {
            document.body.removeChild(message);
        }, 5000);
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è VAPID –∫–ª—é—á–∞
     */
    urlBase64ToUint8Array(base64String) {
        const padding = '='.repeat((4 - base64String.length % 4) % 4);
        const base64 = (base64String + padding)
            .replace(/-/g, '+')
            .replace(/_/g, '/');

        const rawData = window.atob(base64);
        const outputArray = new Uint8Array(rawData.length);

        for (let i = 0; i < rawData.length; ++i) {
            outputArray[i] = rawData.charCodeAt(i);
        }
        return outputArray;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
     */
    getStatus() {
        return {
            isSupported: this.isSupported,
            hasPermission: Notification.permission === 'granted',
            isSubscribed: !!this.subscription,
            settings: this.notificationSettings,
            unreadCount: this.getUnreadCount(),
            history: this.notificationHistory
        };
    }

    /**
     * –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
     */
    enableTestMode() {
        console.log('üß™ –í–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
        
        // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const testNotifications = [
            {
                id: 'test-1',
                type: 'newJob',
                title: '–ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è',
                body: 'Frontend Developer –≤ TechCorp',
                jobId: 'job-123',
                icon: '/images/job-icon.png'
            },
            {
                id: 'test-2',
                type: 'applicationUpdate',
                title: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏',
                body: '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞',
                applicationId: 'app-456',
                icon: '/images/application-icon.png'
            },
            {
                id: 'test-3',
                type: 'message',
                title: '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                body: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç HR –º–µ–Ω–µ–¥–∂–µ—Ä–∞',
                messageId: 'msg-789',
                icon: '/images/message-icon.png'
            }
        ];

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        testNotifications.forEach((notification, index) => {
            setTimeout(() => {
                this.sendPushNotification(notification);
            }, index * 2000);
        });

        return testNotifications;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.PushNotificationSystem = PushNotificationSystem; 