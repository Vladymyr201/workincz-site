// üõ°Ô∏è Role Middleware - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
class RoleMiddleware {
  constructor() {
    this.roles = ['candidate', 'client', 'agency', 'admin'];
    this.roleRoutes = {
      candidate: ['/dashboard.html', '/profile.html', '/applications.html'],
      client: ['/employer-dashboard.html', '/post-job.html', '/applications.html'],
      agency: ['/agency-dashboard.html', '/requests.html', '/candidates.html'],
      admin: ['/admin-dashboard.html', '/users.html', '/moderation.html']
    };
    
    this.init();
  }

  init() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    this.checkAuthOnLoad();
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    this.setupAuthListener();
    
    console.log('üõ°Ô∏è RoleMiddleware –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  setupAuthListener() {
    if (typeof firebase !== 'undefined' && firebase.auth) {
      firebase.auth().onAuthStateChanged((user) => {
        if (user) {
          this.handleAuthenticatedUser(user);
        } else {
          this.handleUnauthenticatedUser();
        }
      });
    }
  }

  async checkAuthOnLoad() {
    try {
      if (typeof firebase !== 'undefined' && firebase.auth) {
        const user = firebase.auth().currentUser;
        if (user) {
          await this.handleAuthenticatedUser(user);
        } else {
          this.handleUnauthenticatedUser();
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    }
  }

  async handleAuthenticatedUser(user) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userDoc = await firebase.firestore().collection('users').doc(user.uid).get();
      
      if (userDoc.exists) {
        const userData = userDoc.data();
        const userRole = userData.role || 'candidate';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        this.checkPageAccess(userRole);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        this.setGlobalRole(userRole);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        this.updateUIForRole(userRole);
        
      } else {
        // –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        this.redirectToProfileCreation();
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
    }
  }

  handleUnauthenticatedUser() {
    const currentPath = window.location.pathname;
    const publicPages = ['/', '/index.html', '/login', '/register', '/auth/confirm.html'];
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—Ö–æ–¥
    if (!publicPages.includes(currentPath)) {
      this.redirectToLogin();
    }
  }

  checkPageAccess(userRole) {
    const currentPath = window.location.pathname;
    const allowedRoutes = this.roleRoutes[userRole] || [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const hasAccess = allowedRoutes.some(route => currentPath.includes(route)) || 
                     currentPath === '/' || 
                     currentPath === '/index.html';
    
    if (!hasAccess) {
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–∞—à–±–æ—Ä–¥
      this.redirectToRoleDashboard(userRole);
    }
  }

  redirectToRoleDashboard(role) {
    const dashboards = {
      candidate: '/dashboard.html',
      client: '/employer-dashboard.html',
      agency: '/agency-dashboard.html',
      admin: '/admin-dashboard.html'
    };

    const dashboardUrl = dashboards[role];
    if (dashboardUrl && window.location.pathname !== dashboardUrl) {
      this.showWarning(`–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ${this.getRoleDisplayName(role)}.`);
      
      setTimeout(() => {
        window.location.href = dashboardUrl;
      }, 3000);
    }
  }

  redirectToLogin() {
    if (window.location.pathname !== '/' && window.location.pathname !== '/index.html') {
      this.showWarning('–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.');
      
      setTimeout(() => {
        window.location.href = '/';
      }, 3000);
    }
  }

  redirectToProfileCreation() {
    this.showWarning('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.');
    
    setTimeout(() => {
      window.location.href = '/profile-setup.html';
    }, 3000);
  }

  setGlobalRole(role) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    window.currentUserRole = role;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º enhancedAuthSystem –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (window.enhancedAuthSystem) {
      window.enhancedAuthSystem.currentRole = role;
      window.enhancedAuthSystem.updateRoleSwitcher();
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∫ body –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
    document.body.classList.remove('role-candidate', 'role-client', 'role-agency', 'role-admin');
    document.body.classList.add(`role-${role}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('userRole', role);
  }

  updateUIForRole(role) {
    // –°–∫—Ä—ã–≤–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    this.updateNavigationForRole(role);
    this.updateSidebarForRole(role);
    this.updateContentForRole(role);
  }

  updateNavigationForRole(role) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    const roleSwitcher = document.getElementById('roleSwitcherContainer');
    if (roleSwitcher) {
      roleSwitcher.classList.remove('hidden');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏
    const roleText = document.getElementById('currentRoleText');
    if (roleText) {
      roleText.textContent = this.getRoleDisplayName(role);
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const authButtons = document.querySelectorAll('#loginBtn, #registerBtn');
    authButtons.forEach(btn => {
      if (btn) btn.style.display = 'none';
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) {
      logoutBtn.style.display = 'block';
    }
  }

  updateSidebarForRole(role) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–π–¥–±–∞—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    const sidebarItems = document.querySelectorAll('[data-role-only]');
    sidebarItems.forEach(item => {
      const requiredRole = item.getAttribute('data-role-only');
      if (requiredRole === role) {
        item.style.display = 'block';
      } else {
        item.style.display = 'none';
      }
    });
  }

  updateContentForRole(role) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    const contentSections = document.querySelectorAll('[data-role-content]');
    contentSections.forEach(section => {
      const sectionRole = section.getAttribute('data-role-content');
      if (sectionRole === role) {
        section.style.display = 'block';
      } else {
        section.style.display = 'none';
      }
    });
  }

  getRoleDisplayName(role) {
    const roleNames = {
      candidate: '–°–æ–∏—Å–∫–∞—Ç–µ–ª—å',
      client: '–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å',
      agency: '–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ',
      admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    };
    return roleNames[role] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
  hasRole(requiredRole) {
    return window.currentUserRole === requiredRole;
  }

  hasAnyRole(requiredRoles) {
    return requiredRoles.includes(window.currentUserRole);
  }

  requireRole(requiredRole, redirectUrl = null) {
    if (!this.hasRole(requiredRole)) {
      if (redirectUrl) {
        window.location.href = redirectUrl;
      } else {
        this.redirectToRoleDashboard(window.currentUserRole);
      }
      return false;
    }
    return true;
  }

  // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  showWarning(message) {
    const toast = document.createElement('div');
    toast.className = 'fixed top-4 right-4 bg-yellow-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 flex items-center gap-3';
    toast.innerHTML = `
      <i class="ri-alert-line text-xl"></i>
      <span>${message}</span>
    `;
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
      if (toast.parentElement) {
        toast.remove();
      }
    }, 5000);
  }

  showError(message) {
    const toast = document.createElement('div');
    toast.className = 'fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 flex items-center gap-3';
    toast.innerHTML = `
      <i class="ri-error-warning-line text-xl"></i>
      <span>${message}</span>
    `;
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
      if (toast.parentElement) {
        toast.remove();
      }
    }, 5000);
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  getUrlParams() {
    const urlParams = new URLSearchParams(window.location.search);
    return {
      demo: urlParams.get('demo') === 'true',
      role: urlParams.get('role'),
      magic_link: urlParams.get('magic_link') === 'true'
    };
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL
  handleUrlParams() {
    const params = this.getUrlParams();
    
    if (params.demo) {
      this.showDemoModeIndicator();
    }
    
    if (params.magic_link) {
      this.showMagicLinkSuccess();
    }
  }

  showDemoModeIndicator() {
    const indicator = document.createElement('div');
    indicator.className = 'fixed top-4 left-4 bg-blue-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 flex items-center gap-2';
    indicator.innerHTML = `
      <i class="ri-test-tube-line"></i>
      <span>Demo —Ä–µ–∂–∏–º</span>
    `;
    
    document.body.appendChild(indicator);
    
    // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (indicator.parentElement) {
        indicator.remove();
      }
    }, 5000);
  }

  showMagicLinkSuccess() {
    const toast = document.createElement('div');
    toast.className = 'fixed top-4 right-4 bg-success text-white px-6 py-3 rounded-lg shadow-lg z-50 flex items-center gap-3';
    toast.innerHTML = `
      <i class="ri-check-circle-line text-xl"></i>
      <span>–í—Ö–æ–¥ —á–µ—Ä–µ–∑ Magic-Link –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!</span>
    `;
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
      if (toast.parentElement) {
        toast.remove();
      }
    }, 5000);
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
window.requireRole = (role, redirectUrl) => {
  if (window.roleMiddleware) {
    return window.roleMiddleware.requireRole(role, redirectUrl);
  }
  return false;
};

window.hasRole = (role) => {
  if (window.roleMiddleware) {
    return window.roleMiddleware.hasRole(role);
  }
  return false;
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.roleMiddleware = new RoleMiddleware(); 