// üíº –ú–æ–¥—É–ª—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π WorkInCZ
class JobPostingManager {
  constructor() {
    this.db = null;
    this.auth = null;
    this.currentUser = null;
    this.jobData = {};
    this.step = 1;
    this.maxSteps = 4;
    this.pricing = {
      basic: {
        jobsPerMonth: 1,
        featured: false,
        urgent: false,
        analytics: false
      },
      premium: {
        jobsPerMonth: 5,
        freelanceOrders: 10,
        featured: true,
        urgent: true,
        analytics: true,
        topPlacement: true
      },
      addons: {
        urgent: 500, // CZK
        featured: 300, // CZK
        topPlacement: 200 // CZK/week
      }
    };
    
    this.init();
  }

  async init() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
    if (typeof firebase !== 'undefined') {
      this.db = firebase.firestore();
      this.auth = firebase.auth();
      
      this.auth.onAuthStateChanged((user) => {
        this.currentUser = user;
        if (user) {
          this.loadEmployerData();
        }
      });
    }
    
    this.setupEventListeners();
    this.createJobPostingModal();
  }

  setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∞ "–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é"
    document.addEventListener('click', (e) => {
      if (e.target.matches('#post-job-btn, .post-job-btn')) {
        e.preventDefault();
        this.showJobPostingModal();
      }

      if (e.target.matches('#next-job-step')) {
        this.nextStep();
      }

      if (e.target.matches('#prev-job-step')) {
        this.prevStep();
      }

      if (e.target.matches('#publish-job-btn')) {
        this.publishJob();
      }

      if (e.target.matches('#preview-job-btn')) {
        this.previewJob();
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥
    document.addEventListener('change', (e) => {
      if (e.target.matches('.addon-checkbox')) {
        this.updatePricing();
      }
    });
  }

  createJobPostingModal() {
    const modal = document.createElement('div');
    modal.id = 'jobPostingModal';
    modal.className = 'fixed inset-0 bg-black/50 flex items-center justify-center hidden z-50 p-4';
    modal.innerHTML = `
      <div class="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div class="p-6">
          <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å -->
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold">–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é</h2>
            <button id="close-job-modal" class="text-gray-400 hover:text-gray-600">
              <i class="ri-close-line text-2xl"></i>
            </button>
          </div>

          <!-- –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä -->
          <div class="mb-8">
            <div class="flex justify-between items-center mb-2">
              <span class="text-sm font-medium text-gray-700">–®–∞–≥ <span id="current-job-step">1</span> –∏–∑ ${this.maxSteps}</span>
              <span class="text-sm text-gray-500">–°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏</span>
            </div>
            <div class="w-full bg-gray-200 rounded-full h-2">
              <div id="job-progress-bar" class="bg-primary h-2 rounded-full transition-all duration-300" style="width: 25%"></div>
            </div>
          </div>

          <!-- –®–∞–≥ 1: –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
          <div id="job-step-1" class="job-step">
            <h3 class="text-xl font-semibold mb-6">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏</h3>
            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ *</label>
                <input type="text" id="job-title" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary/20 focus:border-primary" 
                       placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –†–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–π –Ω–∞ —Å—Ç—Ä–æ–π–∫—É" required>
                <div class="text-xs text-gray-500 mt-1">–ß–µ—Ç–∫–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –±–æ–ª—å—à–µ –æ—Ç–∫–ª–∏–∫–æ–≤</div>
              </div>

              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">–ö–∞—Ç–µ–≥–æ—Ä–∏—è *</label>
                  <select id="job-category" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary/20 focus:border-primary" required>
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                    <option value="construction">–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Ä–µ–º–æ–Ω—Ç</option>
                    <option value="warehouse">–°–∫–ª–∞–¥—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã</option>
                    <option value="cleaning">–ö–ª–∏–Ω–∏–Ω–≥ –∏ —É–±–æ—Ä–∫–∞</option>
                    <option value="transport">–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∞</option>
                    <option value="it">IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</option>
                    <option value="healthcare">–ú–µ–¥–∏—Ü–∏–Ω–∞</option>
                    <option value="education">–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</option>
                    <option value="hospitality">–¢—É—Ä–∏–∑–º –∏ –≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–æ</option>
                    <option value="manufacturing">–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ</option>
                    <option value="other">–î—Ä—É–≥–æ–µ</option>
                  </select>
                </div>

                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ *</label>
                  <select id="job-work-type" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary/20 focus:border-primary" required>
                    <option value="full-time">–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å</option>
                    <option value="part-time">–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å</option>
                    <option value="contract">–ö–æ–Ω—Ç—Ä–∞–∫—Ç</option>
                    <option value="freelance">–§—Ä–∏–ª–∞–Ω—Å</option>
                  </select>
                </div>
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ *</label>
                <textarea id="job-description" rows="6" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary/20 focus:border-primary" 
                          placeholder="–û–ø–∏—à–∏—Ç–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã..." required></textarea>
                <div class="text-xs text-gray-500 mt-1">–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤</div>
              </div>
            </div>
          </div>

          <!-- –®–∞–≥ 2: –õ–æ–∫–∞—Ü–∏—è –∏ —É—Å–ª–æ–≤–∏—è -->
          <div id="job-step-2" class="job-step hidden">
            <h3 class="text-xl font-semibold mb-6">–õ–æ–∫–∞—Ü–∏—è –∏ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã</h3>
            <div class="space-y-4">
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">–ì–æ—Ä–æ–¥ *</label>
                  <select id="job-city" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary/20 focus:border-primary" required>
                    <option value="Praha">–ü—Ä–∞–≥–∞</option>
                    <option value="Brno">–ë—Ä–Ω–æ</option>
                    <option value="Ostrava">–û—Å—Ç—Ä–∞–≤–∞</option>
                    <option value="Plzen">–ü–ª—å–∑–µ–Ω—å</option>
                    <option value="Liberec">–õ–∏–±–µ—Ä–µ—Ü</option>
                    <option value="ƒåesk√© Budƒõjovice">–ß–µ—Å–∫–µ-–ë—É–¥–µ—ë–≤–∏—Ü–µ</option>
                    <option value="Hradec Kr√°lov√©">–ì—Ä–∞–¥–µ—Ü-–ö—Ä–∞–ª–æ–≤–µ</option>
                    <option value="√öst√≠ nad Labem">–£—Å—Ç–∏-–Ω–∞–¥-–õ–∞–±–µ–º</option>
                    <option value="Pardubice">–ü–∞—Ä–¥—É–±–∏—Ü–µ</option>
                    <option value="other">–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥</option>
                  </select>
                </div>

                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">–ê–¥—Ä–µ—Å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                  <input type="text" id="job-address" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary/20 focus:border-primary" 
                         placeholder="–£–ª–∏—Ü–∞, –¥–æ–º">
                </div>
              </div>

              <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç (CZK)</label>
                  <input type="number" id="salary-min" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary/20 focus:border-primary" 
                         placeholder="25000">
                </div>

                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ (CZK)</label>
                  <input type="number" id="salary-max" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary/20 focus:border-primary" 
                         placeholder="45000">
                </div>

                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">–ü–µ—Ä–∏–æ–¥</label>
                  <select id="salary-period" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary/20 focus:border-primary">
                    <option value="month">–í –º–µ—Å—è—Ü</option>
                    <option value="hour">–í —á–∞—Å</option>
                  </select>
                </div>
              </div>

              <div class="space-y-3">
                <h4 class="font-medium text-gray-700">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è</h4>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                  <label class="flex items-center">
                    <input type="checkbox" id="housing-provided" class="mr-2">
                    <span class="text-sm">–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∂–∏–ª—å—ë</span>
                  </label>
                  <label class="flex items-center">
                    <input type="checkbox" id="transport-provided" class="mr-2">
                    <span class="text-sm">–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç</span>
                  </label>
                  <label class="flex items-center">
                    <input type="checkbox" id="work-permit-help" class="mr-2">
                    <span class="text-sm">–ü–æ–º–æ—â—å —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</span>
                  </label>
                  <label class="flex items-center">
                    <input type="checkbox" id="remote-work" class="mr-2">
                    <span class="text-sm">–í–æ–∑–º–æ–∂–Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞</span>
                  </label>
                </div>
              </div>
            </div>
          </div>

          <!-- –®–∞–≥ 3: –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è -->
          <div id="job-step-3" class="job-step hidden">
            <h3 class="text-xl font-semibold mb-6">–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º</h3>
            <div class="space-y-4">
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã</label>
                  <select id="required-experience" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary/20 focus:border-primary">
                    <option value="no-experience">–ë–µ–∑ –æ–ø—ã—Ç–∞</option>
                    <option value="1-year">–î–æ 1 –≥–æ–¥–∞</option>
                    <option value="1-3-years">1-3 –≥–æ–¥–∞</option>
                    <option value="3-5-years">3-5 –ª–µ—Ç</option>
                    <option value="5-plus">–ë–æ–ª–µ–µ 5 –ª–µ—Ç</option>
                  </select>
                </div>

                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</label>
                  <select id="required-education" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary/20 focus:border-primary">
                    <option value="any">–õ—é–±–æ–µ</option>
                    <option value="basic">–û—Å–Ω–æ–≤–Ω–æ–µ</option>
                    <option value="secondary">–°—Ä–µ–¥–Ω–µ–µ</option>
                    <option value="vocational">–°—Ä–µ–¥–Ω–µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ</option>
                    <option value="higher">–í—ã—Å—à–µ–µ</option>
                  </select>
                </div>
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">–ù–∞–≤—ã–∫–∏ –∏ —É–º–µ–Ω–∏—è</label>
                <textarea id="required-skills" rows="3" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary/20 focus:border-primary" 
                          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å..."></textarea>
              </div>

              <div>
                <h4 class="font-medium text-gray-700 mb-3">–ó–Ω–∞–Ω–∏–µ —è–∑—ã–∫–æ–≤</h4>
                <div id="language-requirements" class="space-y-2">
                  <div class="language-req grid grid-cols-3 gap-3">
                    <select class="language-name border border-gray-300 rounded-lg px-3 py-2">
                      <option value="cz">–ß–µ—à—Å–∫–∏–π</option>
                      <option value="en">–ê–Ω–≥–ª–∏–π—Å–∫–∏–π</option>
                      <option value="de">–ù–µ–º–µ—Ü–∫–∏–π</option>
                      <option value="ru">–†—É—Å—Å–∫–∏–π</option>
                      <option value="sk">–°–ª–æ–≤–∞—Ü–∫–∏–π</option>
                    </select>
                    <select class="language-level border border-gray-300 rounded-lg px-3 py-2">
                      <option value="basic">–ë–∞–∑–æ–≤—ã–π</option>
                      <option value="intermediate">–°—Ä–µ–¥–Ω–∏–π</option>
                      <option value="advanced">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π</option>
                      <option value="native">–†–æ–¥–Ω–æ–π</option>
                    </select>
                    <label class="flex items-center">
                      <input type="checkbox" class="language-required mr-2">
                      <span class="text-sm">–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ</span>
                    </label>
                  </div>
                </div>
                <button type="button" id="add-language-req" class="text-primary hover:underline text-sm mt-2">+ –î–æ–±–∞–≤–∏—Ç—å —è–∑—ã–∫</button>
              </div>

              <div>
                <label class="flex items-center">
                  <input type="checkbox" id="work-permit-required" class="mr-2">
                  <span class="text-sm">–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç—É –≤ –ß–†</span>
                </label>
              </div>
            </div>
          </div>

          <!-- –®–∞–≥ 4: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ -->
          <div id="job-step-4" class="job-step hidden">
            <h3 class="text-xl font-semibold mb-6">–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏</h3>
            
            <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–µ -->
            <div id="subscription-info" class="mb-6 p-4 bg-gray-50 rounded-lg">
              <div class="flex justify-between items-center">
                <div>
                  <h4 class="font-medium">–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞</h4>
                  <p id="current-subscription" class="text-sm text-gray-600"></p>
                </div>
                <div class="text-right">
                  <div id="jobs-remaining" class="font-bold text-primary"></div>
                  <div class="text-xs text-gray-500">–≤–∞–∫–∞–Ω—Å–∏–π –æ—Å—Ç–∞–ª–æ—Å—å</div>
                </div>
              </div>
            </div>

            <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ -->
            <div class="space-y-4">
              <h4 class="font-medium text-gray-700">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏</h4>
              
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <label class="border border-gray-300 rounded-lg p-4 cursor-pointer hover:border-primary transition-colors">
                  <input type="checkbox" class="addon-checkbox mr-3" id="urgent-posting" data-price="500">
                  <div>
                    <div class="flex items-center justify-between">
                      <span class="font-medium">–°—Ä–æ—á–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è</span>
                      <span class="text-primary font-bold">+500 Kƒç</span>
                    </div>
                    <p class="text-sm text-gray-600 mt-1">–û—Ç–º–µ—Ç–∫–∞ "–°—Ä–æ—á–Ω–æ" –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ</p>
                  </div>
                </label>

                <label class="border border-gray-300 rounded-lg p-4 cursor-pointer hover:border-primary transition-colors">
                  <input type="checkbox" class="addon-checkbox mr-3" id="featured-posting" data-price="300">
                  <div>
                    <div class="flex items-center justify-between">
                      <span class="font-medium">–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏</span>
                      <span class="text-primary font-bold">+300 Kƒç</span>
                    </div>
                    <p class="text-sm text-gray-600 mt-1">–ü–æ–∫–∞–∑ –≤ —Ç–æ–ø–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞</p>
                  </div>
                </label>

                <label class="border border-gray-300 rounded-lg p-4 cursor-pointer hover:border-primary transition-colors">
                  <input type="checkbox" class="addon-checkbox mr-3" id="top-placement" data-price="200">
                  <div>
                    <div class="flex items-center justify-between">
                      <span class="font-medium">TOP —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ</span>
                      <span class="text-primary font-bold">+200 Kƒç/–Ω–µ–¥–µ–ª—è</span>
                    </div>
                    <p class="text-sm text-gray-600 mt-1">–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –≤ —Ç–æ–ø–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ</p>
                  </div>
                </label>

                <div class="border border-gray-300 rounded-lg p-4">
                  <div class="flex items-center justify-between mb-2">
                    <span class="font-medium">HR-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</span>
                    <span class="text-primary font-bold">1200 Kƒç</span>
                  </div>
                  <p class="text-sm text-gray-600 mb-3">–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å –≤ –ø–æ–¥–±–æ—Ä–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤</p>
                  <button class="text-primary hover:underline text-sm">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
                </div>
              </div>

              <!-- –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å -->
              <div class="bg-primary/5 rounded-lg p-4 border border-primary/20">
                <div class="flex justify-between items-center mb-2">
                  <span class="font-medium">–ë–∞–∑–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è:</span>
                  <span id="base-price">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</span>
                </div>
                <div id="addons-list" class="space-y-1 text-sm"></div>
                <div class="border-t border-primary/20 mt-3 pt-3 flex justify-between items-center">
                  <span class="font-bold text-lg">–ò—Ç–æ–≥–æ:</span>
                  <span id="total-price" class="font-bold text-lg text-primary">0 Kƒç</span>
                </div>
              </div>

              <!-- –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏</label>
                <select id="job-duration" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary/20 focus:border-primary">
                  <option value="30">30 –¥–Ω–µ–π (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ)</option>
                  <option value="60">60 –¥–Ω–µ–π (+100 Kƒç)</option>
                  <option value="90">90 –¥–Ω–µ–π (+200 Kƒç)</option>
                </select>
              </div>
            </div>
          </div>

          <!-- –ù–∞–≤–∏–≥–∞—Ü–∏—è -->
          <div class="flex justify-between mt-8 pt-6 border-t">
            <button id="prev-job-step" class="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 hidden">
              –ù–∞–∑–∞–¥
            </button>
            <div class="flex gap-3 ml-auto">
              <button id="preview-job-btn" class="px-6 py-2 border border-primary text-primary rounded-lg hover:bg-primary/5 hidden">
                –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
              </button>
              <button id="close-job-modal" class="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50">
                –û—Ç–º–µ–Ω–∞
              </button>
              <button id="next-job-step" class="px-6 py-2 bg-primary text-white rounded-lg hover:bg-primary/90">
                –î–∞–ª–µ–µ
              </button>
              <button id="publish-job-btn" class="px-6 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 hidden">
                –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é
              </button>
            </div>
          </div>
        </div>
      </div>
    `;

    document.body.appendChild(modal);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.getElementById('close-job-modal').onclick = () => {
      this.closeJobModal();
    };

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    document.getElementById('add-language-req').onclick = () => {
      this.addLanguageRequirement();
    };
  }

  showJobPostingModal() {
    if (!this.currentUser) {
      this.showLoginRequired();
      return;
    }

    if (this.currentUser.userData?.role !== 'employer') {
      this.showError('–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º');
      return;
    }

    const modal = document.getElementById('jobPostingModal');
    modal.classList.remove('hidden');
    this.step = 1;
    this.updateJobStep();
    this.loadEmployerSubscription();
  }

  closeJobModal() {
    const modal = document.getElementById('jobPostingModal');
    modal.classList.add('hidden');
    this.step = 1;
    this.jobData = {};
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    modal.querySelectorAll('input, textarea, select').forEach(field => {
      if (field.type === 'checkbox') {
        field.checked = false;
      } else {
        field.value = '';
      }
    });
  }

  nextStep() {
    if (this.validateCurrentJobStep()) {
      this.collectJobStepData();
      
      if (this.step < this.maxSteps) {
        this.step++;
        this.updateJobStep();
        this.updateJobProgressBar();
      }
    }
  }

  prevStep() {
    if (this.step > 1) {
      this.step--;
      this.updateJobStep();
      this.updateJobProgressBar();
    }
  }

  updateJobStep() {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —à–∞–≥–∏
    document.querySelectorAll('.job-step').forEach(step => {
      step.classList.add('hidden');
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
    document.getElementById(`job-step-${this.step}`).classList.remove('hidden');

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const prevBtn = document.getElementById('prev-job-step');
    const nextBtn = document.getElementById('next-job-step');
    const publishBtn = document.getElementById('publish-job-btn');
    const previewBtn = document.getElementById('preview-job-btn');

    prevBtn.classList.toggle('hidden', this.step === 1);
    nextBtn.classList.toggle('hidden', this.step === this.maxSteps);
    publishBtn.classList.toggle('hidden', this.step !== this.maxSteps);
    previewBtn.classList.toggle('hidden', this.step !== this.maxSteps);

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —à–∞–≥–∞
    document.getElementById('current-job-step').textContent = this.step;
  }

  updateJobProgressBar() {
    const progress = (this.step / this.maxSteps) * 100;
    document.getElementById('job-progress-bar').style.width = `${progress}%`;
  }

  validateCurrentJobStep() {
    const currentStepEl = document.getElementById(`job-step-${this.step}`);
    const requiredFields = currentStepEl.querySelectorAll('[required]');
    
    for (let field of requiredFields) {
      if (!field.value.trim()) {
        this.showError(`–ü–æ–ª–µ "${field.previousElementSibling?.textContent?.replace('*', '') || '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ'}" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º`);
        field.focus();
        return false;
      }
    }

    return true;
  }

  collectJobStepData() {
    if (this.step === 1) {
      this.jobData.basic = {
        title: document.getElementById('job-title').value,
        category: document.getElementById('job-category').value,
        workType: document.getElementById('job-work-type').value,
        description: document.getElementById('job-description').value
      };
    } else if (this.step === 2) {
      const salaryMin = parseInt(document.getElementById('salary-min').value) || null;
      const salaryMax = parseInt(document.getElementById('salary-max').value) || null;
      
      this.jobData.location = {
        city: document.getElementById('job-city').value,
        address: document.getElementById('job-address').value,
        remote: document.getElementById('remote-work').checked
      };

      this.jobData.salary = {
        min: salaryMin,
        max: salaryMax,
        currency: 'CZK',
        period: document.getElementById('salary-period').value,
        negotiable: !salaryMin && !salaryMax
      };

      this.jobData.benefits = {
        housingProvided: document.getElementById('housing-provided').checked,
        transportProvided: document.getElementById('transport-provided').checked,
        workPermitHelp: document.getElementById('work-permit-help').checked
      };
    } else if (this.step === 3) {
      const languages = Array.from(document.querySelectorAll('.language-req')).map(req => ({
        name: req.querySelector('.language-name').value,
        level: req.querySelector('.language-level').value,
        required: req.querySelector('.language-required').checked
      }));

      this.jobData.requirements = {
        experience: document.getElementById('required-experience').value,
        education: document.getElementById('required-education').value,
        skills: document.getElementById('required-skills').value,
        languages,
        workPermit: document.getElementById('work-permit-required').checked
      };
    }
  }

  async loadEmployerSubscription() {
    if (!this.currentUser?.userData) return;

    const subscription = this.currentUser.userData.subscription || { type: 'basic' };
    const employerProfile = this.currentUser.userData.employerProfile || {};

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    document.getElementById('current-subscription').textContent = 
      this.getSubscriptionDisplayName(subscription.type);

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤–∞–∫–∞–Ω—Å–∏–∏
    const jobsThisMonth = await this.getJobsThisMonth();
    const limits = this.pricing[subscription.type] || this.pricing.basic;
    const remaining = Math.max(0, limits.jobsPerMonth - jobsThisMonth);

    document.getElementById('jobs-remaining').textContent = 
      limits.jobsPerMonth === Infinity ? '‚àû' : remaining;

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    if (remaining > 0 || limits.jobsPerMonth === Infinity) {
      document.getElementById('base-price').textContent = '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ';
    } else {
      document.getElementById('base-price').textContent = '299 Kƒç (–ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω)';
    }

    this.updatePricing();
  }

  async getJobsThisMonth() {
    try {
      const startOfMonth = new Date();
      startOfMonth.setDate(1);
      startOfMonth.setHours(0, 0, 0, 0);

      const jobs = await this.db.collection('jobs')
        .where('employerId', '==', this.currentUser.uid)
        .where('createdAt', '>=', startOfMonth)
        .get();

      return jobs.size;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–π:', error);
      return 0;
    }
  }

  updatePricing() {
    const addons = document.querySelectorAll('.addon-checkbox:checked');
    const addonsList = document.getElementById('addons-list');
    let totalPrice = 0;

    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π
    addonsList.innerHTML = '';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
    const basePrice = document.getElementById('base-price').textContent;
    if (basePrice.includes('299')) {
      totalPrice += 299;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π
    addons.forEach(addon => {
      const price = parseInt(addon.dataset.price);
      const name = addon.parentElement.querySelector('.font-medium').textContent;
      
      totalPrice += price;
      
      const addonItem = document.createElement('div');
      addonItem.className = 'flex justify-between';
      addonItem.innerHTML = `
        <span>${name}:</span>
        <span>+${price} Kƒç</span>
      `;
      addonsList.appendChild(addonItem);
    });

    document.getElementById('total-price').textContent = `${totalPrice} Kƒç`;
  }

  addLanguageRequirement() {
    const container = document.getElementById('language-requirements');
    const langReq = document.createElement('div');
    langReq.className = 'language-req grid grid-cols-3 gap-3';
    langReq.innerHTML = `
      <select class="language-name border border-gray-300 rounded-lg px-3 py-2">
        <option value="cz">–ß–µ—à—Å–∫–∏–π</option>
        <option value="en">–ê–Ω–≥–ª–∏–π—Å–∫–∏–π</option>
        <option value="de">–ù–µ–º–µ—Ü–∫–∏–π</option>
        <option value="ru">–†—É—Å—Å–∫–∏–π</option>
        <option value="sk">–°–ª–æ–≤–∞—Ü–∫–∏–π</option>
      </select>
      <select class="language-level border border-gray-300 rounded-lg px-3 py-2">
        <option value="basic">–ë–∞–∑–æ–≤—ã–π</option>
        <option value="intermediate">–°—Ä–µ–¥–Ω–∏–π</option>
        <option value="advanced">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π</option>
        <option value="native">–†–æ–¥–Ω–æ–π</option>
      </select>
      <label class="flex items-center">
        <input type="checkbox" class="language-required mr-2">
        <span class="text-sm">–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ</span>
      </label>
    `;
    container.appendChild(langReq);
  }

  async publishJob() {
    if (!this.validateCurrentJobStep()) return;
    
    this.collectJobStepData();

    try {
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
      const jobData = {
        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        title: this.jobData.basic.title,
        description: this.jobData.basic.description,
        category: this.jobData.basic.category,
        subcategory: this.getSubcategory(this.jobData.basic.category),
        workType: this.jobData.basic.workType,

        // –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å
        employerId: this.currentUser.uid,
        companyName: this.currentUser.userData.employerProfile?.companyName || '–ö–æ–º–ø–∞–Ω–∏—è',

        // –õ–æ–∫–∞—Ü–∏—è
        location: this.jobData.location,

        // –ó–∞—Ä–ø–ª–∞—Ç–∞
        salary: this.jobData.salary,

        // –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è
        requirements: this.jobData.requirements,

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        housingProvided: this.jobData.benefits?.housingProvided || false,
        transportProvided: this.jobData.benefits?.transportProvided || false,
        workPermitHelp: this.jobData.benefits?.workPermitHelp || false,

        // –°—Ç–∞—Ç—É—Å –∏ –≤–∏–¥–∏–º–æ—Å—Ç—å
        status: 'active',
        visibility: 'public', // 70% public, 30% vip_only (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–∑–∂–µ)
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
        urgent: document.getElementById('urgent-posting')?.checked || false,
        featured: document.getElementById('featured-posting')?.checked || false,
        topPlacement: document.getElementById('top-placement')?.checked || false,

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        applications: { count: 0, limit: 50 },
        views: 0,
        clicks: 0,

        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        createdAt: firebase.firestore.FieldValue.serverTimestamp(),
        updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
        expiresAt: new Date(Date.now() + (30 * 24 * 60 * 60 * 1000)) // 30 –¥–Ω–µ–π
      };

      // –°–æ–∑–¥–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
      const jobRef = await this.db.collection('jobs').add(jobData);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
      const totalPrice = parseInt(document.getElementById('total-price').textContent.replace(/[^\d]/g, ''));
      if (totalPrice > 0) {
        await this.processPayment(jobRef.id, totalPrice);
      }

      this.showSuccess('–í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!');
      this.closeJobModal();

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏:', error);
      this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é');
    }
  }

  async processPayment(jobId, amount) {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    const paymentData = {
      userId: this.currentUser.uid,
      type: 'job_posting',
      entityId: jobId,
      amount,
      currency: 'CZK',
      status: 'pending',
      description: `–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏: ${this.jobData.basic.title}`,
      createdAt: firebase.firestore.FieldValue.serverTimestamp()
    };

    await this.db.collection('payments').add(paymentData);
  }

  getSubcategory(category) {
    const subcategories = {
      construction: 'general',
      warehouse: 'logistics',
      cleaning: 'services',
      transport: 'logistics',
      it: 'development',
      healthcare: 'medical',
      education: 'teaching',
      hospitality: 'service',
      manufacturing: 'production'
    };
    return subcategories[category] || 'other';
  }

  previewJob() {
    this.collectJobStepData();
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    const preview = `
      <h3>${this.jobData.basic.title}</h3>
      <p><strong>–ö–æ–º–ø–∞–Ω–∏—è:</strong> ${this.currentUser.userData.employerProfile?.companyName || '–í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è'}</p>
      <p><strong>–õ–æ–∫–∞—Ü–∏—è:</strong> ${this.jobData.location?.city}</p>
      <p><strong>–¢–∏–ø:</strong> ${this.formatWorkType(this.jobData.basic.workType)}</p>
      <p><strong>–ó–∞—Ä–ø–ª–∞—Ç–∞:</strong> ${this.formatSalary(this.jobData.salary)}</p>
      <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${this.jobData.basic.description}</p>
    `;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    alert('–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n' + preview.replace(/<[^>]*>/g, ''));
  }

  async loadEmployerData() {
    if (!this.currentUser) return;
    
    try {
      const userDoc = await this.db.collection('users').doc(this.currentUser.uid).get();
      if (userDoc.exists) {
        this.currentUser.userData = userDoc.data();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è:', error);
    }
  }

  formatWorkType(workType) {
    const types = {
      'full-time': '–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å',
      'part-time': '–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å',
      'contract': '–ö–æ–Ω—Ç—Ä–∞–∫—Ç',
      'freelance': '–§—Ä–∏–ª–∞–Ω—Å'
    };
    return types[workType] || workType;
  }

  formatSalary(salary) {
    if (!salary || (!salary.min && !salary.max)) return '–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏';
    
    const { min, max, currency = 'CZK', period = 'month' } = salary;
    const periodText = period === 'hour' ? '/—á–∞—Å' : '/–º–µ—Å—è—Ü';
    
    if (min && max) {
      return `${min.toLocaleString()} - ${max.toLocaleString()} ${currency}${periodText}`;
    } else if (min) {
      return `–æ—Ç ${min.toLocaleString()} ${currency}${periodText}`;
    } else if (max) {
      return `–¥–æ ${max.toLocaleString()} ${currency}${periodText}`;
    }
    
    return '–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏';
  }

  getSubscriptionDisplayName(type) {
    const names = {
      basic: '–ë–∞–∑–æ–≤–∞—è (1 –≤–∞–∫–∞–Ω—Å–∏—è/–º–µ—Å—è—Ü)',
      premium: '–ü—Ä–µ–º–∏—É–º (5 –≤–∞–∫–∞–Ω—Å–∏–π + 10 —Ñ—Ä–∏–ª–∞–Ω—Å)'
    };
    return names[type] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }

  showLoginRequired() {
    const modal = document.getElementById('authModal') || document.getElementById('modal');
    if (modal) {
      modal.style.display = 'flex';
    }
  }

  showSuccess(message) {
    window.showToast(message, 'success');
  }

  showError(message) {
    window.showToast(message, 'error');
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  window.jobPostingManager = new JobPostingManager();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = JobPostingManager;
} 