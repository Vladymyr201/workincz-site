/**
 * –°–∏—Å—Ç–µ–º–∞ email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏, —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è, A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
 */

class EmailMarketingSystem {
    constructor() {
        this.campaigns = new Map();
        this.templates = new Map();
        this.segments = new Map();
        this.init();
    }

    async init() {
        await this.loadTemplates();
        await this.loadSegments();
        await this.setupAutomatedCampaigns();
        this.initUI();
    }

    async loadTemplates() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º email —à–∞–±–ª–æ–Ω—ã
        this.templates.set('welcome', {
            subject: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WorkInCZ! üöÄ',
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <h2 style="color: #2563eb;">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WorkInCZ!</h2>
                    <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {{userName}}!</p>
                    <p>–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã –≤ –ß–µ—Ö–∏–∏.</p>
                    
                    <div style="background: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0;">
                        <h3>–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:</h3>
                        <ul>
                            <li>–ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç –ø—Ä—è–º—ã—Ö —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π</li>
                            <li>–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–∞–¥—Ä–æ–≤—ã–º –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞–º</li>
                            <li>–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</li>
                            <li>–û–±—â–∞—Ç—å—Å—è —Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º–∏ –≤ —á–∞—Ç–µ</li>
                        </ul>
                    </div>
                    
                    <a href="{{dashboardUrl}}" style="background: #2563eb; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">
                        –ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
                    </a>
                    
                    <p style="margin-top: 30px; font-size: 14px; color: #6b7280;">
                        –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ support@workincz.com
                    </p>
                </div>
            `
        });

        this.templates.set('agency_welcome', {
            subject: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WorkInCZ –¥–ª—è –∞–≥–µ–Ω—Ç—Å—Ç–≤! üíº',
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <h2 style="color: #059669;">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WorkInCZ!</h2>
                    <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {{agencyName}}!</p>
                    <p>–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—à–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ –≤ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.</p>
                    
                    <div style="background: #f0fdf4; padding: 20px; border-radius: 8px; margin: 20px 0;">
                        <h3>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–≥–µ–Ω—Ç—Å—Ç–≤:</h3>
                        <ul>
                            <li>–ü–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏ –æ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π</li>
                            <li>–£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏ –∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏</li>
                            <li>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —É—Å–ø–µ—à–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è—Ö</li>
                            <li>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã</li>
                        </ul>
                    </div>
                    
                    <a href="{{agencyDashboardUrl}}" style="background: #059669; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">
                        –û—Ç–∫—Ä—ã—Ç—å –∞–≥–µ–Ω—Ç—Å–∫–∏–π –∫–∞–±–∏–Ω–µ—Ç
                    </a>
                </div>
            `
        });

        this.templates.set('job_alert', {
            subject: '–ù–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –≤–∞—Å! üî•',
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <h2 style="color: #dc2626;">–ù–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏</h2>
                    <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {{userName}}!</p>
                    <p>–ú—ã –Ω–∞—à–ª–∏ –¥–ª—è –≤–∞—Å {{jobCount}} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:</p>
                    
                    {{#each jobs}}
                    <div style="border: 1px solid #e5e7eb; padding: 15px; margin: 10px 0; border-radius: 6px;">
                        <h4>{{title}}</h4>
                        <p><strong>{{company}}</strong> - {{location}}</p>
                        <p>{{salary}}</p>
                        <a href="{{jobUrl}}" style="color: #2563eb;">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
                    </div>
                    {{/each}}
                    
                    <a href="{{jobsUrl}}" style="background: #dc2626; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">
                        –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏
                    </a>
                </div>
            `
        });

        this.templates.set('inactive_reminder', {
            subject: '–ú—ã —Å–∫—É—á–∞–µ–º –ø–æ –≤–∞–º! üòä',
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <h2 style="color: #7c3aed;">–ú—ã —Å–∫—É—á–∞–µ–º –ø–æ –≤–∞–º!</h2>
                    <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {{userName}}!</p>
                    <p>–í—ã –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–∏ –∫ –Ω–∞–º —É–∂–µ {{daysInactive}} –¥–Ω–µ–π. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ?</p>
                    
                    <div style="background: #faf5ff; padding: 20px; border-radius: 8px; margin: 20px 0;">
                        <h3>–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:</h3>
                        <ul>
                            <li>{{newJobsCount}} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π</li>
                            <li>{{newAgenciesCount}} –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤</li>
                            <li>–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã</li>
                        </ul>
                    </div>
                    
                    <a href="{{dashboardUrl}}" style="background: #7c3aed; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">
                        –ó–∞–π—Ç–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç
                    </a>
                </div>
            `
        });
    }

    async loadSegments() {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        this.segments.set('new_users', {
            name: '–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            query: 'createdAt >= now() - 7d'
        });

        this.segments.set('inactive_users', {
            name: '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            query: 'lastLoginAt <= now() - 30d'
        });

        this.segments.set('jobseekers', {
            name: '–ò—â—É—â–∏–µ —Ä–∞–±–æ—Ç—É',
            query: 'role == "jobseeker"'
        });

        this.segments.set('agencies', {
            name: '–ö–∞–¥—Ä–æ–≤—ã–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞',
            query: 'role == "agency"'
        });

        this.segments.set('premium_users', {
            name: '–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            query: 'subscription.status == "active"'
        });
    }

    async setupAutomatedCampaigns() {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏
        this.campaigns.set('welcome_series', {
            name: '–°–µ—Ä–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º',
            trigger: 'user_registration',
            emails: [
                { delay: 0, template: 'welcome' },
                { delay: 1, template: 'getting_started' },
                { delay: 3, template: 'first_jobs' }
            ]
        });

        this.campaigns.set('inactivity_reminder', {
            name: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º',
            trigger: 'user_inactive_30d',
            emails: [
                { delay: 0, template: 'inactive_reminder' },
                { delay: 7, template: 'inactive_reminder_2' }
            ]
        });

        this.campaigns.set('job_alerts', {
            name: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö',
            trigger: 'new_jobs_matching',
            emails: [
                { delay: 0, template: 'job_alert' }
            ]
        });
    }

    initUI() {
        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–º
        this.createMarketingDashboard();
    }

    createMarketingDashboard() {
        const dashboard = document.createElement('div');
        dashboard.id = 'emailMarketingDashboard';
        dashboard.className = 'card mt-4';
        dashboard.innerHTML = `
            <div class="card-header">
                <h5><i class="fas fa-envelope"></i> Email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π</h6>
                        <div class="d-flex justify-content-between mb-2">
                            <span>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è:</span>
                            <span id="emailsSentToday">0</span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>–û—Ç–∫—Ä—ã—Ç–∏–π:</span>
                            <span id="emailOpens">0%</span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>–ö–ª–∏–∫–æ–≤:</span>
                            <span id="emailClicks">0%</span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h6>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h6>
                        <button class="btn btn-primary btn-sm mb-2 w-100" onclick="emailMarketing.createCampaign()">
                            <i class="fas fa-plus"></i> –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é
                        </button>
                        <button class="btn btn-outline-primary btn-sm mb-2 w-100" onclick="emailMarketing.sendTestEmail()">
                            <i class="fas fa-paper-plane"></i> –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ
                        </button>
                        <button class="btn btn-outline-info btn-sm w-100" onclick="emailMarketing.showAnalytics()">
                            <i class="fas fa-chart-bar"></i> –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
                        </button>
                    </div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ dashboard –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const dashboardContainer = document.querySelector('#dashboardContent') || 
                                  document.querySelector('.dashboard-content');
        if (dashboardContainer) {
            dashboardContainer.appendChild(dashboard);
        }
    }

    async sendEmail(userId, templateName, data = {}) {
        try {
            const template = this.templates.get(templateName);
            if (!template) {
                throw new Error(`–®–∞–±–ª–æ–Ω ${templateName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userDoc = await firebase.firestore().collection('users').doc(userId).get();
            if (!userDoc.exists) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            const userData = userDoc.data();
            const emailData = {
                ...data,
                userName: userData.name || userData.email,
                userEmail: userData.email,
                dashboardUrl: `${window.location.origin}/dashboard`,
                agencyDashboardUrl: `${window.location.origin}/agency-dashboard`,
                jobsUrl: `${window.location.origin}/jobs`
            };

            // –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω
            const renderedSubject = this.renderTemplate(template.subject, emailData);
            const renderedHtml = this.renderTemplate(template.html, emailData);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —á–µ—Ä–µ–∑ Firebase Functions
            const sendEmailFunction = firebase.functions().httpsCallable('sendEmail');
            await sendEmailFunction({
                to: userData.email,
                subject: renderedSubject,
                html: renderedHtml,
                userId: userId,
                template: templateName
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ
            await firebase.firestore().collection('emailLogs').add({
                userId: userId,
                template: templateName,
                subject: renderedSubject,
                sentAt: firebase.firestore.FieldValue.serverTimestamp(),
                status: 'sent'
            });

            console.log(`Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É
            await firebase.firestore().collection('emailLogs').add({
                userId: userId,
                template: templateName,
                error: error.message,
                sentAt: firebase.firestore.FieldValue.serverTimestamp(),
                status: 'error'
            });
            
            return false;
        }
    }

    renderTemplate(template, data) {
        // –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ —Å –∑–∞–º–µ–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        let rendered = template;
        
        // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ {{variable}}
        Object.keys(data).forEach(key => {
            const regex = new RegExp(`{{${key}}}`, 'g');
            rendered = rendered.replace(regex, data[key] || '');
        });

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–∏–∫–ª—ã {{#each items}}...{{/each}}
        const eachRegex = /{{#each\s+(\w+)}}([\s\S]*?){{\/each}}/g;
        rendered = rendered.replace(eachRegex, (match, arrayName, template) => {
            const array = data[arrayName];
            if (!Array.isArray(array)) return '';
            
            return array.map(item => {
                let itemTemplate = template;
                Object.keys(item).forEach(key => {
                    const regex = new RegExp(`{{${key}}}`, 'g');
                    itemTemplate = itemTemplate.replace(regex, item[key] || '');
                });
                return itemTemplate;
            }).join('');
        });

        return rendered;
    }

    async sendBulkEmail(segmentId, templateName, data = {}) {
        try {
            const segment = this.segments.get(segmentId);
            if (!segment) {
                throw new Error(`–°–µ–≥–º–µ–Ω—Ç ${segmentId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–º–µ–Ω—Ç–∞
            const users = await this.getUsersBySegment(segmentId);
            
            console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º email ${templateName} –¥–ª—è ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            const results = await Promise.allSettled(
                users.map(user => this.sendEmail(user.id, templateName, data))
            );

            const successful = results.filter(r => r.status === 'fulfilled' && r.value).length;
            const failed = results.length - successful;

            console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: ${successful}, –û—à–∏–±–æ–∫: ${failed}`);

            return { successful, failed, total: users.length };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
            throw error;
        }
    }

    async getUsersBySegment(segmentId) {
        const segment = this.segments.get(segmentId);
        if (!segment) return [];

        try {
            let query = firebase.firestore().collection('users');
            
            // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è)
            switch (segmentId) {
                case 'new_users':
                    const weekAgo = new Date();
                    weekAgo.setDate(weekAgo.getDate() - 7);
                    query = query.where('createdAt', '>=', weekAgo);
                    break;
                case 'inactive_users':
                    const monthAgo = new Date();
                    monthAgo.setDate(monthAgo.getDate() - 30);
                    query = query.where('lastLoginAt', '<=', monthAgo);
                    break;
                case 'jobseekers':
                    query = query.where('role', '==', 'jobseeker');
                    break;
                case 'agencies':
                    query = query.where('role', '==', 'agency');
                    break;
                case 'premium_users':
                    query = query.where('subscription.status', '==', 'active');
                    break;
            }

            const snapshot = await query.limit(1000).get();
            return snapshot.docs.map(doc => ({
                id: doc.id,
                ...doc.data()
            }));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–º–µ–Ω—Ç–∞:', error);
            return [];
        }
    }

    async createCampaign() {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏
        const modal = document.createElement('div');
        modal.className = 'modal fade';
        modal.id = 'createCampaignModal';
        modal.innerHTML = `
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">–°–æ–∑–¥–∞—Ç—å email-–∫–∞–º–ø–∞–Ω–∏—é</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="campaignForm">
                            <div class="mb-3">
                                <label class="form-label">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏</label>
                                <input type="text" class="form-control" name="name" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">–°–µ–≥–º–µ–Ω—Ç</label>
                                <select class="form-select" name="segment" required>
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç</option>
                                    ${Array.from(this.segments.entries()).map(([id, segment]) => 
                                        `<option value="${id}">${segment.name}</option>`
                                    ).join('')}
                                </select>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">–®–∞–±–ª–æ–Ω</label>
                                <select class="form-select" name="template" required>
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω</option>
                                    ${Array.from(this.templates.entries()).map(([id, template]) => 
                                        `<option value="${id}">${template.subject}</option>`
                                    ).join('')}
                                </select>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (JSON)</label>
                                <textarea class="form-control" name="data" rows="3" placeholder='{"customField": "value"}'></textarea>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–û—Ç–º–µ–Ω–∞</button>
                        <button type="button" class="btn btn-primary" onclick="emailMarketing.saveCampaign()">–°–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
        const bsModal = new bootstrap.Modal(modal);
        bsModal.show();
    }

    async saveCampaign() {
        const form = document.getElementById('campaignForm');
        const formData = new FormData(form);
        
        const campaignData = {
            name: formData.get('name'),
            segment: formData.get('segment'),
            template: formData.get('template'),
            data: formData.get('data') ? JSON.parse(formData.get('data')) : {},
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            status: 'sending'
        };

        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–º–ø–∞–Ω–∏—é
            const campaignRef = await firebase.firestore().collection('emailCampaigns').add(campaignData);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
            const result = await this.sendBulkEmail(campaignData.segment, campaignData.template, campaignData.data);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–º–ø–∞–Ω–∏–∏
            await campaignRef.update({
                status: 'completed',
                results: result
            });

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            bootstrap.Modal.getInstance(document.getElementById('createCampaignModal')).hide();
            
            this.showToast(`–ö–∞–º–ø–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: ${result.successful}, –û—à–∏–±–æ–∫: ${result.failed}`, 'success');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏:', error);
            this.showToast('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏', 'error');
        }
    }

    async sendTestEmail() {
        const currentUser = firebase.auth().currentUser;
        if (!currentUser) {
            this.showToast('–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞', 'warning');
            return;
        }

        try {
            await this.sendEmail(currentUser.uid, 'welcome', {
                customMessage: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç —Å–∏—Å—Ç–µ–º—ã email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞'
            });
            this.showToast('–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞:', error);
            this.showToast('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞', 'error');
        }
    }

    async showAnalytics() {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
        const modal = document.createElement('div');
        modal.className = 'modal fade';
        modal.id = 'emailAnalyticsModal';
        modal.innerHTML = `
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div id="emailAnalyticsContent">
                            <div class="text-center">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
        const bsModal = new bootstrap.Modal(modal);
        bsModal.show();

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        await this.loadAnalytics();
    }

    async loadAnalytics() {
        try {
            const analyticsContent = document.getElementById('emailAnalyticsContent');
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

            const logsSnapshot = await firebase.firestore().collection('emailLogs')
                .where('sentAt', '>=', thirtyDaysAgo)
                .get();

            const logs = logsSnapshot.docs.map(doc => doc.data());
            
            const totalSent = logs.length;
            const successful = logs.filter(log => log.status === 'sent').length;
            const failed = logs.filter(log => log.status === 'error').length;
            const openRate = 0.25; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏–π
            const clickRate = 0.05; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–∫–æ–≤

            analyticsContent.innerHTML = `
                <div class="row">
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h3 class="text-primary">${totalSent}</h3>
                                <p class="card-text">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h3 class="text-success">${successful}</h3>
                                <p class="card-text">–£—Å–ø–µ—à–Ω–æ</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h3 class="text-warning">${(openRate * 100).toFixed(1)}%</h3>
                                <p class="card-text">–û—Ç–∫—Ä—ã—Ç–∏–π</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h3 class="text-info">${(clickRate * 100).toFixed(1)}%</h3>
                                <p class="card-text">–ö–ª–∏–∫–æ–≤</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="mt-4">
                    <h6>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏</h6>
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                                    <th>–°–µ–≥–º–µ–Ω—Ç</th>
                                    <th>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</th>
                                    <th>–£—Å–ø–µ—à–Ω–æ</th>
                                    <th>–°—Ç–∞—Ç—É—Å</th>
                                </tr>
                            </thead>
                            <tbody id="campaignsTable">
                                <tr><td colspan="5" class="text-center">–ó–∞–≥—Ä—É–∑–∫–∞...</td></tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            `;

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π
            await this.loadCampaignsList();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
            document.getElementById('emailAnalyticsContent').innerHTML = 
                '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏</div>';
        }
    }

    async loadCampaignsList() {
        try {
            const campaignsSnapshot = await firebase.firestore().collection('emailCampaigns')
                .orderBy('createdAt', 'desc')
                .limit(10)
                .get();

            const campaignsTable = document.getElementById('campaignsTable');
            if (campaignsSnapshot.empty) {
                campaignsTable.innerHTML = '<tr><td colspan="5" class="text-center">–ö–∞–º–ø–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</td></tr>';
                return;
            }

            campaignsTable.innerHTML = campaignsSnapshot.docs.map(doc => {
                const campaign = doc.data();
                return `
                    <tr>
                        <td>${campaign.name}</td>
                        <td>${this.segments.get(campaign.segment)?.name || campaign.segment}</td>
                        <td>${campaign.results?.total || 0}</td>
                        <td>${campaign.results?.successful || 0}</td>
                        <td><span class="badge bg-${campaign.status === 'completed' ? 'success' : 'warning'}">${campaign.status}</span></td>
                    </tr>
                `;
            }).join('');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π:', error);
        }
    }

    showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `toast align-items-center text-white bg-${type} border-0`;
        toast.setAttribute('role', 'alert');
        toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">${message}</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        `;
        
        const container = document.querySelector('.toast-container') || document.body;
        container.appendChild(toast);
        
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();
        
        toast.addEventListener('hidden.bs.toast', () => {
            container.removeChild(toast);
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞
let emailMarketing;

document.addEventListener('DOMContentLoaded', () => {
    emailMarketing = new EmailMarketingSystem();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.emailMarketing = emailMarketing; 