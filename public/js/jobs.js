// üíº –ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ WorkInCZ
class JobsManager {
  constructor() {
    this.db = null;
    this.auth = null;
    this.currentUser = null;
    this.jobsCache = new Map();
    this.filters = {
      category: 'all',
      location: 'all',
      workType: 'all',
      withHousing: false,
      urgent: false,
      salaryMin: null,
      salaryMax: null
    };
    
    this.init();
  }

  async init() {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ AuthManager
    if (window.authManager) {
      await window.authManager.waitForReady();
      this.db = window.authManager.db;
      this.auth = window.authManager.auth;
      
      console.log('üî• JobsManager –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ AuthManager');
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ AuthManager
      this.unsubscribeAuth = window.authManager.subscribe((user) => {
        this.currentUser = user;
        if (user) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ AuthManager
          this.currentUser.userData = window.authManager.getUserData(user.uid);
        }
      });
    }
    
    this.setupEventListeners();
    this.loadJobs();
  }

  setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç–∫–ª–∏–∫–æ–≤
    document.addEventListener('click', (e) => {
      if (e.target.matches('.apply-btn, .apply-btn *')) {
        e.preventDefault();
        const btn = e.target.closest('.apply-btn');
        const jobId = btn.dataset.jobId;
        this.applyToJob(jobId);
      }
      
      if (e.target.matches('.save-btn, .save-btn *')) {
        e.preventDefault();
        const btn = e.target.closest('.save-btn');
        const jobId = btn.dataset.jobId;
        this.saveJob(jobId);
      }
    });

    // –§–∏–ª—å—Ç—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    document.querySelectorAll('[data-category]').forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        this.filters.category = e.target.dataset.category;
        this.loadJobs();
      });
    });
  }

  async loadJobs(limit = 20) {
    try {
      if (!this.db) {
        console.log('Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–≤–∞–∫–∞–Ω—Å–∏–∏');
        this.renderDemoJobs();
        return;
      }

      // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö where —É—Å–ª–æ–≤–∏–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
      let query = this.db.collection('jobs')
        .orderBy('createdAt', 'desc')
        .limit(limit);

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–µ–ª–∞–µ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã –≤ Firebase Console

      const snapshot = await query.get();
      const allJobs = [];
      
      snapshot.forEach(doc => {
        const job = { id: doc.id, ...doc.data() };
        allJobs.push(job);
        this.jobsCache.set(doc.id, job);
      });

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
      const filteredJobs = allJobs.filter(job => {
        // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏)
        if (job.status !== 'active') return false;
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (this.filters.category !== 'all' && job.category !== this.filters.category) {
          return false;
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
        if (this.filters.urgent && !job.urgent) {
          return false;
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –∂–∏–ª—å—é
        if (this.filters.withHousing && !job.housingProvided) {
          return false;
        }
        
        return true;
      });

      this.renderJobs(filteredJobs);
      return filteredJobs;

    } catch (error) {
      console.log('üîß Firebase –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–≤–∞–∫–∞–Ω—Å–∏–∏');
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      this.renderDemoJobs();
    }
  }

  renderDemoJobs() {
    // –î–µ–º–æ-–≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ Firebase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    const demoJobs = [
      {
        id: 'demo-1',
        title: '–†–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–π –Ω–∞ —Å—Ç—Ä–æ–π–∫—É',
        companyName: 'Stavebn√≠ firma Nov√°k',
        location: { city: '–ü—Ä–∞–≥–∞' },
        salary: { min: 140, max: 160, currency: 'CZK', period: 'hour' },
        workType: 'full-time',
        description: '–¢—Ä–µ–±—É—é—Ç—Å—è —Ä–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ –ü—Ä–∞–≥–µ. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∂–∏–ª—å—ë –∏ –ø–æ–º–æ—â—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.',
        urgent: true,
        housingProvided: true,
        requirements: { languages: [{ name: '–†—É—Å—Å–∫–∏–π' }, { name: '–ë–∞–∑–æ–≤—ã–π —á–µ—à—Å–∫–∏–π' }] }
      },
      {
        id: 'demo-2',
        title: '–û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞',
        companyName: '≈†koda Auto a.s.',
        location: { city: '–ú–ª–∞–¥–∞-–ë–æ–ª–µ—Å–ª–∞–≤' },
        salary: { min: 32000, max: 38000, currency: 'CZK', period: 'month' },
        workType: 'full-time',
        description: '–†–∞–±–æ—Ç–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ. –°–±–æ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–±—â–µ–∂–∏—Ç–∏–µ, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–æ —Ä–∞–±–æ—Ç—ã –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç.',
        urgent: true,
        housingProvided: true,
        requirements: { languages: [{ name: '–ë–∞–∑–æ–≤—ã–π —á–µ—à—Å–∫–∏–π' }] }
      },
      {
        id: 'demo-3',
        title: '–ö–ª–∞–¥–æ–≤—â–∏–∫-–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫',
        companyName: 'Alza.cz a.s.',
        location: { city: '–ü—Ä–∞–≥–∞' },
        salary: { min: 130, currency: 'CZK', period: 'hour' },
        workType: 'full-time',
        description: '–†–∞–±–æ—Ç–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞. –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å. –ë–æ–Ω—É—Å—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞.',
        urgent: true,
        housingProvided: false,
        requirements: { languages: [{ name: '–†—É—Å—Å–∫–∏–π' }, { name: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π' }] }
      }
    ];

    this.renderJobs(demoJobs);
  }

  // üü¢ –†–µ–Ω–¥–µ—Ä –≤–∞–∫–∞–Ω—Å–∏–π —Å skeleton
  renderJobs(jobs) {
    const container = document.querySelector('.jobs-container');
    if (!container) return;
    // Skeleton –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    if (!jobs) { showJobsSkeleton(container, 3); return; }
    if (jobs.length === 0) {
      container.innerHTML = `
        <div class="text-center py-12">
          <i class="ri-briefcase-line text-6xl text-gray-300 mb-4"></i>
          <h3 class="text-xl font-medium text-gray-500 mb-2">–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
          <p class="text-gray-400">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
        </div>
      `;
      return;
    }
    container.innerHTML = jobs.map(job => this.renderJobCard(job)).join('');
  }

  renderJobCard(job) {
    const hasHousing = job.housingProvided;
    const isUrgent = job.urgent;
    const isVipOnly = job.visibility === 'vip_only';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ VIP –≤–∞–∫–∞–Ω—Å–∏—è–º
    const canViewJob = !isVipOnly || (this.currentUser && this.currentUser.subscription?.type === 'vip');
    
    if (isVipOnly && !canViewJob) {
      return this.renderVipJobCard(job);
    }

    return `
      <div class="bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm hover:shadow-xl hover:-translate-y-1 transition-all duration-300 card-3d">
        <div class="p-6">
          <div class="flex justify-between items-start mb-4">
            <div class="flex-1">
              <h3 class="text-xl font-semibold mb-1">${job.title}</h3>
              <p class="text-gray-600 mb-1">${job.companyName}</p>
              <div class="flex items-center gap-2 text-sm text-gray-500">
                <i class="ri-map-pin-line"></i>
                <span>${job.location.city}</span>
              </div>
            </div>
            <div class="flex flex-col items-end gap-2">
              ${isUrgent ? `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gradient-to-r from-secondary/80 to-secondary text-white">–°—Ä–æ—á–Ω–æ</span>` : ''}
              ${hasHousing ? `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-success/10 text-success">–° –∂–∏–ª—å—ë–º</span>` : ''}
              ${isVipOnly ? `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary/10 text-primary">VIP</span>` : ''}
            </div>
          </div>
          
          <div class="mb-4">
            <div class="flex items-center gap-2 mb-2">
              <i class="ri-money-czech-koruna-circle-line text-gray-500"></i>
              <span class="font-medium">${this.formatSalary(job.salary)}</span>
            </div>
            <div class="flex items-center gap-2 mb-2">
              <i class="ri-time-line text-gray-500"></i>
              <span>${this.formatWorkType(job.workType)}</span>
            </div>
            ${job.requirements?.languages?.length ? `
              <div class="flex items-center gap-2">
                <i class="ri-translate-2 text-gray-500"></i>
                <span>${job.requirements.languages.map(lang => lang.name).join(', ')}</span>
              </div>
            ` : ''}
          </div>
          
          <p class="text-gray-600 text-sm mb-4 line-clamp-3">${job.description}</p>
          
          <div class="flex justify-between gap-2">
            <button class="apply-btn bg-primary text-white px-4 py-2 rounded-button text-sm font-medium hover:bg-primary/90 whitespace-nowrap flex items-center gap-2 button-ripple" data-job-id="${job.id}">
              <i class="ri-send-plane-line"></i>
              –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è
            </button>
            <button class="message-btn bg-green-500/10 text-green-600 border border-green-200 px-3 py-2 rounded-button text-sm font-medium hover:bg-green-500/20 whitespace-nowrap flex items-center gap-2" onclick="startChatWithUser('${job.employerId || job.companyId || 'demo-employer'}', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞–∫–∞–Ω—Å–∏—è ${job.title}', '${job.id}')" data-job-id="${job.id}">
              <i class="ri-message-3-line"></i>
              –ù–∞–ø–∏—Å–∞—Ç—å
            </button>
            <button class="save-btn bg-secondary/10 text-secondary border-none px-3 py-2 rounded-button text-sm font-medium hover:bg-secondary/20 whitespace-nowrap flex items-center gap-2" data-job-id="${job.id}">
              <i class="ri-bookmark-line"></i>
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
          </div>
        </div>
      </div>
    `;
  }

  renderVipJobCard(job) {
    return `
      <div class="bg-gradient-to-br from-primary/5 to-primary/10 border-2 border-primary/20 rounded-lg overflow-hidden shadow-sm relative">
        <div class="absolute inset-0 bg-white/80 backdrop-blur-sm flex items-center justify-center">
          <div class="text-center p-8">
            <i class="ri-vip-crown-line text-4xl text-primary mb-4"></i>
            <h3 class="text-xl font-semibold mb-2">VIP –í–∞–∫–∞–Ω—Å–∏—è</h3>
            <p class="text-gray-600 mb-4">–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω—É–∂–Ω–∞ VIP –ø–æ–¥–ø–∏—Å–∫–∞</p>
            <div class="flex gap-3">
              <button class="bg-primary text-white px-6 py-3 rounded-button font-medium hover:bg-primary/90 flex-1">
              –ü–æ–ª—É—á–∏—Ç—å VIP –∑–∞ 1 Kƒç
            </button>
              <button class="bg-green-500/10 text-green-600 border border-green-200 px-4 py-3 rounded-button font-medium hover:bg-green-500/20 flex items-center gap-2" onclick="startChatWithUser('${job.employerId || job.companyId || 'demo-employer'}', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç VIP –≤–∞–∫–∞–Ω—Å–∏—è ${job.title}', '${job.id}')">
                <i class="ri-message-3-line"></i>
                –ù–∞–ø–∏—Å–∞—Ç—å
              </button>
            </div>
          </div>
        </div>
        <div class="p-6 blur-sm">
          <div class="flex justify-between items-start mb-4">
            <div>
              <h3 class="text-xl font-semibold mb-1">${job.title}</h3>
              <p class="text-gray-600 mb-1">${job.companyName}</p>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  async applyToJob(jobId) {
    try {
      if (!this.currentUser) {
        this.showLoginModal();
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –Ω–∞ –æ—Ç–∫–ª–∏–∫–∏
      const canApply = await this.checkApplicationLimit();
      if (!canApply) {
        this.showUpgradeModal('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ç–∫–ª–∏–∫–æ–≤');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª–∏–∫–∞–ª—Å—è –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingApplication = await this.db.collection('applications')
        .where('jobId', '==', jobId)
        .where('applicantId', '==', this.currentUser.uid)
        .get();

      if (!existingApplication.empty) {
        this.showError('–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –æ—Ç–∫–ª–∏–∫
      const applicationData = {
        jobId,
        applicantId: this.currentUser.uid,
        employerId: this.jobsCache.get(jobId)?.employerId,
        status: 'pending',
        coverLetter: '', // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
        attachments: [],
        createdAt: firebase.firestore.FieldValue.serverTimestamp(),
        source: 'manual'
      };

      await this.db.collection('applications').add(applicationData);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.updateApplicationCount();

      this.showSuccess('–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–µ:', error);
      this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫');
    }
  }

  async checkApplicationLimit() {
    if (!this.currentUser) return false;

    const userDoc = await this.db.collection('users').doc(this.currentUser.uid).get();
    const userData = userDoc.data();
    
    if (!userData) return false;

    const subscription = userData.subscription || { type: 'basic' };
    const stats = userData.stats || { applicationsThisMonth: 0, applicationsLimit: 5 };

    // VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏
    if (subscription.type === 'vip' || subscription.type === 'premium') {
      return true;
    }

    // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã 5 –æ—Ç–∫–ª–∏–∫–∞–º–∏ –≤ –º–µ—Å—è—Ü
    return stats.applicationsThisMonth < stats.applicationsLimit;
  }

  async updateApplicationCount() {
    if (!this.currentUser) return;

    const userRef = this.db.collection('users').doc(this.currentUser.uid);
    await userRef.update({
      'stats.applicationsThisMonth': firebase.firestore.FieldValue.increment(1),
      'stats.lastApplicationDate': firebase.firestore.FieldValue.serverTimestamp()
    });
  }

  async saveJob(jobId) {
    if (!this.currentUser) {
      this.showLoginModal();
      return;
    }

    try {
      const userRef = this.db.collection('users').doc(this.currentUser.uid);
      await userRef.update({
        savedJobs: firebase.firestore.FieldValue.arrayUnion(jobId)
      });

      this.showSuccess('–í–∞–∫–∞–Ω—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é');
    }
  }

  formatSalary(salary) {
    if (!salary) return '–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏';
    
    const { min, max, currency = 'CZK', period = 'month' } = salary;
    const periodText = period === 'hour' ? '/—á–∞—Å' : '/–º–µ—Å—è—Ü';
    
    if (min && max) {
      return `${min.toLocaleString()} - ${max.toLocaleString()} ${currency}${periodText}`;
    } else if (min) {
      return `–æ—Ç ${min.toLocaleString()} ${currency}${periodText}`;
    } else if (max) {
      return `–¥–æ ${max.toLocaleString()} ${currency}${periodText}`;
    }
    
    return '–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏';
  }

  formatWorkType(workType) {
    const types = {
      'full-time': '–ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å',
      'part-time': '–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å',
      'contract': '–ü–æ –¥–æ–≥–æ–≤–æ—Ä—É',
      'freelance': '–§—Ä–∏–ª–∞–Ω—Å'
    };
    
    return types[workType] || workType;
  }

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ AuthManager

  showLoginModal() {
    const modal = document.getElementById('authModal');
    if (modal) {
      modal.style.display = 'flex';
    }
  }

  showUpgradeModal(message) {
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è upgrade
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black/50 flex items-center justify-center z-50';
    modal.innerHTML = `
      <div class="bg-white rounded-lg p-8 max-w-md mx-4">
        <div class="text-center">
          <i class="ri-vip-crown-line text-4xl text-primary mb-4"></i>
          <h3 class="text-xl font-semibold mb-2">–ù—É–∂–Ω–∞ VIP –ø–æ–¥–ø–∏—Å–∫–∞</h3>
          <p class="text-gray-600 mb-6">${message}</p>
          <div class="flex gap-3">
            <button class="upgrade-btn bg-primary text-white px-6 py-3 rounded-button font-medium hover:bg-primary/90 flex-1">
              –ü–æ–ª—É—á–∏—Ç—å VIP –∑–∞ 1 Kƒç
            </button>
            <button class="cancel-btn bg-gray-100 text-gray-700 px-6 py-3 rounded-button font-medium hover:bg-gray-200">
              –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        </div>
      </div>
    `;

    modal.querySelector('.cancel-btn').onclick = () => modal.remove();
    modal.querySelector('.upgrade-btn').onclick = () => {
      modal.remove();
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥–ø–∏—Å–∫–∏
      window.location.href = '#subscription';
    };

    document.body.appendChild(modal);
  }

  showSuccess(message) {
    window.showToast(message, 'success');
  }

  showError(message) {
    window.showToast(message, 'error');
  }

  // --- –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π toast ---
  // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ window.showToast(message, type) –≤–º–µ—Å—Ç–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏

  // üü¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π (–í–∞–º –º–æ–∂–µ—Ç –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è)
  showJobRecommendations() {
    const recBlock = document.getElementById('jobRecommendations');
    const recList = document.getElementById('jobRecommendationsList');
    if (!recBlock || !recList) return;

    // –ò—Å—Ç–æ—Ä–∏—è Lucky Job (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–∫–∞–∑–æ–≤)
    this._luckyJobHistory = this._luckyJobHistory || [];
    // –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
    this._appliedJobs = this._appliedJobs || [];

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    let jobs = Array.from(this.jobsCache.values());
    if (!jobs.length) {
      // –î–µ–º–æ-—Ä–µ–∂–∏–º: 3 —Å–ª—É—á–∞–π–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
      recList.innerHTML = [
        { title: '–î–µ–º–æ-–≤–∞–∫–∞–Ω—Å–∏—è A', companyName: 'DemoCo', location: { city: '–ü—Ä–∞–≥–∞' } },
        { title: '–î–µ–º–æ-–≤–∞–∫–∞–Ω—Å–∏—è B', companyName: 'DemoCo', location: { city: '–ë—Ä–Ω–æ' } },
        { title: '–î–µ–º–æ-–≤–∞–∫–∞–Ω—Å–∏—è C', companyName: 'DemoCo', location: { city: '–û—Å—Ç—Ä–∞–≤–∞' } }
      ].map(j => `<div class='border rounded p-3'><b>${j.title}</b><br><span class='text-gray-500'>${j.companyName}, ${j.location.city}</span></div>`).join('');
      recBlock.classList.remove('hidden');
      return;
    }

    // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏—Å—Ç–æ—Ä–∏–∏
    const lastJobs = this._luckyJobHistory.slice(-5).concat(this._appliedJobs);
    const cats = new Set(lastJobs.map(j => j.category).filter(Boolean));
    const locs = new Set(lastJobs.map(j => j.location?.city).filter(Boolean));
    const langs = new Set((lastJobs.flatMap(j => (j.requirements?.languages||[]).map(l => l.name))).filter(Boolean));

    // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
    let recs = jobs.filter(j =>
      (cats.size === 0 || cats.has(j.category)) ||
      (locs.size === 0 || locs.has(j.location?.city)) ||
      (langs.size === 0 || (j.requirements?.languages||[]).some(l => langs.has(l.name)))
    );
    // –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ/–æ—Ç–∫–ª–∏–∫–Ω—É—Ç—ã–µ
    const shownIds = new Set(lastJobs.map(j => j.id));
    recs = recs.filter(j => !shownIds.has(j.id));
    // –û—Å—Ç–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º 6
    recs = recs.slice(0, 6);

    if (!recs.length) {
      recBlock.classList.add('hidden');
      return;
    }
    recList.innerHTML = recs.map(j => `<div class='border rounded p-3'><b>${j.title}</b><br><span class='text-gray-500'>${j.companyName}, ${j.location?.city||''}</span></div>`).join('');
    recBlock.classList.remove('hidden');
    // –ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –æ–±—ã—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π ‚Äî AI-–ø–æ–¥–±–æ—Ä
    this.showAIJobRecommendations();
  }

  // üü¢ AI-–ø–æ–¥–±–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–π (AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏)
  async showAIJobRecommendations() {
    const aiBlock = document.getElementById('aiJobRecommendations');
    const aiList = document.getElementById('aiJobRecommendationsList');
    if (!aiBlock || !aiList) return;
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º skeleton
    showAISkeleton();
    // Firestore: user_recommendations
    if (this.db && this.currentUser) {
      try {
        const recDoc = await this.db.collection('user_recommendations').doc(this.currentUser.uid).get();
        const rec = recDoc.data();
        if (rec?.jobIds?.length) {
          // –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ id
          const jobs = [];
          for (const jobId of rec.jobIds) {
            const jobDoc = await this.db.collection('jobs').doc(jobId).get();
            if (jobDoc.exists) jobs.push(jobDoc.data());
          }
          if (jobs.length) {
            aiList.innerHTML = jobs.map(j => `<div class='border rounded p-3'><b>${j.title}</b><br><span class='text-gray-500'>${j.companyName}, ${j.location?.city||''}</span></div>`).join('');
            aiBlock.classList.remove('hidden');
            return;
          }
        }
      } catch (e) {
        if (window.Sentry) Sentry.captureException(e);
      }
    }
    // –î–µ–º–æ-—Ä–µ–∂–∏–º: 2 —Å–ª—É—á–∞–π–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    aiList.innerHTML = [
      { title: 'AI-–≤–∞–∫–∞–Ω—Å–∏—è A', companyName: 'AI-DemoCo', location: { city: '–ü—Ä–∞–≥–∞' } },
      { title: 'AI-–≤–∞–∫–∞–Ω—Å–∏—è B', companyName: 'AI-DemoCo', location: { city: '–ë—Ä–Ω–æ' } }
    ].map(j => `<div class='border rounded p-3'><b>${j.title}</b><br><span class='text-gray-500'>${j.companyName}, ${j.location.city}</span></div>`).join('');
    aiBlock.classList.remove('hidden');
  }

  // üü¢ –ü–æ–∫–∞–∑ –±–∞–Ω–Ω–µ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ Lucky Job
  showLuckyJobFeedbackBanner() {
    const banner = document.getElementById('luckyJobFeedback');
    if (banner) banner.classList.remove('hidden');
  }

  // üü¢ –°–∫—Ä—ã—Ç—å –±–∞–Ω–Ω–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
  hideLuckyJobFeedbackBanner() {
    const banner = document.getElementById('luckyJobFeedback');
    if (banner) banner.classList.add('hidden');
  }

  // üü¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –≤ Firestore
  sendLuckyJobFeedback(type, comment = '') {
    // Firestore
    if (this.db && window.firebase) {
      try {
        this.db.collection('feedback_luckyjob').add({
          type,
          comment,
          userId: this.currentUser?.uid || null,
          timestamp: window.firebase.firestore.FieldValue.serverTimestamp(),
          userAgent: navigator.userAgent
        });
      } catch (e) {
        if (window.Sentry) Sentry.captureException(e);
      }
    }
    // UX: —Å–∫—Ä—ã—Ç—å –±–∞–Ω–Ω–µ—Ä –∏ –º–æ–¥–∞–ª–∫—É, –ø–æ–∫–∞–∑–∞—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
    this.hideLuckyJobFeedbackBanner();
    document.getElementById('luckyJobFeedbackModal')?.classList.add('hidden');
    alert('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!');
  }

  // üü¢ Lucky Job: –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é
  showLuckyJob() {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
    let jobs = Array.from(this.jobsCache.values());
    if (!jobs.length) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∫—ç—à–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∫ –≤ renderDemoJobs)
      jobs = [
        {
          id: 'demo-1',
          title: '–†–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–π –Ω–∞ —Å—Ç—Ä–æ–π–∫—É',
          companyName: 'Stavebn√≠ firma Nov√°k',
          location: { city: '–ü—Ä–∞–≥–∞' },
          salary: { min: 140, max: 160, currency: 'CZK', period: 'hour' },
          workType: 'full-time',
          description: '–¢—Ä–µ–±—É—é—Ç—Å—è —Ä–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ –ü—Ä–∞–≥–µ. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∂–∏–ª—å—ë –∏ –ø–æ–º–æ—â—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.',
          urgent: true,
          housingProvided: true,
          requirements: { languages: [{ name: '–†—É—Å—Å–∫–∏–π' }, { name: '–ë–∞–∑–æ–≤—ã–π —á–µ—à—Å–∫–∏–π' }] },
          status: 'active',
          visibility: 'public',
        },
        // ... –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –¥–µ–º–æ-–≤–∞–∫–∞–Ω—Å–∏–∏ ...
      ];
    }
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –ø—É–±–ª–∏—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    jobs = jobs.filter(j => j.status === 'active' && (j.visibility === 'public' || !j.visibility));
    if (!jobs.length) {
      this.showError('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Ä–∞–Ω–¥–æ–º–∞');
      return;
    }
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é
    const luckyJob = jobs[Math.floor(Math.random() * jobs.length)];
    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–∫–∞–∑–∞
    this.logLuckyJobEvent('show', luckyJob);
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    this._luckyJobHistory = this._luckyJobHistory || [];
    this._luckyJobHistory.push(luckyJob);
    // –ü–æ—Å–ª–µ 3+ –Ω–∞–∂–∞—Ç–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (this._luckyJobHistory.length >= 3) this.showJobRecommendations();
    // –ü–æ—Å–ª–µ 5+ –Ω–∞–∂–∞—Ç–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–æ–¥–∏–Ω —Ä–∞–∑)
    if (this._luckyJobHistory.length === 5) this.showLuckyJobFeedbackBanner();
    this.renderLuckyJobModal(luckyJob);
  }

  // üü¢ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å Lucky Job (–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ)
  renderLuckyJobModal(job) {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    document.getElementById('luckyJobModal')?.remove();
    // –§–æ—Ä–º–∏—Ä—É–µ–º share-—Å—Å—ã–ª–∫—É
    const shareUrl = window.location.origin + '/?job=' + encodeURIComponent(job.id);
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.id = 'luckyJobModal';
    modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40';
    modal.innerHTML = `
      <div class="bg-white rounded-lg shadow-lg p-6 max-w-md w-full relative animate-fade-in">
        <button aria-label="–ó–∞–∫—Ä—ã—Ç—å" tabIndex="0" class="absolute top-2 right-2 text-gray-400 hover:text-red-500 text-2xl" id="closeLuckyJobModal">&times;</button>
        <div class="flex items-center gap-2 mb-2">
          <i class="ri-dice-5-line text-2xl text-primary"></i>
          <span class="font-bold text-lg">–ú–Ω–µ –ø–æ–≤–µ–∑–µ—Ç!</span>
        </div>
        <div class="mb-2 font-semibold text-primary">${job.title}</div>
        <div class="mb-1 text-gray-700">${job.companyName} ‚Äî ${job.location?.city || ''}</div>
        <div class="mb-2 text-sm text-gray-500">${job.description || ''}</div>
        <div class="mb-2 text-sm">üí∏ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> ${this.formatSalary(job.salary)}</div>
        <div class="flex gap-2 mt-4">
          <button class="apply-btn px-4 py-2 bg-success text-white rounded focus:outline-none" data-job-id="${job.id}" aria-label="–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è" tabIndex="0">–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è</button>
          <a href="${shareUrl}" target="_blank" class="px-4 py-2 bg-primary text-white rounded focus:outline-none" aria-label="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" tabIndex="0">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è</a>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ
    modal.querySelector('#closeLuckyJobModal').onclick = () => modal.remove();
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–∫–Ω–∞
    modal.onclick = e => { if (e.target === modal) modal.remove(); };
    // –§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    modal.querySelector('button, a')?.focus();
  }

  // üü¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è Lucky Job
  logLuckyJobEvent(eventType, job) {
    // Sentry breadcrumb
    if (window.Sentry) {
      Sentry.addBreadcrumb({
        message: `Lucky Job: ${eventType}`,
        category: 'user.luckyjob',
        data: { jobId: job?.id || null, title: job?.title || null },
        level: 'info'
      });
    }
    // Firestore event log (production)
    if (this.db && window.firebase) {
      try {
        this.db.collection('analytics_luckyjob').add({
          eventType,
          jobId: job?.id || null,
          title: job?.title || null,
          userId: this.currentUser?.uid || null,
          timestamp: window.firebase.firestore.FieldValue.serverTimestamp(),
          userAgent: navigator.userAgent
        });
      } catch (e) {
        // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥
        if (window.Sentry) Sentry.captureException(e);
      }
    }
  }

  // üü¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∏–Ω–∏-–¥–∞—à–±–æ—Ä–¥–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ Lucky Job
  async updateLuckyJobFeedbackDashboard() {
    const dash = document.getElementById('luckyJobFeedbackDashboard');
    const posEl = document.getElementById('luckyJobFeedbackPositive');
    const totalEl = document.getElementById('luckyJobFeedbackTotal');
    const issuesEl = document.getElementById('luckyJobFeedbackTopIssues');
    const trendsEl = document.getElementById('luckyJobFeedbackTrends');
    if (!dash || !posEl || !totalEl || !issuesEl || !trendsEl) return;

    // –ï—Å–ª–∏ –Ω–µ—Ç Firestore ‚Äî –¥–µ–º–æ-—Ä–µ–∂–∏–º
    if (!this.db || !window.firebase) {
      dash.classList.remove('hidden');
      posEl.textContent = '80%';
      totalEl.textContent = '25';
      issuesEl.innerHTML = '<li>–ú–∞–ª–æ –≤–∞–∫–∞–Ω—Å–∏–π</li><li>–ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≥–æ—Ä–æ–¥—É</li><li>–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ IT</li>';
      trendsEl.textContent = '–ü–Ω: 3, –í—Ç: 5, –°—Ä: 7, –ß—Ç: 4, –ü—Ç: 6, –°–±: 0, –í—Å: 0';
      return;
    }

    try {
      const snapshot = await this.db.collection('feedback_luckyjob').get();
      let total = 0, positive = 0;
      const comments = [];
      const trends = {};
      snapshot.forEach(doc => {
        const d = doc.data();
        total++;
        if (d.type === 'yes') positive++;
        if (d.type === 'comment' && d.comment) comments.push(d.comment);
        // –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–Ω—è–º
        const date = d.timestamp?.toDate ? d.timestamp.toDate() : (d.timestamp instanceof Date ? d.timestamp : null);
        if (date) {
          const day = date.toLocaleDateString('ru-RU', { weekday: 'short' });
          trends[day] = (trends[day] || 0) + 1;
        }
      });
      dash.classList.remove('hidden');
      posEl.textContent = total ? Math.round((positive/total)*100) + '%' : '0%';
      totalEl.textContent = total;
      // –¢–æ–ø-3 –ø—Ä–æ–±–ª–µ–º—ã/–ø–æ–∂–µ–ª–∞–Ω–∏—è (–ø–æ —Å–ª–æ–≤–∞–º)
      const wordCounts = {};
      comments.forEach(txt => {
        txt.toLowerCase().split(/\W+/).forEach(w => {
          if (w.length > 3) wordCounts[w] = (wordCounts[w]||0)+1;
        });
      });
      const top = Object.entries(wordCounts).sort((a,b)=>b[1]-a[1]).slice(0,3).map(([w,c])=>`<li>${w} <span class='text-gray-400'>(${c})</span></li>`).join('');
      issuesEl.innerHTML = top || '<li>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</li>';
      // –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–Ω—è–º
      const days = ['–ü–Ω','–í—Ç','–°—Ä','–ß—Ç','–ü—Ç','–°–±','–í—Å'];
      const trendStr = days.map(d=>`${d}: ${trends[d]||0}`).join(', ');
      trendsEl.textContent = trendStr;
    } catch (e) {
      dash.classList.remove('hidden');
      posEl.textContent = '‚Äî';
      totalEl.textContent = '‚Äî';
      issuesEl.innerHTML = '<li>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</li>';
      trendsEl.textContent = '';
      if (window.Sentry) Sentry.captureException(e);
    }
  }

  // üü¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Lucky Job –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
  async updateLuckyJobAnalytics() {
    // DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
    const clicksEl = document.getElementById('luckyJobClicks');
    const showsEl = document.getElementById('luckyJobShows');
    const topJobsEl = document.getElementById('luckyJobTopJobs');
    if (!clicksEl || !showsEl || !topJobsEl) return;

    // –ï—Å–ª–∏ –Ω–µ—Ç Firestore ‚Äî –¥–µ–º–æ-—Ä–µ–∂–∏–º
    if (!this.db || !window.firebase) {
      clicksEl.textContent = Math.floor(Math.random() * 100);
      showsEl.textContent = Math.floor(Math.random() * 200);
      topJobsEl.innerHTML = '<li>–î–µ–º–æ-–≤–∞–∫–∞–Ω—Å–∏—è 1</li><li>–î–µ–º–æ-–≤–∞–∫–∞–Ω—Å–∏—è 2</li>';
      return;
    }

    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Firestore
    try {
      const snapshot = await this.db.collection('analytics_luckyjob').get();
      let clicks = 0, shows = 0;
      const jobStats = {};
      snapshot.forEach(doc => {
        const d = doc.data();
        if (d.eventType === 'click') clicks++;
        if (d.eventType === 'show') {
          shows++;
          if (d.jobId) {
            jobStats[d.jobId] = jobStats[d.jobId] || { count: 0, title: d.title || d.jobId };
            jobStats[d.jobId].count++;
          }
        }
      });
      clicksEl.textContent = clicks;
      showsEl.textContent = shows;
      // –¢–æ–ø-5 –≤–∞–∫–∞–Ω—Å–∏–π
      const top = Object.values(jobStats).sort((a, b) => b.count - a.count).slice(0, 5);
      topJobsEl.innerHTML = top.length ? top.map(j => `<li>${j.title} <span class='text-gray-400'>(${j.count})</span></li>`).join('') : '<li>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</li>';
    } catch (e) {
      clicksEl.textContent = '‚Äî';
      showsEl.textContent = '‚Äî';
      topJobsEl.innerHTML = '<li>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</li>';
      if (window.Sentry) Sentry.captureException(e);
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∏–Ω–∏-–¥–∞—à–±–æ—Ä–¥ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    this.updateLuckyJobFeedbackDashboard();
  }
}

/**
 * –§–∏–∫—Å–∏—Ä—É–µ—Ç –¥–∞—Ç—É –æ—Ç–∫–ª–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –Ω–µ–¥–µ–ª–∏ (MVP: localStorage).
 */
function trackWeeklyChallengeApplication() {
  let dates = [];
  try {
    dates = JSON.parse(localStorage.getItem('careerWeeklyChallengeDates') || '[]');
    if (!Array.isArray(dates)) dates = [];
  } catch { dates = []; }
  dates.push(Date.now());
  localStorage.setItem('careerWeeklyChallengeDates', JSON.stringify(dates));
}

// üü¢ Skeleton loading –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π (–≤–Ω–µ –∫–ª–∞—Å—Å–∞)
function showJobsSkeleton(container, count = 3) {
  if (!container) return;
  container.innerHTML = Array(count).fill(0).map(() => `
    <div class='border rounded p-3 animate-pulse bg-gray-100'>
      <div class='h-4 w-2/3 bg-gray-300 rounded mb-2'></div>
      <div class='h-3 w-1/2 bg-gray-200 rounded mb-1'></div>
      <div class='h-3 w-1/3 bg-gray-200 rounded'></div>
    </div>
  `).join('');
}
// üü¢ Skeleton loading –¥–ª—è AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–≤–Ω–µ –∫–ª–∞—Å—Å–∞)
function showAISkeleton() {
  const aiBlock = document.getElementById('aiJobRecommendations');
  const aiList = document.getElementById('aiJobRecommendationsList');
  if (!aiBlock || !aiList) return;
  aiList.innerHTML = Array(2).fill(0).map(() => `
    <div class='border rounded p-3 animate-pulse bg-gray-100'>
      <div class='h-4 w-2/3 bg-gray-300 rounded mb-2'></div>
      <div class='h-3 w-1/2 bg-gray-200 rounded mb-1'></div>
      <div class='h-3 w-1/3 bg-gray-200 rounded'></div>
    </div>
  `).join('');
  aiBlock.classList.remove('hidden');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  window.jobsManager = new JobsManager();
});

// üü¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Lucky Job –∫–Ω–æ–ø–∫–∏
window.addEventListener('DOMContentLoaded', () => {
  const luckyBtn = document.getElementById('luckyJobBtn');
  if (luckyBtn && window.jobsManager) {
    luckyBtn.addEventListener('click', () => {
      window.jobsManager.logLuckyJobEvent('click');
      window.jobsManager.showLuckyJob();
    });
    luckyBtn.addEventListener('keydown', e => {
      if (e.key === 'Enter' || e.key === ' ') {
        window.jobsManager.logLuckyJobEvent('click');
        window.jobsManager.showLuckyJob();
      }
    });
  }
});

// üü¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–Ω–Ω–µ—Ä–∞ –∏ –º–æ–¥–∞–ª–∫–∏ Lucky Job Feedback
window.addEventListener('DOMContentLoaded', () => {
  // Feedback: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
  const yesBtn = document.getElementById('luckyJobFeedbackYes');
  const noBtn = document.getElementById('luckyJobFeedbackNo');
  const commentBtn = document.getElementById('luckyJobFeedbackComment');
  const modal = document.getElementById('luckyJobFeedbackModal');
  const closeModal = document.getElementById('closeLuckyJobFeedbackModal');
  const sendBtn = document.getElementById('luckyJobFeedbackSend');
  const textArea = document.getElementById('luckyJobFeedbackText');
  if (yesBtn) yesBtn.onclick = () => window.jobsManager?.sendLuckyJobFeedback('yes');
  if (noBtn) noBtn.onclick = () => window.jobsManager?.sendLuckyJobFeedback('no');
  if (commentBtn) commentBtn.onclick = () => { modal?.classList.remove('hidden'); textArea?.focus(); };
  if (closeModal) closeModal.onclick = () => modal?.classList.add('hidden');
  if (sendBtn) sendBtn.onclick = () => {
    const val = textArea?.value?.trim() || '';
    if (val.length < 3) { alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.'); return; }
    window.jobsManager?.sendLuckyJobFeedback('comment', val);
  };
});

// üü¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: –∑–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
window.addEventListener('DOMContentLoaded', () => {
  const aiToggle = document.getElementById('toggleAIRecs');
  const emailToggle = document.getElementById('toggleEmailRecs');
  const statusEl = document.getElementById('recSettingsStatus');
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ Firestore
  if (!window.authManager?.currentUser || !window.jobsManager?.db) return;
  const uid = window.authManager.currentUser.uid;
  const db = window.jobsManager.db;
  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  db.collection('user_profiles').doc(uid).get().then(doc => {
    const d = doc.data()||{};
    aiToggle.checked = d.aiRecommendations !== false; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true
    emailToggle.checked = d.emailConsent !== false; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true
  });
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  function saveSettings() {
    statusEl.textContent = '–°–æ—Ö—Ä–∞–Ω—è–µ–º...';
    db.collection('user_profiles').doc(uid).update({
      aiRecommendations: aiToggle.checked,
      emailConsent: emailToggle.checked
    }).then(() => {
      statusEl.textContent = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.';
      setTimeout(()=>statusEl.textContent='', 2000);
    }).catch(()=>{
      statusEl.textContent = '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.';
    });
  }
  aiToggle.onchange = saveSettings;
  emailToggle.onchange = saveSettings;
});

// üü¢ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
window.addEventListener('DOMContentLoaded', () => {
  const pushToggle = document.getElementById('togglePushRecs');
  const statusEl = document.getElementById('recSettingsStatus');
  if (!pushToggle) return;
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ Firestore
  if (!window.authManager?.currentUser || !window.jobsManager?.db) return;
  const uid = window.authManager.currentUser.uid;
  const db = window.jobsManager.db;
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ push
  db.collection('user_profiles').doc(uid).get().then(doc => {
    const d = doc.data()||{};
    pushToggle.checked = !!d.pushEnabled;
  });
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ push-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  pushToggle.onchange = async function() {
    if (pushToggle.checked) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
      if (!('serviceWorker' in navigator) || !('PushManager' in window)) {
        statusEl.textContent = 'Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ.';
        pushToggle.checked = false;
        return;
      }
      statusEl.textContent = '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ push...';
      try {
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker
        const reg = await navigator.serviceWorker.register('/sw.js');
        const perm = await Notification.requestPermission();
        if (perm !== 'granted') throw new Error('–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è');
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ push
        const sub = await reg.pushManager.subscribe({
          userVisibleOnly: true,
          applicationServerKey: '<YOUR_VAPID_PUBLIC_KEY>' // TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á
        });
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ Firestore
        await db.collection('user_profiles').doc(uid).update({
          pushEnabled: true,
          pushSubscription: JSON.parse(JSON.stringify(sub))
        });
        statusEl.textContent = 'Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.';
      } catch (e) {
        statusEl.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å push: ' + (e.message||e);
        pushToggle.checked = false;
      }
    } else {
      // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ push
      await db.collection('user_profiles').doc(uid).update({
        pushEnabled: false,
        pushSubscription: null
      });
      statusEl.textContent = 'Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.';
    }
    setTimeout(()=>statusEl.textContent='', 3000);
  };
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = JobsManager;
} 