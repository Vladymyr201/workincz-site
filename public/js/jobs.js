// üíº –ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ WorkInCZ
class JobsManager {
  constructor() {
    this.db = null;
    this.auth = null;
    this.currentUser = null;
    this.jobsCache = new Map();
    this.filters = {
      category: 'all',
      location: 'all',
      workType: 'all',
      withHousing: false,
      urgent: false,
      salaryMin: null,
      salaryMax: null
    };
    
    this.init();
  }

  async init() {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ AuthManager
    if (window.authManager) {
      await window.authManager.waitForReady();
      this.db = window.authManager.db;
      this.auth = window.authManager.auth;
      
      console.log('üî• JobsManager –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ AuthManager');
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ AuthManager
      this.unsubscribeAuth = window.authManager.subscribe((user) => {
        this.currentUser = user;
        if (user) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ AuthManager
          this.currentUser.userData = window.authManager.getUserData(user.uid);
        }
      });
    }
    
    this.setupEventListeners();
    this.loadJobs();
  }

  setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç–∫–ª–∏–∫–æ–≤
    document.addEventListener('click', (e) => {
      if (e.target.matches('.apply-btn, .apply-btn *')) {
        e.preventDefault();
        const btn = e.target.closest('.apply-btn');
        const jobId = btn.dataset.jobId;
        this.applyToJob(jobId);
      }
      
      if (e.target.matches('.save-btn, .save-btn *')) {
        e.preventDefault();
        const btn = e.target.closest('.save-btn');
        const jobId = btn.dataset.jobId;
        this.saveJob(jobId);
      }
    });

    // –§–∏–ª—å—Ç—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    document.querySelectorAll('[data-category]').forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        this.filters.category = e.target.dataset.category;
        this.loadJobs();
      });
    });
  }

  async loadJobs(limit = 20) {
    try {
      if (!this.db) {
        console.log('Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–≤–∞–∫–∞–Ω—Å–∏–∏');
        this.renderDemoJobs();
        return;
      }

      // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö where —É—Å–ª–æ–≤–∏–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
      let query = this.db.collection('jobs')
        .orderBy('createdAt', 'desc')
        .limit(limit);

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–µ–ª–∞–µ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã –≤ Firebase Console

      const snapshot = await query.get();
      const allJobs = [];
      
      snapshot.forEach(doc => {
        const job = { id: doc.id, ...doc.data() };
        allJobs.push(job);
        this.jobsCache.set(doc.id, job);
      });

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
      const filteredJobs = allJobs.filter(job => {
        // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏)
        if (job.status !== 'active') return false;
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (this.filters.category !== 'all' && job.category !== this.filters.category) {
          return false;
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
        if (this.filters.urgent && !job.urgent) {
          return false;
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –∂–∏–ª—å—é
        if (this.filters.withHousing && !job.housingProvided) {
          return false;
        }
        
        return true;
      });

      this.renderJobs(filteredJobs);
      return filteredJobs;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π:', error);
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      this.renderDemoJobs();
    }
  }

  renderDemoJobs() {
    // –î–µ–º–æ-–≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ Firebase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    const demoJobs = [
      {
        id: 'demo-1',
        title: '–†–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–π –Ω–∞ —Å—Ç—Ä–æ–π–∫—É',
        companyName: 'Stavebn√≠ firma Nov√°k',
        location: { city: '–ü—Ä–∞–≥–∞' },
        salary: { min: 140, max: 160, currency: 'CZK', period: 'hour' },
        workType: 'full-time',
        description: '–¢—Ä–µ–±—É—é—Ç—Å—è —Ä–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ –ü—Ä–∞–≥–µ. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∂–∏–ª—å—ë –∏ –ø–æ–º–æ—â—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.',
        urgent: true,
        housingProvided: true,
        requirements: { languages: [{ name: '–†—É—Å—Å–∫–∏–π' }, { name: '–ë–∞–∑–æ–≤—ã–π —á–µ—à—Å–∫–∏–π' }] }
      },
      {
        id: 'demo-2',
        title: '–û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞',
        companyName: '≈†koda Auto a.s.',
        location: { city: '–ú–ª–∞–¥–∞-–ë–æ–ª–µ—Å–ª–∞–≤' },
        salary: { min: 32000, max: 38000, currency: 'CZK', period: 'month' },
        workType: 'full-time',
        description: '–†–∞–±–æ—Ç–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ. –°–±–æ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–±—â–µ–∂–∏—Ç–∏–µ, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–æ —Ä–∞–±–æ—Ç—ã –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç.',
        urgent: true,
        housingProvided: true,
        requirements: { languages: [{ name: '–ë–∞–∑–æ–≤—ã–π —á–µ—à—Å–∫–∏–π' }] }
      },
      {
        id: 'demo-3',
        title: '–ö–ª–∞–¥–æ–≤—â–∏–∫-–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫',
        companyName: 'Alza.cz a.s.',
        location: { city: '–ü—Ä–∞–≥–∞' },
        salary: { min: 130, currency: 'CZK', period: 'hour' },
        workType: 'full-time',
        description: '–†–∞–±–æ—Ç–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞. –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å. –ë–æ–Ω—É—Å—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞.',
        urgent: true,
        housingProvided: false,
        requirements: { languages: [{ name: '–†—É—Å—Å–∫–∏–π' }, { name: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π' }] }
      }
    ];

    this.renderJobs(demoJobs);
  }

  renderJobs(jobs) {
    const container = document.querySelector('.jobs-container');
    if (!container) return;

    if (jobs.length === 0) {
      container.innerHTML = `
        <div class="text-center py-12">
          <i class="ri-briefcase-line text-6xl text-gray-300 mb-4"></i>
          <h3 class="text-xl font-medium text-gray-500 mb-2">–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
          <p class="text-gray-400">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
        </div>
      `;
      return;
    }

    container.innerHTML = jobs.map(job => this.renderJobCard(job)).join('');
  }

  renderJobCard(job) {
    const hasHousing = job.housingProvided;
    const isUrgent = job.urgent;
    const isVipOnly = job.visibility === 'vip_only';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ VIP –≤–∞–∫–∞–Ω—Å–∏—è–º
    const canViewJob = !isVipOnly || (this.currentUser && this.currentUser.subscription?.type === 'vip');
    
    if (isVipOnly && !canViewJob) {
      return this.renderVipJobCard(job);
    }

    return `
      <div class="bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm hover:shadow-xl hover:-translate-y-1 transition-all duration-300 card-3d">
        <div class="p-6">
          <div class="flex justify-between items-start mb-4">
            <div class="flex-1">
              <h3 class="text-xl font-semibold mb-1">${job.title}</h3>
              <p class="text-gray-600 mb-1">${job.companyName}</p>
              <div class="flex items-center gap-2 text-sm text-gray-500">
                <i class="ri-map-pin-line"></i>
                <span>${job.location.city}</span>
              </div>
            </div>
            <div class="flex flex-col items-end gap-2">
              ${isUrgent ? `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gradient-to-r from-secondary/80 to-secondary text-white">–°—Ä–æ—á–Ω–æ</span>` : ''}
              ${hasHousing ? `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-success/10 text-success">–° –∂–∏–ª—å—ë–º</span>` : ''}
              ${isVipOnly ? `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary/10 text-primary">VIP</span>` : ''}
            </div>
          </div>
          
          <div class="mb-4">
            <div class="flex items-center gap-2 mb-2">
              <i class="ri-money-czech-koruna-circle-line text-gray-500"></i>
              <span class="font-medium">${this.formatSalary(job.salary)}</span>
            </div>
            <div class="flex items-center gap-2 mb-2">
              <i class="ri-time-line text-gray-500"></i>
              <span>${this.formatWorkType(job.workType)}</span>
            </div>
            ${job.requirements?.languages?.length ? `
              <div class="flex items-center gap-2">
                <i class="ri-translate-2 text-gray-500"></i>
                <span>${job.requirements.languages.map(lang => lang.name).join(', ')}</span>
              </div>
            ` : ''}
          </div>
          
          <p class="text-gray-600 text-sm mb-4 line-clamp-3">${job.description}</p>
          
          <div class="flex justify-between gap-2">
            <button class="apply-btn bg-primary text-white px-4 py-2 rounded-button text-sm font-medium hover:bg-primary/90 whitespace-nowrap flex items-center gap-2 button-ripple" data-job-id="${job.id}">
              <i class="ri-send-plane-line"></i>
              –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è
            </button>
            <button class="message-btn bg-green-500/10 text-green-600 border border-green-200 px-3 py-2 rounded-button text-sm font-medium hover:bg-green-500/20 whitespace-nowrap flex items-center gap-2" onclick="startChatWithUser('${job.employerId || job.companyId || 'demo-employer'}', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞–∫–∞–Ω—Å–∏—è ${job.title}', '${job.id}')" data-job-id="${job.id}">
              <i class="ri-message-3-line"></i>
              –ù–∞–ø–∏—Å–∞—Ç—å
            </button>
            <button class="save-btn bg-secondary/10 text-secondary border-none px-3 py-2 rounded-button text-sm font-medium hover:bg-secondary/20 whitespace-nowrap flex items-center gap-2" data-job-id="${job.id}">
              <i class="ri-bookmark-line"></i>
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
          </div>
        </div>
      </div>
    `;
  }

  renderVipJobCard(job) {
    return `
      <div class="bg-gradient-to-br from-primary/5 to-primary/10 border-2 border-primary/20 rounded-lg overflow-hidden shadow-sm relative">
        <div class="absolute inset-0 bg-white/80 backdrop-blur-sm flex items-center justify-center">
          <div class="text-center p-8">
            <i class="ri-vip-crown-line text-4xl text-primary mb-4"></i>
            <h3 class="text-xl font-semibold mb-2">VIP –í–∞–∫–∞–Ω—Å–∏—è</h3>
            <p class="text-gray-600 mb-4">–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω—É–∂–Ω–∞ VIP –ø–æ–¥–ø–∏—Å–∫–∞</p>
            <div class="flex gap-3">
              <button class="bg-primary text-white px-6 py-3 rounded-button font-medium hover:bg-primary/90 flex-1">
              –ü–æ–ª—É—á–∏—Ç—å VIP –∑–∞ 1 Kƒç
            </button>
              <button class="bg-green-500/10 text-green-600 border border-green-200 px-4 py-3 rounded-button font-medium hover:bg-green-500/20 flex items-center gap-2" onclick="startChatWithUser('${job.employerId || job.companyId || 'demo-employer'}', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç VIP –≤–∞–∫–∞–Ω—Å–∏—è ${job.title}', '${job.id}')">
                <i class="ri-message-3-line"></i>
                –ù–∞–ø–∏—Å–∞—Ç—å
              </button>
            </div>
          </div>
        </div>
        <div class="p-6 blur-sm">
          <div class="flex justify-between items-start mb-4">
            <div>
              <h3 class="text-xl font-semibold mb-1">${job.title}</h3>
              <p class="text-gray-600 mb-1">${job.companyName}</p>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  async applyToJob(jobId) {
    try {
      if (!this.currentUser) {
        this.showLoginModal();
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –Ω–∞ –æ—Ç–∫–ª–∏–∫–∏
      const canApply = await this.checkApplicationLimit();
      if (!canApply) {
        this.showUpgradeModal('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ç–∫–ª–∏–∫–æ–≤');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª–∏–∫–∞–ª—Å—è –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingApplication = await this.db.collection('applications')
        .where('jobId', '==', jobId)
        .where('applicantId', '==', this.currentUser.uid)
        .get();

      if (!existingApplication.empty) {
        this.showError('–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –æ—Ç–∫–ª–∏–∫
      const applicationData = {
        jobId,
        applicantId: this.currentUser.uid,
        employerId: this.jobsCache.get(jobId)?.employerId,
        status: 'pending',
        coverLetter: '', // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
        attachments: [],
        createdAt: firebase.firestore.FieldValue.serverTimestamp(),
        source: 'manual'
      };

      await this.db.collection('applications').add(applicationData);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.updateApplicationCount();

      this.showSuccess('–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–µ:', error);
      this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫');
    }
  }

  async checkApplicationLimit() {
    if (!this.currentUser) return false;

    const userDoc = await this.db.collection('users').doc(this.currentUser.uid).get();
    const userData = userDoc.data();
    
    if (!userData) return false;

    const subscription = userData.subscription || { type: 'basic' };
    const stats = userData.stats || { applicationsThisMonth: 0, applicationsLimit: 5 };

    // VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏
    if (subscription.type === 'vip' || subscription.type === 'premium') {
      return true;
    }

    // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã 5 –æ—Ç–∫–ª–∏–∫–∞–º–∏ –≤ –º–µ—Å—è—Ü
    return stats.applicationsThisMonth < stats.applicationsLimit;
  }

  async updateApplicationCount() {
    if (!this.currentUser) return;

    const userRef = this.db.collection('users').doc(this.currentUser.uid);
    await userRef.update({
      'stats.applicationsThisMonth': firebase.firestore.FieldValue.increment(1),
      'stats.lastApplicationDate': firebase.firestore.FieldValue.serverTimestamp()
    });
  }

  async saveJob(jobId) {
    if (!this.currentUser) {
      this.showLoginModal();
      return;
    }

    try {
      const userRef = this.db.collection('users').doc(this.currentUser.uid);
      await userRef.update({
        savedJobs: firebase.firestore.FieldValue.arrayUnion(jobId)
      });

      this.showSuccess('–í–∞–∫–∞–Ω—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é');
    }
  }

  formatSalary(salary) {
    if (!salary) return '–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏';
    
    const { min, max, currency = 'CZK', period = 'month' } = salary;
    const periodText = period === 'hour' ? '/—á–∞—Å' : '/–º–µ—Å—è—Ü';
    
    if (min && max) {
      return `${min.toLocaleString()} - ${max.toLocaleString()} ${currency}${periodText}`;
    } else if (min) {
      return `–æ—Ç ${min.toLocaleString()} ${currency}${periodText}`;
    } else if (max) {
      return `–¥–æ ${max.toLocaleString()} ${currency}${periodText}`;
    }
    
    return '–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏';
  }

  formatWorkType(workType) {
    const types = {
      'full-time': '–ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å',
      'part-time': '–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å',
      'contract': '–ü–æ –¥–æ–≥–æ–≤–æ—Ä—É',
      'freelance': '–§—Ä–∏–ª–∞–Ω—Å'
    };
    
    return types[workType] || workType;
  }

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ AuthManager

  showLoginModal() {
    const modal = document.getElementById('authModal');
    if (modal) {
      modal.style.display = 'flex';
    }
  }

  showUpgradeModal(message) {
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è upgrade
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black/50 flex items-center justify-center z-50';
    modal.innerHTML = `
      <div class="bg-white rounded-lg p-8 max-w-md mx-4">
        <div class="text-center">
          <i class="ri-vip-crown-line text-4xl text-primary mb-4"></i>
          <h3 class="text-xl font-semibold mb-2">–ù—É–∂–Ω–∞ VIP –ø–æ–¥–ø–∏—Å–∫–∞</h3>
          <p class="text-gray-600 mb-6">${message}</p>
          <div class="flex gap-3">
            <button class="upgrade-btn bg-primary text-white px-6 py-3 rounded-button font-medium hover:bg-primary/90 flex-1">
              –ü–æ–ª—É—á–∏—Ç—å VIP –∑–∞ 1 Kƒç
            </button>
            <button class="cancel-btn bg-gray-100 text-gray-700 px-6 py-3 rounded-button font-medium hover:bg-gray-200">
              –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        </div>
      </div>
    `;

    modal.querySelector('.cancel-btn').onclick = () => modal.remove();
    modal.querySelector('.upgrade-btn').onclick = () => {
      modal.remove();
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥–ø–∏—Å–∫–∏
      window.location.href = '#subscription';
    };

    document.body.appendChild(modal);
  }

  showSuccess(message) {
    this.showToast(message, 'success');
  }

  showError(message) {
    this.showToast(message, 'error');
  }

  showToast(message, type = 'info') {
    const toast = document.createElement('div');
    toast.className = `fixed top-4 right-4 px-6 py-3 rounded-lg text-white z-50 transition-all duration-300 ${
      type === 'success' ? 'bg-green-500' : 
      type === 'error' ? 'bg-red-500' : 'bg-blue-500'
    }`;
    toast.textContent = message;
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
      toast.style.opacity = '0';
      setTimeout(() => toast.remove(), 300);
    }, 3000);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  window.jobsManager = new JobsManager();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = JobsManager;
} 