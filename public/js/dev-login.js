// üõ†Ô∏è Dev Login - headless –≤—Ö–æ–¥ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
class DevLogin {
  constructor() {
    this.devAccounts = {
      candidate: {
        email: 'dev-candidate@workincz.cz',
        password: 'dev123456',
        name: 'Dev –°–æ–∏—Å–∫–∞—Ç–µ–ª—å',
        role: 'candidate'
      },
      client: {
        email: 'dev-client@workincz.cz',
        password: 'dev123456', 
        name: 'Dev –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å',
        role: 'client'
      },
      agency: {
        email: 'dev-agency@workincz.cz',
        password: 'dev123456',
        name: 'Dev –ê–≥–µ–Ω—Ç—Å—Ç–≤–æ',
        role: 'agency'
      },
      admin: {
        email: 'dev-admin@workincz.cz',
        password: 'dev123456',
        name: 'Dev –ê–¥–º–∏–Ω',
        role: 'admin'
      }
    };
    
    this.init();
  }

  init() {
    // –°–æ–∑–¥–∞–µ–º dev-–ø–∞–Ω–µ–ª—å —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (this.isDevelopmentMode()) {
      this.createDevPanel();
      this.setupDevCommands();
      console.log('üõ†Ô∏è DevLogin –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
  }

  isDevelopmentMode() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    return window.location.hostname === 'localhost' || 
           window.location.hostname === '127.0.0.1' ||
           window.location.hostname.includes('dev') ||
           window.location.search.includes('dev=true');
  }

  createDevPanel() {
    const panelHTML = `
      <!-- Dev Panel -->
      <div id="devPanel" class="fixed bottom-4 right-4 bg-gray-900 text-white rounded-lg shadow-lg z-50 max-w-xs">
        <div class="p-3 border-b border-gray-700">
          <div class="flex items-center justify-between">
            <h4 class="text-sm font-semibold">üõ†Ô∏è Dev Tools</h4>
            <button id="toggleDevPanel" class="text-gray-400 hover:text-white">
              <i class="ri-arrow-up-s-line"></i>
            </button>
          </div>
        </div>
        
        <div id="devPanelContent" class="p-3 space-y-2">
          <!-- Quick Login Buttons -->
          <div class="space-y-1">
            <p class="text-xs text-gray-400 mb-2">–ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥:</p>
            <button onclick="devLogin.quickLogin('candidate')" class="w-full bg-blue-600 hover:bg-blue-700 text-white text-xs py-1 px-2 rounded">
              üë§ –°–æ–∏—Å–∫–∞—Ç–µ–ª—å
            </button>
            <button onclick="devLogin.quickLogin('client')" class="w-full bg-yellow-600 hover:bg-yellow-700 text-white text-xs py-1 px-2 rounded">
              üè¢ –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å
            </button>
            <button onclick="devLogin.quickLogin('agency')" class="w-full bg-green-600 hover:bg-green-700 text-white text-xs py-1 px-2 rounded">
              üë• –ê–≥–µ–Ω—Ç—Å—Ç–≤–æ
            </button>
            <button onclick="devLogin.quickLogin('admin')" class="w-full bg-red-600 hover:bg-red-700 text-white text-xs py-1 px-2 rounded">
              üîß –ê–¥–º–∏–Ω
            </button>
          </div>
          
          <!-- Dev Commands -->
          <div class="border-t border-gray-700 pt-2 mt-2">
            <p class="text-xs text-gray-400 mb-2">–ö–æ–º–∞–Ω–¥—ã:</p>
            <button onclick="devLogin.createTestData()" class="w-full bg-purple-600 hover:bg-purple-700 text-white text-xs py-1 px-2 rounded mb-1">
              üìä –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            </button>
            <button onclick="devLogin.clearAllData()" class="w-full bg-red-600 hover:bg-red-700 text-white text-xs py-1 px-2 rounded mb-1">
              üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            </button>
            <button onclick="devLogin.logout()" class="w-full bg-gray-600 hover:bg-gray-700 text-white text-xs py-1 px-2 rounded">
              üö™ –í—ã–π—Ç–∏
            </button>
          </div>
          
          <!-- Current User Info -->
          <div id="devUserInfo" class="border-t border-gray-700 pt-2 mt-2 hidden">
            <p class="text-xs text-gray-400 mb-1">–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</p>
            <p id="devCurrentUser" class="text-xs text-white"></p>
          </div>
        </div>
      </div>
    `;

    document.body.insertAdjacentHTML('beforeend', panelHTML);
    this.setupDevPanelEvents();
  }

  setupDevPanelEvents() {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
    document.getElementById('toggleDevPanel')?.addEventListener('click', () => {
      const content = document.getElementById('devPanelContent');
      const icon = document.querySelector('#toggleDevPanel i');
      
      if (content.style.display === 'none') {
        content.style.display = 'block';
        icon.className = 'ri-arrow-up-s-line';
      } else {
        content.style.display = 'none';
        icon.className = 'ri-arrow-down-s-line';
      }
    });

    // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    document.addEventListener('keydown', (e) => {
      // Ctrl+Shift+D –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏
      if (e.ctrlKey && e.shiftKey && e.key === 'D') {
        e.preventDefault();
        const panel = document.getElementById('devPanel');
        panel.style.display = panel.style.display === 'none' ? 'block' : 'none';
      }
      
      // Ctrl+Shift+1-4 –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞
      if (e.ctrlKey && e.shiftKey && ['1', '2', '3', '4'].includes(e.key)) {
        e.preventDefault();
        const roles = ['candidate', 'client', 'agency', 'admin'];
        const roleIndex = parseInt(e.key) - 1;
        if (roles[roleIndex]) {
          this.quickLogin(roles[roleIndex]);
        }
      }
    });
  }

  setupDevCommands() {
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–Ω—Å–æ–ª—å
    window.devLogin = this;
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    window.devQuickLogin = (role) => this.quickLogin(role);
    window.devCreateData = () => this.createTestData();
    window.devClearData = () => this.clearAllData();
    window.devLogout = () => this.logout();
    
    console.log('üõ†Ô∏è Dev –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã:');
    console.log('- devQuickLogin("candidate|client|agency|admin")');
    console.log('- devCreateData()');
    console.log('- devClearData()');
    console.log('- devLogout()');
    console.log('- –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: Ctrl+Shift+D (–ø–∞–Ω–µ–ª—å), Ctrl+Shift+1-4 (–≤—Ö–æ–¥)');
  }

  async quickLogin(role) {
    try {
      const devAccount = this.devAccounts[role];
      if (!devAccount) {
        throw new Error(`Dev –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ä–æ–ª–∏ ${role} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      this.showDevMessage(`–í—Ö–æ–¥ –∫–∞–∫ ${devAccount.name}...`);
      
      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º dev-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.ensureDevUser(devAccount);
      
      // –í—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É
      await this.signInDevUser(user);
      
      this.showDevMessage(`‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–∞–∫ ${devAccount.name}`);
      this.updateDevUserInfo();
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–∞—à–±–æ—Ä–¥
      this.redirectToDashboard(role);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ dev-–≤—Ö–æ–¥–∞:', error);
      this.showDevError(`–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${error.message}`);
    }
  }

  async ensureDevUser(devAccount) {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
      const userCredential = await firebase.auth().signInWithEmailAndPassword(
        devAccount.email,
        devAccount.password
      );
      
      // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await firebase.auth().signOut();
      return userCredential.user;
      
    } catch (error) {
      if (error.code === 'auth/user-not-found') {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ dev-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return await this.createDevUser(devAccount);
      }
      throw error;
    }
  }

  async createDevUser(devAccount) {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userCredential = await firebase.auth().createUserWithEmailAndPassword(
      devAccount.email,
      devAccount.password
    );

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ Firestore
    const userData = {
      uid: userCredential.user.uid,
      email: devAccount.email,
      name: devAccount.name,
      role: devAccount.role,
      createdAt: firebase.firestore.FieldValue.serverTimestamp(),
      isVerified: true,
      isPremium: true,
      isDevAccount: true,
      stats: this.getDevStats(devAccount.role),
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞
      ...(devAccount.role === 'agency' && {
        company: 'Dev –ö–∞–¥—Ä–æ–≤–æ–µ –ê–≥–µ–Ω—Ç—Å—Ç–≤–æ',
        license: 'DEV-LICENSE-001',
        specialization: 'general',
        rating: 4.9,
        reviews: []
      })
    };

    await firebase.firestore().collection('users').doc(userCredential.user.uid).set(userData);
    
    // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    await firebase.auth().signOut();
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω dev-–∞–∫–∫–∞—É–Ω—Ç: ${devAccount.name}`);
    return userCredential.user;
  }

  getDevStats(role) {
    const stats = {
      candidate: { applications: 15, savedJobs: 25, profileViews: 45 },
      client: { postedJobs: 12, receivedApplications: 67, activeContracts: 8 },
      agency: { completedContracts: 23, activeRequests: 5, rating: 4.9 },
      admin: { totalUsers: 150, totalJobs: 89, totalContracts: 34 }
    };
    return stats[role] || {};
  }

  async signInDevUser(user) {
    // –í—Ö–æ–¥–∏–º —Å dev-–∞–∫–∫–∞—É–Ω—Ç–æ–º
    await firebase.auth().signInWithEmailAndPassword(
      user.email,
      'dev123456'
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    if (window.authManager) {
      if (window.authManager && typeof window.authManager.updateAuthUI === 'function') {
      window.authManager.updateAuthUI(user);
    }
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å
    if (window.enhancedAuthSystem) {
      const role = user.email.includes('candidate') ? 'candidate' : 
                  user.email.includes('client') ? 'client' : 
                  user.email.includes('agency') ? 'agency' : 'admin';
      window.enhancedAuthSystem.currentRole = role;
      window.enhancedAuthSystem.updateRoleSwitcher();
    }
  }

  async createTestData() {
    try {
      this.showDevMessage('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
      await this.createTestJobs();
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏
      await this.createTestApplications();
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —á–∞—Ç—ã
      await this.createTestChats();
      
      this.showDevMessage('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      this.showDevError(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
  }

  async createTestJobs() {
    const testJobs = [
      {
        title: '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ JavaScript',
        company: 'TechCorp',
        location: '–ü—Ä–∞–≥–∞',
        salary: '45000-65000 Kƒç',
        type: 'full-time',
        description: '–ò—â–µ–º –æ–ø—ã—Ç–Ω–æ–≥–æ JS —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞...'
      },
      {
        title: '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º',
        company: 'SalesPro',
        location: '–ë—Ä–Ω–æ',
        salary: '35000-50000 Kƒç',
        type: 'full-time',
        description: '–¢—Ä–µ–±—É–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º...'
      }
    ];

    for (const job of testJobs) {
      await firebase.firestore().collection('jobs').add({
        ...job,
        createdAt: firebase.firestore.FieldValue.serverTimestamp(),
        status: 'active',
        employerId: 'dev-employer-id'
      });
    }
  }

  async createTestApplications() {
    const applications = [
      { jobId: 'test-job-1', candidateId: 'dev-candidate-id', status: 'pending' },
      { jobId: 'test-job-2', candidateId: 'dev-candidate-id', status: 'accepted' }
    ];

    for (const app of applications) {
      await firebase.firestore().collection('applications').add({
        ...app,
        createdAt: firebase.firestore.FieldValue.serverTimestamp()
      });
    }
  }

  async createTestChats() {
    const chats = [
      { participants: ['dev-candidate-id', 'dev-employer-id'], type: 'job-discussion' },
      { participants: ['dev-agency-id', 'dev-client-id'], type: 'contract-discussion' }
    ];

    for (const chat of chats) {
      await firebase.firestore().collection('chats').add({
        ...chat,
        createdAt: firebase.firestore.FieldValue.serverTimestamp(),
        isActive: true
      });
    }
  }

  async clearAllData() {
    if (!confirm('‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) {
      return;
    }

    try {
      this.showDevMessage('–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      const collections = ['users', 'jobs', 'applications', 'chats', 'messages'];
      
      for (const collectionName of collections) {
        const snapshot = await firebase.firestore().collection(collectionName).get();
        const batch = firebase.firestore().batch();
        
        snapshot.docs.forEach(doc => {
          batch.delete(doc.ref);
        });
        
        await batch.commit();
      }
      
      this.showDevMessage('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      this.showDevError(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
  }

  async logout() {
    try {
      await firebase.auth().signOut();
      this.showDevMessage('‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
      this.updateDevUserInfo();
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
      window.location.href = '/';
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
      this.showDevError(`–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: ${error.message}`);
    }
  }

  redirectToDashboard(role) {
    const dashboards = {
      candidate: '/dashboard.html',
      client: '/employer-dashboard.html',
      agency: '/agency-dashboard.html',
      admin: '/admin-dashboard.html'
    };

    const dashboardUrl = dashboards[role];
    if (dashboardUrl) {
      const url = new URL(dashboardUrl, window.location.origin);
      url.searchParams.set('dev', 'true');
      url.searchParams.set('role', role);
      
      window.location.href = url.toString();
    }
  }

  updateDevUserInfo() {
    const userInfo = document.getElementById('devUserInfo');
    const currentUser = document.getElementById('devCurrentUser');
    
    if (userInfo && currentUser) {
      const user = firebase.auth().currentUser;
      
      if (user) {
        userInfo.classList.remove('hidden');
        currentUser.textContent = `${user.email} (${this.getUserRole(user.email)})`;
      } else {
        userInfo.classList.add('hidden');
      }
    }
  }

  getUserRole(email) {
    if (email.includes('candidate')) return '–°–æ–∏—Å–∫–∞—Ç–µ–ª—å';
    if (email.includes('client')) return '–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å';
    if (email.includes('agency')) return '–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ';
    if (email.includes('admin')) return '–ê–¥–º–∏–Ω';
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }

  showDevMessage(message) {
    const toast = document.createElement('div');
    toast.className = 'fixed top-4 right-4 bg-blue-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 text-sm';
    toast.textContent = `üõ†Ô∏è ${message}`;
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
      if (toast.parentElement) {
        toast.remove();
      }
    }, 3000);
  }

  showDevError(message) {
    const toast = document.createElement('div');
    toast.className = 'fixed top-4 right-4 bg-red-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 text-sm';
    toast.textContent = `üõ†Ô∏è ${message}`;
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
      if (toast.parentElement) {
        toast.remove();
      }
    }, 5000);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (window.location.hostname === 'localhost' || 
    window.location.hostname === '127.0.0.1' ||
    window.location.hostname.includes('dev') ||
    window.location.search.includes('dev=true')) {
  window.devLogin = new DevLogin();
} 