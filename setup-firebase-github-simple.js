#!/usr/bin/env node

/**
 * üîß –£–ü–†–û–©–ï–ù–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê FIREBASE –ò GITHUB
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ WorkInCZ
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

class FirebaseGitHubSetup {
  constructor() {
    this.projectRoot = process.cwd();
    this.firebaseConfigPath = 'firebase.json';
    this.githubWorkflowsPath = '.github/workflows';
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  checkCurrentSetup() {
    log('\nüîç –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ï–ô –ù–ê–°–¢–†–û–ô–ö–ò:', 'bright');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Firebase
    if (fs.existsSync(this.firebaseConfigPath)) {
      const firebaseConfig = JSON.parse(fs.readFileSync(this.firebaseConfigPath, 'utf8'));
      log('‚úÖ Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞', 'green');
      log(`   –ü—Ä–æ–µ–∫—Ç: ${firebaseConfig.projectId || '–ù–µ —É–∫–∞–∑–∞–Ω'}`, 'cyan');
    } else {
      log('‚ùå Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'red');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ GitHub Actions
    if (fs.existsSync(this.githubWorkflowsPath)) {
      const workflows = fs.readdirSync(this.githubWorkflowsPath);
      log(`‚úÖ GitHub Actions –Ω–∞–π–¥–µ–Ω—ã: ${workflows.length} workflow(s)`, 'green');
      workflows.forEach(workflow => {
        log(`   - ${workflow}`, 'cyan');
      });
    } else {
      log('‚ùå GitHub Actions –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'red');
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firebase
  async setupFirebase() {
    log('\nüî• –ù–ê–°–¢–†–û–ô–ö–ê FIREBASE:', 'bright');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ Firebase CLI
      log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ Firebase CLI...', 'cyan');
      execSync('firebase --version', { stdio: 'pipe' });
      log('‚úÖ Firebase CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'green');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Firebase...', 'cyan');
      try {
        execSync('firebase projects:list', { stdio: 'pipe' });
        log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Firebase –∞–∫—Ç–∏–≤–Ω–∞', 'green');
      } catch (error) {
        log('‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Firebase', 'yellow');
        log('   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: firebase login', 'yellow');
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Firebase
      log('‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Firebase...', 'cyan');
      const firebaseConfig = {
        "hosting": {
          "public": "public",
          "ignore": [
            "firebase.json",
            "**/.*",
            "**/node_modules/**"
          ],
          "rewrites": [
            {
              "source": "**",
              "destination": "/index.html"
            }
          ],
          "headers": [
            {
              "source": "**/*.@(js|css)",
              "headers": [
                {
                  "key": "Cache-Control",
                  "value": "max-age=31536000"
                }
              ]
            }
          ]
        },
        "firestore": {
          "rules": "firestore.rules",
          "indexes": "firestore.indexes.json"
        },
        "functions": {
          "source": "functions"
        },
        "storage": {
          "rules": "storage.rules"
        }
      };

      fs.writeFileSync(this.firebaseConfigPath, JSON.stringify(firebaseConfig, null, 2));
      log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firebase –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'green');

    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Firebase: ${error.message}`, 'red');
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub
  async setupGitHub() {
    log('\nüêô –ù–ê–°–¢–†–û–ô–ö–ê GITHUB:', 'bright');
    
    try {
      // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è workflows
      if (!fs.existsSync(this.githubWorkflowsPath)) {
        fs.mkdirSync(this.githubWorkflowsPath, { recursive: true });
        log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è GitHub Actions', 'green');
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö workflows
      const workflows = {
        'ci-cd-pipeline.yml': this.createCICDWorkflow(),
        'firebase-deploy.yml': this.createFirebaseDeployWorkflow(),
        'security-scan.yml': this.createSecurityScanWorkflow(),
        'performance-test.yml': this.createPerformanceTestWorkflow()
      };

      Object.entries(workflows).forEach(([filename, content]) => {
        const filepath = path.join(this.githubWorkflowsPath, filename);
        fs.writeFileSync(filepath, content);
        log(`‚úÖ –°–æ–∑–¥–∞–Ω workflow: ${filename}`, 'green');
      });

      // –°–æ–∑–¥–∞–Ω–∏–µ GitHub –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const githubConfig = {
        "name": "WorkInCZ GitHub Integration",
        "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ WorkInCZ",
        "workflows": Object.keys(workflows),
        "required_secrets": [
          "FIREBASE_TOKEN",
          "GITHUB_TOKEN",
          "SENTRY_AUTH_TOKEN"
        ]
      };

      fs.writeFileSync('.github/config.json', JSON.stringify(githubConfig, null, 2));
      log('‚úÖ GitHub –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞', 'green');

    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GitHub: ${error.message}`, 'red');
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ CI/CD workflow
  createCICDWorkflow() {
    return `name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Run linting
      run: npm run lint

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
    
    - name: Deploy to Firebase
      run: firebase deploy --only hosting --token "${{ secrets.FIREBASE_TOKEN }}"
`;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ Firebase Deploy workflow
  createFirebaseDeployWorkflow() {
    return `name: Firebase Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
    
    - name: Deploy to Firebase Hosting
      run: firebase deploy --only hosting --token "${{ secrets.FIREBASE_TOKEN }}"
    
    - name: Deploy to Firebase Functions
      run: firebase deploy --only functions --token "${{ secrets.FIREBASE_TOKEN }}"
`;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ Security Scan workflow
  createSecurityScanWorkflow() {
    return `name: Security Scan

on:
  push:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level moderate
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
`;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ Performance Test workflow
  createPerformanceTestWorkflow() {
    return `name: Performance Test

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * *'

jobs:
  performance-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright
      run: npx playwright install --with-deps
    
    - name: Run performance tests
      run: npx playwright test --config=playwright.config.js
    
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: playwright-report/
`;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
  createSetupInstructions() {
    const instructions = `# üîß –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ï FIREBASE –ò GITHUB

## üî• FIREBASE –ù–ê–°–¢–†–û–ô–ö–ê:

### 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Firebase:
\`\`\`bash
firebase login
\`\`\`

### 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞:
\`\`\`bash
firebase init hosting
firebase init firestore
firebase init functions
\`\`\`

### 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è CI/CD:
\`\`\`bash
firebase login:ci
\`\`\`

## üêô GITHUB –ù–ê–°–¢–†–û–ô–ö–ê:

### 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:
- –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub
- –î–æ–±–∞–≤—å—Ç–µ remote: \`git remote add origin https://github.com/username/workincz-site.git\`

### 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Secrets:
–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings > Secrets and variables > Actions –∏ –¥–æ–±–∞–≤—å—Ç–µ:

- \`FIREBASE_TOKEN\` - —Ç–æ–∫–µ–Ω –∏–∑ Firebase CLI
- \`GITHUB_TOKEN\` - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è GitHub
- \`SNYK_TOKEN\` - –¥–ª—è security scanning (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

### 3. Push –≤ main branch:
\`\`\`bash
git add .
git commit -m "Initial setup with Firebase and GitHub integration"
git push -u origin main
\`\`\`

## ‚úÖ –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò:

### Firebase:
- [ ] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞
- [ ] –ü—Ä–æ–µ–∫—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
- [ ] Hosting –Ω–∞—Å—Ç—Ä–æ–µ–Ω
- [ ] Firestore –Ω–∞—Å—Ç—Ä–æ–µ–Ω
- [ ] Functions –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã

### GitHub:
- [ ] –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω
- [ ] Secrets –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
- [ ] Workflows –∞–∫—Ç–∏–≤–Ω—ã
- [ ] CI/CD —Ä–∞–±–æ—Ç–∞–µ—Ç
- [ ] Deploy –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π

## üöÄ –ö–û–ú–ê–ù–î–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:

\`\`\`bash
# –¢–µ—Å—Ç Firebase
firebase serve
firebase deploy --only hosting

# –¢–µ—Å—Ç GitHub Actions
git push origin main  # –ó–∞–ø—É—Å—Ç–∏—Ç CI/CD pipeline
\`\`\`
`;

    fs.writeFileSync('FIREBASE_GITHUB_SETUP.md', instructions);
    log('‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–æ–∑–¥–∞–Ω—ã', 'green');
  }

  // –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  async runSetup() {
    log('üöÄ –ó–ê–ü–£–°–ö –ù–ê–°–¢–†–û–ô–ö–ò FIREBASE –ò GITHUB', 'bright');
    log('–ü—Ä–æ–µ–∫—Ç: WorkInCZ', 'cyan');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    this.checkCurrentSetup();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firebase
    await this.setupFirebase();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub
    await this.setupGitHub();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    this.createSetupInstructions();
    
    log('\nüéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!', 'bright');
    log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:', 'cyan');
    log('1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: firebase login', 'blue');
    log('2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ GitHub Secrets', 'blue');
    log('3. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ: FIREBASE_GITHUB_SETUP.md', 'blue');
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  const setup = new FirebaseGitHubSetup();
  setup.runSetup().catch(console.error);
}

module.exports = FirebaseGitHubSetup; 