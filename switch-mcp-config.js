#!/usr/bin/env node

/**
 * üîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–¨ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô MCP
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –ø–æ–ª–Ω–æ–π (159 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤) –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π (40 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤) –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
 */

const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

class MCPConfigSwitcher {
  constructor() {
    this.configPath = '.cursor/mcp.json';
    this.optimizedPath = '.cursor/mcp-optimized.json';
    this.backupPath = '.cursor/mcp-backup.json';
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
  createBackup() {
    if (fs.existsSync(this.configPath)) {
      fs.copyFileSync(this.configPath, this.backupPath);
      log('üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞', 'green');
    }
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  switchToOptimized() {
    log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...', 'cyan');
    
    this.createBackup();
    
    if (fs.existsSync(this.optimizedPath)) {
      fs.copyFileSync(this.optimizedPath, this.configPath);
      log('‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (7 —Å–µ—Ä–≤–µ—Ä–æ–≤, ~40 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)', 'green');
      this.showOptimizedInfo();
    } else {
      log('‚ùå –§–∞–π–ª –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'red');
    }
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  switchToFull() {
    log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...', 'cyan');
    
    this.createBackup();
    
    const fullConfig = {
      "mcpServers": {
        "filesystem": {
          "command": "npx",
          "args": ["-y", "@modelcontextprotocol/server-filesystem", "D:/workincz-site"]
        },
        "sequential-thinking": {
          "command": "npx",
          "args": ["-y", "@modelcontextprotocol/server-sequential-thinking"]
        },
        "context7": {
          "command": "npx",
          "args": ["-y", "@upstash/context7-mcp"]
        },
        "playwright": {
          "command": "npx",
          "args": ["-y", "@playwright/mcp"]
        },
        "time": {
          "command": "python",
          "args": ["-m", "mcp_server_time"]
        },
        "memory": {
          "command": "npx",
          "args": ["-y", "@modelcontextprotocol/server-memory"]
        },
        "sentry": {
          "command": "npx",
          "args": ["-y", "@sentry/mcp-server", "--auth-token", "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"]
        },
        "code-runner": {
          "command": "npx",
          "args": ["-y", "mcp-server-code-runner"]
        },
        "notion": {
          "command": "npx",
          "args": ["-y", "@notionhq/notion-mcp-server"]
        },
        "supabase": {
          "command": "npx",
          "args": ["-y", "@supabase/mcp-server-supabase"]
        },
        "wikipedia": {
          "command": "npx",
          "args": ["-y", "@shelm/wikipedia-mcp-server"]
        },
        "youtube": {
          "command": "npx",
          "args": ["-y", "youtube-data-mcp-server"]
        },
        "firebase-mcp": {
          "command": "npx",
          "args": ["-y", "firebase-tools@latest", "experimental:mcp"]
        },
        "github-mcp": {
          "command": "npx",
          "args": ["-y", "@modelcontextprotocol/server-github"],
          "env": {
            "GITHUB_PERSONAL_ACCESS_TOKEN": "YOUR_GITHUB_TOKEN_HERE",
            "GITHUB_API_URL": "https://api.github.com",
            "GH_HOST": "github.com"
          }
        }
      }
    };

    fs.writeFileSync(this.configPath, JSON.stringify(fullConfig, null, 2));
    log('‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (14 —Å–µ—Ä–≤–µ—Ä–æ–≤, ~159 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)', 'green');
    this.showFullInfo();
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  showOptimizedInfo() {
    log('\nüìä –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:', 'bright');
    log('–°–µ—Ä–≤–µ—Ä–æ–≤: 7', 'green');
    log('–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ~40', 'green');
    log('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è', 'green');
    log('–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ‚úÖ –ü–æ–ª–Ω–∞—è', 'green');
    
    log('\n‚úÖ –í–ö–õ–Æ–ß–ï–ù–ù–´–ï –°–ï–†–í–ï–†–´:', 'green');
    const servers = [
      'filesystem (12 tools)',
      'sequential-thinking (1 tool)',
      'context7 (2 tools)',
      'playwright (24 tools)',
      'memory',
      'code-runner',
      'firebase-mcp'
    ];
    
    servers.forEach(server => {
      log(`  - ${server}`, 'green');
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  showFullInfo() {
    log('\nüìä –ü–û–õ–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:', 'bright');
    log('–°–µ—Ä–≤–µ—Ä–æ–≤: 14', 'yellow');
    log('–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ~159', 'yellow');
    log('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ‚ö†Ô∏è –ú–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ', 'yellow');
    log('–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª–∏ –º–æ–≥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–∏—à–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', 'yellow');
    
    log('\n‚úÖ –í–ö–õ–Æ–ß–ï–ù–ù–´–ï –°–ï–†–í–ï–†–´:', 'green');
    const servers = [
      'filesystem (12 tools)',
      'sequential-thinking (1 tool)',
      'context7 (2 tools)',
      'playwright (24 tools)',
      'time',
      'memory',
      'sentry',
      'code-runner',
      'notion',
      'supabase',
      'wikipedia',
      'youtube',
      'firebase-mcp',
      'github-mcp'
    ];
    
    servers.forEach(server => {
      log(`  - ${server}`, 'green');
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  showCurrent() {
    if (fs.existsSync(this.configPath)) {
      const config = JSON.parse(fs.readFileSync(this.configPath, 'utf8'));
      const serverCount = Object.keys(config.mcpServers || {}).length;
      
      log('\nüìä –¢–ï–ö–£–©–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:', 'bright');
      log(`–°–µ—Ä–≤–µ—Ä–æ–≤: ${serverCount}`, 'cyan');
      
      if (serverCount <= 7) {
        log('–¢–∏–ø: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è (~40 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)', 'green');
        log('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 'green');
      } else {
        log('–¢–∏–ø: –ü–æ–ª–Ω–∞—è (~159 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)', 'yellow');
        log('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ‚ö†Ô∏è –ú–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 'yellow');
      }
    } else {
      log('‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'red');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
  showHelp() {
    log('\nüîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–¨ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô MCP', 'bright');
    log('–ü—Ä–æ–µ–∫—Ç: WorkInCZ', 'cyan');
    
    log('\nüìã –ö–û–ú–ê–ù–î–´:', 'cyan');
    log('  node switch-mcp-config.js optimized  - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é (7 —Å–µ—Ä–≤–µ—Ä–æ–≤)', 'blue');
    log('  node switch-mcp-config.js full       - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø–æ–ª–Ω—É—é (14 —Å–µ—Ä–≤–µ—Ä–æ–≤)', 'blue');
    log('  node switch-mcp-config.js current    - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é', 'blue');
    log('  node switch-mcp-config.js help       - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É', 'blue');
    
    log('\n‚ö†Ô∏è –í–ê–ñ–ù–û:', 'yellow');
    log('  - –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor', 'yellow');
    log('  - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', 'yellow');
    log('  - –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤', 'yellow');
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const switcher = new MCPConfigSwitcher();
  const command = process.argv[2] || 'help';

  switch (command) {
    case 'optimized':
      switcher.switchToOptimized();
      break;
    case 'full':
      switcher.switchToFull();
      break;
    case 'current':
      switcher.showCurrent();
      break;
    case 'help':
    default:
      switcher.showHelp();
      break;
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
}

module.exports = MCPConfigSwitcher; 