/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞, –≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ API-–∫–ª—é—á–µ–π Firebase
 */

const fs = require('fs');
const path = require('path');
const { promisify } = require('util');
const { execSync } = require('child_process');

const readdir = promisify(fs.readdir);
const stat = promisify(fs.stat);
const readFile = promisify(fs.readFile);
const writeFile = promisify(fs.writeFile);

// API-–∫–ª—é—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ - —Å—Ç–∞—Ä—ã–µ –∏ —Ç–µ–∫—É—â–∏–µ
const API_KEYS = [
  {
    value: "AIzaSyBQBIE0lphKrKyq40dGmv3zDACVnJL90Z0",
    isCurrent: true,
    description: "–¢–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π –∫–ª—é—á Firebase"
  },
  {
    value: "AIzaSyAo343vPwqrjwzjhd-d-qEKh7HqAAMsIiM",
    isCurrent: false,
    description: "–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–ª—é—á Firebase"
  }
];

// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ API-–∫–ª—é—á–µ–π Firebase
const FIREBASE_API_KEY_REGEX = /(?:firebaseConfig|apiKey|API_KEY).*['"]([A-Za-z0-9_-]{39})['"]|['"]([A-Za-z0-9_-]{39})['"].*(?:firebaseConfig|apiKey|API_KEY)/g;

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
const SEARCH_DIRS = ['public', 'src', 'public-backup-20250730-175739', 'public-backup-cleanup-20250730-181921', 'backup-20250730-1750', 'backup-refactoring-20250730-2000'];
const EXCLUDE_DIRS = ['node_modules', '.git', '.github/workflows', 'dist', 'build'];

// –§–∞–π–ª—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å —Å–∫—Ä–∏–ø—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
const EXCLUDE_FILES = ['security-check.js', 'fix-firebase-api-keys.js'];

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
const results = {
  files: {},
  summary: {
    totalFiles: 0,
    filesWithApiKeys: 0,
    totalApiKeysFound: 0,
    oldApiKeysFound: 0
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å –ø—É—Ç—å –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
function shouldExclude(filePath) {
  const normalizedPath = path.normalize(filePath).replace(/\\/g, '/');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  if (EXCLUDE_DIRS.some(dir => normalizedPath.includes(`/${dir}/`))) {
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
  const fileName = path.basename(normalizedPath);
  if (EXCLUDE_FILES.includes(fileName)) {
    return true;
  }
  
  return false;
}

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã
 */
async function getFiles(dir) {
  if (shouldExclude(dir)) {
    return [];
  }
  
  try {
    const items = await readdir(dir);
    
    const filePromises = items.map(async item => {
      const fullPath = path.join(dir, item);
      
      if (shouldExclude(fullPath)) {
        return [];
      }
      
      const stats = await stat(fullPath);
      
      if (stats.isDirectory()) {
        return getFiles(fullPath);
      } else {
        return [fullPath];
      }
    });
    
    const files = await Promise.all(filePromises);
    return files.flat();
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir}:`, error.message);
    return [];
  }
}

/**
 * –ò—â–µ—Ç API-–∫–ª—é—á–∏ Firebase –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
 */
async function searchApiKeysInFile(filePath) {
  try {
    const content = await readFile(filePath, 'utf8');
    results.summary.totalFiles++;
    
    // –ò—â–µ–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
    let match;
    let apiKeysInFile = [];
    
    while ((match = FIREBASE_API_KEY_REGEX.exec(content)) !== null) {
      const apiKey = match[1] || match[2];
      if (apiKey) {
        apiKeysInFile.push(apiKey);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ API-–∫–ª—é—á–∏
    for (const keyInfo of API_KEYS) {
      if (content.includes(keyInfo.value)) {
        if (!apiKeysInFile.includes(keyInfo.value)) {
          apiKeysInFile.push(keyInfo.value);
        }
      }
    }
    
    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã API-–∫–ª—é—á–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (apiKeysInFile.length > 0) {
      results.files[filePath] = {
        keys: apiKeysInFile.map(key => {
          const keyInfo = API_KEYS.find(info => info.value === key) || { 
            value: key, 
            isCurrent: false, 
            description: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π API-–∫–ª—é—á" 
          };
          
          return {
            value: key,
            isCurrent: keyInfo.isCurrent,
            description: keyInfo.description
          };
        })
      };
      
      results.summary.filesWithApiKeys++;
      results.summary.totalApiKeysFound += apiKeysInFile.length;
      
      // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ä—ã—Ö –∫–ª—é—á–µ–π
      results.summary.oldApiKeysFound += apiKeysInFile.filter(key => {
        const keyInfo = API_KEYS.find(info => info.value === key);
        return keyInfo && !keyInfo.isCurrent;
      }).length;
    }
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
 */
async function saveReport() {
  const reportPath = 'security-check-report.json';
  await writeFile(reportPath, JSON.stringify(results, null, 2), 'utf8');
  console.log(`üìù –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${reportPath}`);
}

/**
 * –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
 */
function printResults() {
  console.log('\n=== üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ===');
  console.log(`üìÅ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${results.summary.totalFiles}`);
  console.log(`üîë –§–∞–π–ª–æ–≤ —Å API-–∫–ª—é—á–∞–º–∏: ${results.summary.filesWithApiKeys}`);
  console.log(`üîë –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ API-–∫–ª—é—á–µ–π: ${results.summary.totalApiKeysFound}`);
  console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö API-–∫–ª—é—á–µ–π: ${results.summary.oldApiKeysFound}`);
  
  if (results.summary.filesWithApiKeys > 0) {
    console.log('\nüìÑ –§–∞–π–ª—ã —Å API-–∫–ª—é—á–∞–º–∏:');
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–ª—é—á–µ–π (—Å–Ω–∞—á–∞–ª–∞ —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ –∫–ª—é—á–∞–º–∏)
    const sortedFiles = Object.entries(results.files).sort((a, b) => {
      const aOldKeys = a[1].keys.filter(k => !k.isCurrent).length;
      const bOldKeys = b[1].keys.filter(k => !k.isCurrent).length;
      return bOldKeys - aOldKeys;
    });
    
    for (const [filePath, fileInfo] of sortedFiles) {
      const oldKeys = fileInfo.keys.filter(k => !k.isCurrent);
      const currentKeys = fileInfo.keys.filter(k => k.isCurrent);
      
      const status = oldKeys.length > 0 ? '‚ö†Ô∏è' : '‚úÖ';
      console.log(`${status} ${filePath}:`);
      
      if (oldKeys.length > 0) {
        console.log('   –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–ª—é—á–∏:');
        oldKeys.forEach(key => {
          console.log(`   - ${key.value.substring(0, 10)}...${key.value.substring(key.value.length - 5)} (${key.description})`);
        });
      }
      
      if (currentKeys.length > 0) {
        console.log('   –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏:');
        currentKeys.forEach(key => {
          console.log(`   - ${key.value.substring(0, 10)}...${key.value.substring(key.value.length - 5)} (${key.description})`);
        });
      }
      
      console.log('');
    }
  }
  
  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
  if (results.summary.oldApiKeysFound === 0) {
    console.log('\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ü–†–û–ô–î–ï–ù–ê: —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ API-–∫–ª—é—á–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã');
  } else {
    console.log(`\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${results.summary.oldApiKeysFound} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö API-–∫–ª—é—á–µ–π –≤ ${Object.entries(results.files).filter(([_, info]) => info.keys.some(k => !k.isCurrent)).length} —Ñ–∞–π–ª–∞—Ö`);
    console.log('   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–ª—é—á–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ');
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  try {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    const filePromises = SEARCH_DIRS.map(dir => getFiles(dir));
    const fileArrays = await Promise.all(filePromises);
    const allFiles = fileArrays.flat();
    
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${allFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ API-–∫–ª—é—á–µ–π
    await Promise.all(allFiles.map(searchApiKeysInFile));
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    printResults();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    await saveReport();
    
    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–ª—é—á–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –æ—à–∏–±–∫–æ–π
    if (results.summary.oldApiKeysFound > 0) {
      process.exit(1);
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
main();