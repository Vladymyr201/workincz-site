/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–º–µ–Ω—ã —Å—Ç–∞—Ä—ã—Ö Firebase API –∫–ª—é—á–µ–π.
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏—â–µ—Ç —Å—Ç–∞—Ä—ã–µ API –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª–∞—Ö –∏ –∑–∞–º–µ–Ω—è–µ—Ç –∏—Ö –Ω–∞ —Ç–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π –∫–ª—é—á.
 * –û–Ω —Ç–∞–∫–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/fix-firebase-api-keys.js
 */

const fs = require('fs');
const path = require('path');
const { promisify } = require('util');

const readdir = promisify(fs.readdir);
const stat = promisify(fs.stat);
const readFile = promisify(fs.readFile);
const writeFile = promisify(fs.writeFile);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const OLD_API_KEYS = [
  'AIzaSyAo343vPwqrjwzjhd-d-qEKh7HqAAMsIiM', // –°—Ç–∞—Ä—ã–π –∫–ª—é—á, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π –≤ –ª–æ–≥–∞—Ö
];

const CURRENT_API_KEY = 'AIzaSyBQBIE0lphKrKyq40dGmv3zDACVnJL90Z0'; // –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–ª—é—á –∏–∑ firebase-config.js

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const DIRS_TO_CHECK = [
  'public',
  'src'
];

// –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const FILE_EXTENSIONS = ['.html', '.js', '.jsx', '.ts', '.tsx', '.json'];

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
const results = {
  scannedFiles: 0,
  modifiedFiles: [],
  errors: []
};

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã
 */
async function getFiles(dir) {
  const subdirs = await readdir(dir);
  const files = await Promise.all(subdirs.map(async (subdir) => {
    const res = path.resolve(dir, subdir);
    return (await stat(res)).isDirectory() ? getFiles(res) : res;
  }));
  return files.flat();
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª
 */
function shouldProcessFile(filePath) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
  const ext = path.extname(filePath).toLowerCase();
  if (!FILE_EXTENSIONS.includes(ext)) {
    return false;
  }
  
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º node_modules, .git –∏ –¥—Ä—É–≥–∏–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  const skipDirs = ['node_modules', '.git', '.github', 'dist', 'build'];
  return !skipDirs.some(dir => filePath.includes(`${path.sep}${dir}${path.sep}`));
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–º–µ–Ω—è–µ—Ç API –∫–ª—é—á–∏
 */
async function processFile(filePath) {
  try {
    results.scannedFiles++;
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    let content = await readFile(filePath, 'utf8');
    let originalContent = content;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å—Ç–∞—Ä—ã–π –∫–ª—é—á
    for (const oldKey of OLD_API_KEYS) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–∞
      // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –Ω–∞–π—Ç–∏ –∫–ª—é—á –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –æ–±–µ—Ä–Ω—É—Ç –≤ –∫–∞–≤—ã—á–∫–∏ –∏–ª–∏ –∏–º–µ–µ—Ç –ø—Ä–æ–±–µ–ª—ã
      const keyRegex = new RegExp(oldKey, 'g');
      
      if (content.match(keyRegex)) {
        console.log(`üîë –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ ${filePath}`);
        content = content.replace(keyRegex, CURRENT_API_KEY);
      }
    }
    
    // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (content !== originalContent) {
      await writeFile(filePath, content, 'utf8');
      results.modifiedFiles.push({
        path: filePath,
        replacedKeys: OLD_API_KEYS.filter(key => originalContent.includes(key))
      });
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: ${filePath}`);
    }
  } catch (error) {
    results.errors.push({
      path: filePath,
      error: error.message
    });
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}: ${error.message}`);
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
 */
async function saveReport() {
  const report = {
    timestamp: new Date().toISOString(),
    results: {
      scannedFiles: results.scannedFiles,
      modifiedFiles: results.modifiedFiles,
      errorCount: results.errors.length
    },
    modifiedFiles: results.modifiedFiles,
    errors: results.errors
  };
  
  await writeFile('api-key-fix-report.json', JSON.stringify(report, null, 2), 'utf8');
  console.log(`üìù –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ api-key-fix-report.json`);
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  try {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∏ –∑–∞–º–µ–Ω—É —Å—Ç–∞—Ä—ã—Ö Firebase API –∫–ª—é—á–µ–π...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    const allFilesArrays = await Promise.all(DIRS_TO_CHECK.map(dir => getFiles(dir)));
    const allFiles = allFilesArrays.flat();
    
    // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
    const filesToProcess = allFiles.filter(shouldProcessFile);
    
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${filesToProcess.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    await Promise.all(filesToProcess.map(processFile));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    await saveReport();
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥
    console.log('\n=== üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ===');
    console.log(`üìÅ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${results.scannedFiles}`);
    console.log(`‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${results.modifiedFiles.length}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${results.errors.length}`);
    
    if (results.modifiedFiles.length > 0) {
      console.log('\nüìÑ –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:');
      results.modifiedFiles.forEach(file => {
        console.log(`   - ${file.path} (–∑–∞–º–µ–Ω–µ–Ω—ã –∫–ª—é—á–∏: ${file.replacedKeys.join(', ')})`);
      });
    }
    
    if (results.errors.length > 0) {
      console.log('\n‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤:');
      results.errors.forEach(err => {
        console.log(`   - ${err.path}: ${err.error}`);
      });
    }
  } catch (error) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(err => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
  process.exit(1);
});