#!/usr/bin/env node

/**
 * –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class AutoTestingSystem {
  constructor() {
    this.testResults = [];
    this.pendingConfirmation = false;
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
  async testCode(code, language = 'javascript') {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
      if (language === 'javascript') {
        const syntaxCheck = execSync(`node -c -e "${code}"`, { encoding: 'utf8' });
        this.testResults.push('‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å JavaScript –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
      }
      
      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ MCP
      const mcpResult = await this.callMCP('code-runner', 'run-code', { code, languageId: language });
      
      if (mcpResult && mcpResult.result) {
        this.testResults.push('‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫');
        return true;
      }
    } catch (error) {
      this.testResults.push(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`);
      return false;
    }
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
  async testFiles(filePaths) {
    console.log('üìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...');
    
    for (const filePath of filePaths) {
      try {
        if (fs.existsSync(filePath)) {
          const stats = fs.statSync(filePath);
          const content = fs.readFileSync(filePath, 'utf8');
          
          this.testResults.push(`‚úÖ –§–∞–π–ª ${filePath} —Å–æ–∑–¥–∞–Ω (${stats.size} –±–∞–π—Ç)`);
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
          if (content.length > 0) {
            this.testResults.push(`‚úÖ –§–∞–π–ª ${filePath} —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ`);
          } else {
            this.testResults.push(`‚ö†Ô∏è –§–∞–π–ª ${filePath} –ø—É—Å—Ç–æ–π`);
          }
        } else {
          this.testResults.push(`‚ùå –§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
      } catch (error) {
        this.testResults.push(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${filePath}: ${error.message}`);
      }
    }
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  async testConfiguration(configType) {
    console.log('‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    
    try {
      switch (configType) {
        case 'mcp':
          const mcpConfig = JSON.parse(fs.readFileSync('mcp.json', 'utf8'));
          if (mcpConfig.mcpServers && Object.keys(mcpConfig.mcpServers).length > 0) {
            this.testResults.push('‚úÖ MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
          }
          break;
          
        case 'firebase':
          if (fs.existsSync('firebase.json')) {
            this.testResults.push('‚úÖ Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞');
          }
          break;
          
        default:
          this.testResults.push('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
      }
    } catch (error) {
      this.testResults.push(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`);
    }
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ MCP
  async callMCP(serverName, method, params) {
    try {
      const command = `echo '{"jsonrpc": "2.0", "id": 1, "method": "tools/call", "params": {"name": "${method}", "arguments": ${JSON.stringify(params)}}}' | npx mcp-server-code-runner`;
      
      const result = execSync(command, { encoding: 'utf8' });
      return JSON.parse(result);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ MCP ${serverName}:`, error.message);
      return null;
    }
  }

  // –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  async runFullTesting(taskResults) {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    this.testResults = [];
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
    if (taskResults.code) {
      await this.testCode(taskResults.code, taskResults.language);
    }
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    if (taskResults.files && taskResults.files.length > 0) {
      await this.testFiles(taskResults.files);
    }
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (taskResults.config) {
      await this.testConfiguration(taskResults.config);
    }
    
    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    this.showTestResults();
    
    // –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    return this.requestConfirmation();
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  showTestResults() {
    console.log('\nüß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('='.repeat(50));
    
    this.testResults.forEach(result => {
      console.log(result);
    });
    
    const passedTests = this.testResults.filter(r => r.includes('‚úÖ')).length;
    const totalTests = this.testResults.length;
    
    console.log('='.repeat(50));
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
  }

  // –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  requestConfirmation() {
    console.log('\n‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ:');
    console.log('- "–¥–∞" - —Ñ–∏–∫—Å–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏');
    console.log('- "–Ω–µ—Ç" - –∏—Å–ø—Ä–∞–≤–ª—è—é –ø—Ä–æ–±–ª–µ–º—ã');
    console.log('- "—Ç–µ—Å—Ç" - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
    
    this.pendingConfirmation = true;
    return this.pendingConfirmation;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  handleUserResponse(response) {
    if (!this.pendingConfirmation) {
      return false;
    }
    
    this.pendingConfirmation = false;
    
    switch (response.toLowerCase()) {
      case '–¥–∞':
      case 'yes':
      case 'ok':
        console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –§–∏–∫—Å–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...');
        return this.fixResults();
        
      case '–Ω–µ—Ç':
      case 'no':
        console.log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã. –ò—Å–ø—Ä–∞–≤–ª—è—é...');
        return this.fixProblems();
        
      case '—Ç–µ—Å—Ç':
      case 'test':
        console.log('üß™ –ó–∞–ø—É—Å–∫–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...');
        return this.runAdditionalTests();
        
      default:
        console.log('‚ùì –ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ: –¥–∞/–Ω–µ—Ç/—Ç–µ—Å—Ç');
        this.pendingConfirmation = true;
        return false;
    }
  }

  // –§–∏–∫—Å–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  fixResults() {
    console.log('üìù –û–±–Ω–æ–≤–ª—è—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é...');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ PROJECT_KNOWLEDGE.md
    return true;
  }

  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
  fixProblems() {
    console.log('üîß –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–±–ª–µ–º—ã...');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
    return false;
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  runAdditionalTests() {
    console.log('üîç –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã...');
    // –ó–¥–µ—Å—å –±—É–¥—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    return false;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
module.exports = AutoTestingSystem;

// –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const tester = new AutoTestingSystem();
  
  // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  tester.runFullTesting({
    code: 'console.log("test");',
    files: ['test-file.js'],
    config: 'mcp'
  });
} 