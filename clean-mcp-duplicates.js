const fs = require('fs');
const path = require('path');

console.log('üßπ –û–ß–ò–°–¢–ö–ê –î–£–ë–õ–ï–ô MCP –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò...\n');

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–¥—É–±–ª–∏)
const filesToRemove = [
  'cursor-mcp-fixed.json',
  'cursor-mcp-config.json',
  'mcp.json',
  '.cursor/mcp-backup.json',
  '.cursor/mcp.json.backup.1753373162402',
  '.cursor/mcp.json.backup'
];

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
const filesToKeep = [
  'mcp-clean.json',
  '.cursor/mcp-optimized.json'
];

console.log('üìã –§–ê–ô–õ–´ –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø (–î–£–ë–õ–ò):');
filesToRemove.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚ùå ${file}`);
  }
});

console.log('\nüìã –§–ê–ô–õ–´ –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø:');
filesToKeep.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  }
});

// –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏
console.log('\nüóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –î–£–ë–õ–ï–ô...');
filesToRemove.forEach(file => {
  if (fs.existsSync(file)) {
    try {
      fs.unlinkSync(file);
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω: ${file}`);
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${file}: ${error.message}`);
    }
  }
});

// –ö–æ–ø–∏—Ä—É–µ–º –æ—á–∏—â–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Å—Ç–∞
console.log('\nüìÅ –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –û–ß–ò–©–ï–ù–ù–û–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò...');

if (fs.existsSync('mcp-clean.json')) {
  try {
    // –ö–æ–ø–∏—Ä—É–µ–º –≤ –∫–æ—Ä–µ–Ω—å –∫–∞–∫ mcp.json
    fs.copyFileSync('mcp-clean.json', 'mcp.json');
    console.log('‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤: mcp.json');
    
    // –ö–æ–ø–∏—Ä—É–µ–º –≤ .cursor/mcp.json
    fs.copyFileSync('mcp-clean.json', '.cursor/mcp.json');
    console.log('‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤: .cursor/mcp.json');
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
  }
}

console.log('\nüéØ –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
try {
  const config = JSON.parse(fs.readFileSync('mcp-clean.json', 'utf8'));
  const serverCount = Object.keys(config.mcpServers).length;
  console.log(`‚úÖ JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω`);
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä–æ–≤: ${serverCount}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–≤
  const serverNames = Object.keys(config.mcpServers);
  const uniqueNames = [...new Set(serverNames)];
  
  if (serverNames.length === uniqueNames.length) {
    console.log('‚úÖ –î—É–±–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
  } else {
    console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤');
  }
  
} catch (error) {
  console.log(`‚ùå –û—à–∏–±–∫–∞ JSON: ${error.message}`);
}

console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ß–ò–°–¢–ö–ò:');
console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${filesToRemove.length}`);
console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${filesToKeep.length}`);
console.log(`üßπ –û—á–∏—â–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: mcp-clean.json`);

console.log('\nüéâ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!');
console.log('üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
console.log('1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor');
console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MCP –≤ Settings');
console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: node test-mcp-servers.js'); 