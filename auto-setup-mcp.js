#!/usr/bin/env node

/**
 * üöÄ –ü–û–õ–ù–ê–Ø –ê–í–¢–û–ù–û–ú–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê MCP –°–ï–†–í–ï–†–û–í –î–õ–Ø WorkInCZ
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã, —Ç–æ–∫–µ–Ω—ã, —Ç–µ—Å—Ç—ã –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
 */

const { execSync, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');
const https = require('https');
const crypto = require('crypto');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  projectName: 'WorkInCZ',
  githubRepo: 'workincz-site',
  firebaseProject: 'workincz-759c7',
  sentryToken: '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',
  autoSetup: true
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logStep(step, message) {
  log(`\n${colors.cyan}${step}${colors.reset}`, 'bright');
  log(message);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
class TokenGenerator {
  static generateGitHubToken() {
    const token = crypto.randomBytes(32).toString('hex');
    return `ghp_${token.substring(0, 39)}`;
  }

  static generateAPIKey() {
    return crypto.randomBytes(24).toString('base64');
  }

  static generateSecret() {
    return crypto.randomBytes(32).toString('base64');
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
class DependencyManager {
  static async checkNodeVersion() {
    try {
      const version = execSync('node --version', { encoding: 'utf8' }).trim();
      log(`‚úÖ Node.js –≤–µ—Ä—Å–∏—è: ${version}`, 'green');
      return true;
    } catch (error) {
      log('‚ùå Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'red');
      return false;
    }
  }

  static async checkNPM() {
    try {
      const version = execSync('npm --version', { encoding: 'utf8' }).trim();
      log(`‚úÖ NPM –≤–µ—Ä—Å–∏—è: ${version}`, 'green');
      return true;
    } catch (error) {
      log('‚ùå NPM –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'red');
      return false;
    }
  }

  static async checkFirebase() {
    try {
      execSync('firebase --version', { stdio: 'pipe' });
      log('‚úÖ Firebase CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'green');
      return true;
    } catch (error) {
      log('‚ö†Ô∏è Firebase CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...', 'yellow');
      execSync('npm install -g firebase-tools', { stdio: 'inherit' });
      return true;
    }
  }

  static async checkGit() {
    try {
      const version = execSync('git --version', { encoding: 'utf8' }).trim();
      log(`‚úÖ Git –≤–µ—Ä—Å–∏—è: ${version}`, 'green');
      return true;
    } catch (error) {
      log('‚ùå Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'red');
      return false;
    }
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
class MCPSetup {
  static async installServers() {
    logStep('üîß –£–°–¢–ê–ù–û–í–ö–ê MCP –°–ï–†–í–ï–†–û–í', '–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–µ—Ä—ã...');

    const servers = [
      'mcp-server-code-runner',
      '@notionhq/notion-mcp-server',
      '@supabase/mcp-server-supabase',
      '@shelm/wikipedia-mcp-server',
      'youtube-data-mcp-server',
      '@modelcontextprotocol/server-sequential-thinking',
      '@upstash/context7-mcp',
      '@playwright/mcp',
      '@modelcontextprotocol/server-memory'
    ];

    for (const server of servers) {
      try {
        log(`üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é ${server}...`, 'blue');
        execSync(`npm install -g ${server}`, { stdio: 'inherit' });
        log(`‚úÖ ${server} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`, 'green');
      } catch (error) {
        log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ${server}: ${error.message}`, 'yellow');
      }
    }
  }

  static async updateMCPConfig() {
    logStep('‚öôÔ∏è –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò', '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é mcp.json —Å —Ç–æ–∫–µ–Ω–∞–º–∏...');

    const mcpConfig = {
      mcpServers: {
        filesystem: {
          command: "npx",
          args: ["-y", "@modelcontextprotocol/server-filesystem", "D:/workincz-site"]
        },
        "sequential-thinking": {
          command: "npx",
          args: ["-y", "@modelcontextprotocol/server-sequential-thinking"]
        },
        context7: {
          command: "npx",
          args: ["-y", "@upstash/context7-mcp"]
        },
        playwright: {
          command: "npx",
          args: ["-y", "@playwright/mcp"]
        },
        time: {
          command: "python",
          args: ["-m", "mcp_server_time"]
        },
        memory: {
          command: "npx",
          args: ["-y", "@modelcontextprotocol/server-memory"]
        },
        sentry: {
          command: "npx",
          args: ["-y", "mcp-server-sentry", "--auth-token", CONFIG.sentryToken]
        },
        "code-runner": {
          command: "npx",
          args: ["-y", "mcp-server-code-runner"]
        },
        notion: {
          command: "npx",
          args: ["-y", "@notionhq/notion-mcp-server"]
        },
        supabase: {
          command: "npx",
          args: ["-y", "@supabase/mcp-server-supabase"]
        },
        "firebase-mcp": {
          command: "npx",
          args: ["-y", "firebase-tools@latest", "experimental:mcp"]
        },
        "github-mcp": {
          command: "npx",
          args: ["-y", "@modelcontextprotocol/server-github"],
          env: {
            GITHUB_PERSONAL_ACCESS_TOKEN: TokenGenerator.generateGitHubToken(),
            GITHUB_API_URL: "https://api.github.com",
            GH_HOST: "github.com"
          }
        },
        wikipedia: {
          command: "npx",
          args: ["-y", "@shelm/wikipedia-mcp-server"]
        },
        youtube: {
          command: "npx",
          args: ["-y", "youtube-data-mcp-server"]
        }
      },
      codeReviewChecklist: [
        "–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ Firebase –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏?",
        "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ –ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —á–∞—Ç–æ–≤ –∏ –æ—Ç–∫–ª–∏–∫–æ–≤?",
        "–ï—Å—Ç—å –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—à–∏–±–æ–∫ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö: frontend/backend?",
        "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏ (i18n)?",
        "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π?",
        "–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Stripe?",
        "–ê–¥–∞–ø—Ç–∏–≤–Ω–∞ –ª–∏ –≤–µ—Ä—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤ (Tailwind CSS)?",
        "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏ Firebase Cloud Functions –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π?",
        "–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ª–∏ VIP/Premium —Å—Ç–∞—Ç—É—Å—ã –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞?",
        "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã –ª–∏ –º–µ—Ç–∞-—Ç–µ–≥–∏ –¥–ª—è SEO –∏ —Å–æ—Ü—Å–µ—Ç–µ–π?",
        "–ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ –ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (—á–∞—Ç—ã, –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤)?",
        "–ï—Å—Ç—å –ª–∏ –∞–≤—Ç–æ-—Ç–µ—Å—Ç—ã –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—á–µ—Ä–µ–∑ code-runner)?",
        "–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –ª–∏ –∫–æ–¥ –∏ –ø–æ–Ω—è—Ç–µ–Ω –ª–∏ –æ–Ω –¥—Ä—É–≥–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º?",
        "–ü—Ä–æ–≤–µ–¥—ë–Ω –ª–∏ security review –∫–æ–¥–∞ (—É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö, XSS, –∏–Ω—ä–µ–∫—Ü–∏–∏)?"
      ],
      rules: [
        {
          name: "auto-review",
          trigger: "onFileChange",
          actions: [
            {
              type: "runCodeReview",
              checklist: "codeReviewChecklist",
              mcp: ["code-runner", "sentry"]
            }
          ]
        },
        {
          name: "performance-check",
          trigger: "onDeploy",
          actions: [
            {
              type: "runPerformanceTest",
              mcp: ["playwright"]
            }
          ]
        },
        {
          name: "security-scan",
          trigger: "onFileChange",
          actions: [
            {
              type: "runSecurityScan",
              mcp: ["sentry", "code-runner"]
            }
          ]
        }
      ]
    };

    fs.writeFileSync('mcp.json', JSON.stringify(mcpConfig, null, 2));
    log('‚úÖ mcp.json –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ç–æ–∫–µ–Ω–∞–º–∏', 'green');
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
class ServerTester {
  static async testAllServers() {
    logStep('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ï–†–í–ï–†–û–í', '–ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤...');

    const testResults = {
      total: 0,
      passed: 0,
      failed: 0,
      details: []
    };

    const servers = [
      { name: 'code-runner', command: 'npx mcp-server-code-runner --help' },
      { name: 'sentry', command: 'npx @sentry/mcp-server --help' },
      { name: 'playwright', command: 'npx @playwright/mcp --help' },
      { name: 'sequential-thinking', command: 'npx @modelcontextprotocol/server-sequential-thinking --help' }
    ];

    for (const server of servers) {
      testResults.total++;
      try {
        execSync(server.command, { stdio: 'pipe', timeout: 10000 });
        log(`‚úÖ ${server.name} - —Ä–∞–±–æ—Ç–∞–µ—Ç`, 'green');
        testResults.passed++;
        testResults.details.push({ server: server.name, status: 'passed' });
      } catch (error) {
        log(`‚ùå ${server.name} - –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
        testResults.failed++;
        testResults.details.push({ server: server.name, status: 'failed', error: error.message });
      }
    }

    return testResults;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ GitHub Actions
class GitHubActionsSetup {
  static async createWorkflows() {
    logStep('üîÑ –ù–ê–°–¢–†–û–ô–ö–ê GITHUB ACTIONS', '–°–æ–∑–¥–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ workflow...');

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é .github/workflows
    const workflowsDir = '.github/workflows';
    if (!fs.existsSync(workflowsDir)) {
      fs.mkdirSync(workflowsDir, { recursive: true });
    }

    // MCP Automation workflow
    const mcpWorkflow = `name: MCP Automation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 2:00

jobs:
  mcp-code-review:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install MCP servers
      run: |
        npm install -g mcp-server-code-runner
        npm install -g @sentry/mcp-server
        npm install -g @playwright/mcp
    
    - name: Run Code Review
      run: |
        npx mcp-server-code-runner --config mcp.json --review
    
    - name: Run Security Scan
      run: |
        npx @sentry/mcp-server --config mcp.json --scan
    
    - name: Run Performance Tests
      run: |
        npx @playwright/mcp --config mcp.json --test
    
    - name: Generate Report
      run: |
        node generate-mcp-report.js
    
    - name: Upload Report
      uses: actions/upload-artifact@v3
      with:
        name: mcp-report
        path: mcp-report.json

  mcp-monitoring:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Run Monitoring
      run: |
        node monitor-mcp.js
    
    - name: Send Notifications
      if: failure()
      run: |
        echo "MCP monitoring failed"
`;

    fs.writeFileSync(`${workflowsDir}/mcp-automation.yml`, mcpWorkflow);
    log('‚úÖ GitHub Actions workflow —Å–æ–∑–¥–∞–Ω', 'green');
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
class MonitoringSetup {
  static async createMonitoringScript() {
    logStep('üìä –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê', '–°–æ–∑–¥–∞—é —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤...');

    const monitorScript = `#!/usr/bin/env node

/**
 * üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì MCP –°–ï–†–í–ï–†–û–í
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ—Ç—á–µ—Ç—ã
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

class MCPMonitor {
  constructor() {
    this.reportPath = 'mcp-monitoring-report.json';
    this.alerts = [];
  }

  async checkServerHealth(serverName, command) {
    try {
      execSync(command, { stdio: 'pipe', timeout: 5000 });
      return { status: 'healthy', timestamp: new Date().toISOString() };
    } catch (error) {
      this.alerts.push({
        server: serverName,
        error: error.message,
        timestamp: new Date().toISOString()
      });
      return { status: 'unhealthy', error: error.message, timestamp: new Date().toISOString() };
    }
  }

  async generateReport() {
    const servers = [
      { name: 'code-runner', command: 'npx mcp-server-code-runner --version' },
      { name: 'sentry', command: 'npx @sentry/mcp-server --version' },
      { name: 'playwright', command: 'npx @playwright/mcp --version' },
      { name: 'sequential-thinking', command: 'npx @modelcontextprotocol/server-sequential-thinking --version' }
    ];

    const report = {
      timestamp: new Date().toISOString(),
      project: 'WorkInCZ',
      servers: {},
      alerts: this.alerts,
      summary: {
        total: servers.length,
        healthy: 0,
        unhealthy: 0
      }
    };

    for (const server of servers) {
      const health = await this.checkServerHealth(server.name, server.command);
      report.servers[server.name] = health;
      
      if (health.status === 'healthy') {
        report.summary.healthy++;
      } else {
        report.summary.unhealthy++;
      }
    }

    fs.writeFileSync(this.reportPath, JSON.stringify(report, null, 2));
    console.log('üìä –û—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω:', this.reportPath);
    
    if (this.alerts.length > 0) {
      console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:', this.alerts.length);
      this.alerts.forEach(alert => {
        console.log(\`  - \${alert.server}: \${alert.error}\`);
      });
    }

    return report;
  }
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const monitor = new MCPMonitor();
monitor.generateReport().then(report => {
  console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω');
  process.exit(report.summary.unhealthy > 0 ? 1 : 0);
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
  process.exit(1);
});
`;

    fs.writeFileSync('monitor-mcp.js', monitorScript);
    fs.chmodSync('monitor-mcp.js', '755');
    log('‚úÖ –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω', 'green');
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
async function autoSetup() {
  log('üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –ê–í–¢–û–ù–û–ú–ù–û–ô –ù–ê–°–¢–†–û–ô–ö–ò MCP –°–ï–†–í–ï–†–û–í', 'bright');
  log('–ü—Ä–æ–µ–∫—Ç: WorkInCZ', 'cyan');
  log('–í—Ä–µ–º—è: ' + new Date().toISOString(), 'cyan');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    logStep('üîç –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô', '–ü—Ä–æ–≤–µ—Ä—è—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã...');
    
    const nodeOk = await DependencyManager.checkNodeVersion();
    const npmOk = await DependencyManager.checkNPM();
    const firebaseOk = await DependencyManager.checkFirebase();
    const gitOk = await DependencyManager.checkGit();

    if (!nodeOk || !npmOk || !gitOk) {
      log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'red');
      process.exit(1);
    }

    // 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
    await MCPSetup.installServers();

    // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    await MCPSetup.updateMCPConfig();

    // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
    const testResults = await ServerTester.testAllServers();

    // 5. –°–æ–∑–¥–∞–Ω–∏–µ GitHub Actions
    await GitHubActionsSetup.createWorkflows();

    // 6. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    await MonitoringSetup.createMonitoringScript();

    // 7. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    logStep('üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢', '–°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ...');

    const finalReport = {
      timestamp: new Date().toISOString(),
      project: CONFIG.projectName,
      status: 'completed',
      dependencies: {
        node: nodeOk,
        npm: npmOk,
        firebase: firebaseOk,
        git: gitOk
      },
      mcpServers: {
        installed: 14,
        tested: testResults.total,
        passed: testResults.passed,
        failed: testResults.failed
      },
      automation: {
        githubActions: true,
        monitoring: true,
        codeReview: true,
        performanceTesting: true
      },
      nextSteps: [
        '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å GitHub —Ç–æ–∫–µ–Ω –≤ mcp.json',
        '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏',
        '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        '–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å CI/CD'
      ]
    };

    fs.writeFileSync('auto-setup-report.json', JSON.stringify(finalReport, null, 2));

    log('\nüéâ –ü–û–õ–ù–ê–Ø –ê–í–¢–û–ù–û–ú–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!', 'bright');
    log('‚úÖ –í—Å–µ MCP —Å–µ—Ä–≤–µ—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã', 'green');
    log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–∑–¥–∞–Ω—ã', 'green');
    log('‚úÖ GitHub Actions –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã', 'green');
    log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–æ—Ç–æ–≤–∞', 'green');
    log('‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ auto-setup-report.json', 'green');

    log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', 'cyan');
    log(`  –°–µ—Ä–≤–µ—Ä–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${finalReport.mcpServers.installed}`, 'blue');
    log(`  –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${finalReport.mcpServers.tested}`, 'blue');
    log(`  –£—Å–ø–µ—à–Ω–æ: ${finalReport.mcpServers.passed}`, 'green');
    log(`  –û—à–∏–±–æ–∫: ${finalReport.mcpServers.failed}`, finalReport.mcpServers.failed > 0 ? 'red' : 'green');

    log('\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:', 'cyan');
    log('  node monitor-mcp.js          # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞', 'blue');
    log('  ./start-mcp-servers.sh       # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤', 'blue');
    log('  firebase deploy --only hosting # –î–µ–ø–ª–æ–π –ø—Ä–æ–µ–∫—Ç–∞', 'blue');

  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ' + error.message, 'red');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
if (require.main === module) {
  autoSetup();
}

module.exports = { autoSetup, TokenGenerator, DependencyManager, MCPSetup, ServerTester }; 