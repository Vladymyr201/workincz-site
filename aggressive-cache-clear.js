#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üî• –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ö–≠–®–ê CURSOR\n');

// –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö Cursor
const cursorPaths = [
  path.join(process.env.APPDATA, 'Cursor'),
  path.join(process.env.LOCALAPPDATA, 'Cursor'),
  path.join(process.env.USERPROFILE, '.cursor')
];

let clearedCount = 0;

console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö Cursor...\n');

cursorPaths.forEach(cursorPath => {
  try {
    if (fs.existsSync(cursorPath)) {
      console.log(`üìÅ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ Cursor: ${cursorPath}`);
      
      // –£–¥–∞–ª—è–µ–º –≤—Å—é –ø–∞–ø–∫—É Cursor
      try {
        fs.rmSync(cursorPath, { recursive: true, force: true });
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: ${cursorPath}`);
        clearedCount++;
      } catch (error) {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: ${cursorPath} - ${error.message}`);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø–æ —á–∞—Å—Ç—è–º
        try {
          const items = fs.readdirSync(cursorPath);
          items.forEach(item => {
            const itemPath = path.join(cursorPath, item);
            try {
              const stats = fs.statSync(itemPath);
              if (stats.isDirectory()) {
                fs.rmSync(itemPath, { recursive: true, force: true });
                console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–æ–¥–ø–∞–ø–∫–∞: ${itemPath}`);
                clearedCount++;
              } else {
                fs.unlinkSync(itemPath);
                console.log(`‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: ${itemPath}`);
                clearedCount++;
              }
            } catch (error) {
              console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç: ${itemPath} - ${error.message}`);
            }
          });
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á–∞—Å—Ç–∏—á–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏: ${cursorPath} - ${error.message}`);
        }
      }
    } else {
      console.log(`‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${cursorPath}`);
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫: ${cursorPath} - ${error.message}`);
  }
});

// –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ Cursor
console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');

try {
  const tempDir = process.env.TEMP;
  if (tempDir && fs.existsSync(tempDir)) {
    const tempItems = fs.readdirSync(tempDir);
    
    tempItems.forEach(item => {
      if (item.toLowerCase().includes('cursor') || 
          item.toLowerCase().includes('mcp') ||
          item.toLowerCase().includes('vscode')) {
        
        const tempPath = path.join(tempDir, item);
        try {
          const stats = fs.statSync(tempPath);
          
          if (stats.isDirectory()) {
            fs.rmSync(tempPath, { recursive: true, force: true });
            console.log(`‚úÖ –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥: ${tempPath}`);
            clearedCount++;
          } else {
            fs.unlinkSync(tempPath);
            console.log(`‚úÖ –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${tempPath}`);
            clearedCount++;
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        }
      }
    });
  }
} catch (error) {
  console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${error.message}`);
}

// –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
console.log('\nüìã –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤...');

const logPaths = [
  path.join(process.env.APPDATA, 'Cursor', 'logs'),
  path.join(process.env.LOCALAPPDATA, 'Cursor', 'logs')
];

logPaths.forEach(logPath => {
  try {
    if (fs.existsSync(logPath)) {
      const logItems = fs.readdirSync(logPath);
      
      logItems.forEach(item => {
        const logItemPath = path.join(logPath, item);
        try {
          const stats = fs.statSync(logItemPath);
          
          if (stats.isDirectory()) {
            fs.rmSync(logItemPath, { recursive: true, force: true });
            console.log(`‚úÖ –£–¥–∞–ª–µ–Ω –ª–æ–≥-–∫–∞—Ç–∞–ª–æ–≥: ${logItemPath}`);
            clearedCount++;
          } else {
            fs.unlinkSync(logItemPath);
            console.log(`‚úÖ –£–¥–∞–ª–µ–Ω –ª–æ–≥-—Ñ–∞–π–ª: ${logItemPath}`);
            clearedCount++;
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        }
      });
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: ${logPath} - ${error.message}`);
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
console.log('\nüìä –û–¢–ß–ï–¢ –û–ë –ê–ì–†–ï–°–°–ò–í–ù–û–ô –û–ß–ò–°–¢–ö–ï:');
console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø–∞–ø–æ–∫/—Ñ–∞–π–ª–æ–≤: ${clearedCount}`);

const report = {
  timestamp: new Date().toISOString(),
  clearedCount,
  cursorPaths,
  status: 'AGGRESSIVE_CACHE_CLEARED',
  warning: '–í–°–ï –î–ê–ù–ù–´–ï CURSOR –£–î–ê–õ–ï–ù–´!'
};

try {
  fs.writeFileSync('aggressive-cache-clear-report.json', JSON.stringify(report, null, 2));
  console.log('‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ aggressive-cache-clear-report.json');
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', error.message);
}

console.log('\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í–°–ï –î–ê–ù–ù–´–ï CURSOR –£–î–ê–õ–ï–ù–´!');
console.log('üéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
console.log('1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä');
console.log('2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Cursor –∑–∞–Ω–æ–≤–æ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)');
console.log('3. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –∑–∞–Ω–æ–≤–æ');
console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MCP (Ctrl + Shift + P ‚Üí "MCP: Open Settings")');
console.log('5. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FullAutoQA –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "1 tool enabled"');

console.log('\nüî• –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä.'); 