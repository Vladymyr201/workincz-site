// üíº –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º –≤–∞–∫–∞–Ω—Å–∏–π WorkInCZ
// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤–æ–π–Ω–æ–π –º–æ–¥–µ–ª–∏: –ø—Ä—è–º—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ + staffing requests

class JobPostingManager {
  constructor() {
    this.db = null;
    this.auth = null;
    this.currentUser = null;
    this.init();
  }

  async init() {
    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AuthManager
    if (window.authManager) {
      // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AuthManager
    if (window.authManager && !window.authManager.isInitialized) {
      let attempts = 0;
      const maxAttempts = 30;
      while (!window.authManager?.isInitialized && attempts < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, 100));
        attempts++;
      }
    }
      this.db = window.authManager.db;
      this.auth = window.authManager.auth;
      
      console.log('üî• JobPostingManager –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ AuthManager');
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      this.unsubscribeAuth = window.authManager.subscribe(async (user) => {
        this.currentUser = user;
        if (user) {
          console.log('üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É:', user.email);
          this.setupJobPostingForm();
        }
      });
    } else {
      console.log('üîß AuthManager –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Firebase');
      if (typeof firebase !== 'undefined') {
        this.db = firebase.firestore();
        this.auth = firebase.auth();
        
        this.auth.onAuthStateChanged(async (user) => {
          this.currentUser = user;
          if (user) {
            console.log('üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É:', user.email);
            this.setupJobPostingForm();
          }
        });
      }
    }
  }

  setupJobPostingForm() {
    // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!document.getElementById('jobPostingForm')) {
      this.createJobPostingForm();
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.setupEventListeners();
  }

  createJobPostingForm() {
    const formContainer = document.createElement('div');
    formContainer.id = 'jobPostingForm';
    formContainer.className = 'bg-white rounded-lg shadow-lg p-6 max-w-4xl mx-auto';
    formContainer.innerHTML = `
      <div class="mb-6">
        <h2 class="text-2xl font-bold text-gray-800 mb-4">–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é</h2>
        
        <!-- –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ -->
        <div class="mb-6">
          <label class="block text-sm font-medium text-gray-700 mb-3">–¢–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è *</label>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <label class="job-type-option border-2 border-primary rounded-lg p-4 cursor-pointer hover:border-primary transition-colors bg-primary/5" data-type="direct">
              <input type="radio" name="job_type" value="direct" class="sr-only" checked>
              <div class="text-center">
                <i class="ri-user-line text-3xl text-primary mb-2"></i>
                <h3 class="font-medium">–ü—Ä—è–º–∞—è –≤–∞–∫–∞–Ω—Å–∏—è</h3>
                <p class="text-sm text-gray-500 mt-1">–ù–∞–ø—Ä—è–º—É—é –∫ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è–º</p>
              </div>
            </label>
            <label class="job-type-option border-2 border-gray-300 rounded-lg p-4 cursor-pointer hover:border-primary transition-colors" data-type="staffing_request">
              <input type="radio" name="job_type" value="staffing_request" class="sr-only">
              <div class="text-center">
                <i class="ri-team-line text-3xl text-primary mb-2"></i>
                <h3 class="font-medium">–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª</h3>
                <p class="text-sm text-gray-500 mt-1">–ß–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞</p>
              </div>
            </label>
          </div>
        </div>

        <!-- –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700 mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ *</label>
            <input type="text" name="title" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary/20 focus:border-primary" required>
          </div>
          <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700 mb-2">–û–ø–∏—Å–∞–Ω–∏–µ *</label>
            <textarea name="description" rows="4" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary/20 focus:border-primary" required></textarea>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">–õ–æ–∫–∞—Ü–∏—è *</label>
            <select name="location" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary/20 focus:border-primary" required>
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥</option>
              <option value="Praha">–ü—Ä–∞–≥–∞</option>
              <option value="Brno">–ë—Ä–Ω–æ</option>
              <option value="Ostrava">–û—Å—Ç—Ä–∞–≤–∞</option>
              <option value="Plzen">–ü–ª—å–∑–µ–Ω—å</option>
              <option value="Liberec">–õ–∏–±–µ—Ä–µ—Ü</option>
              <option value="other">–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">–ó–∞—Ä–ø–ª–∞—Ç–∞ (CZK/–º–µ—Å—è—Ü)</label>
            <input type="number" name="salary" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary/20 focus:border-primary" placeholder="25000">
          </div>
        </div>

        <!-- –ü–æ–ª—è –¥–ª—è staffing requests -->
        <div id="staffingFields" class="hidden">
          <div class="border-t pt-4 mb-4">
            <h3 class="text-lg font-medium text-gray-800 mb-3">–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç (Kƒç)</label>
                <input type="number" name="budget_min" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary/20 focus:border-primary" placeholder="20000">
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç (Kƒç)</label>
                <input type="number" name="budget_max" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary/20 focus:border-primary" placeholder="50000">
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">–î–µ–¥–ª–∞–π–Ω</label>
                <input type="date" name="deadline" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary/20 focus:border-primary">
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤</label>
                <select name="candidates_count" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary/20 focus:border-primary">
                  <option value="1">1 –∫–∞–Ω–¥–∏–¥–∞—Ç</option>
                  <option value="3">3 –∫–∞–Ω–¥–∏–¥–∞—Ç–∞</option>
                  <option value="5">5 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤</option>
                  <option value="10">10 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤</option>
                </select>
              </div>
            </div>
          </div>
        </div>

        <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø—Ä—è–º—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π -->
        <div id="directFields">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏</label>
              <select name="employment_type" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary/20 focus:border-primary">
                <option value="full-time">–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å</option>
                <option value="part-time">–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å</option>
                <option value="contract">–ö–æ–Ω—Ç—Ä–∞–∫—Ç</option>
                <option value="freelance">–§—Ä–∏–ª–∞–Ω—Å</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã</label>
              <select name="experience" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary/20 focus:border-primary">
                <option value="no-experience">–ë–µ–∑ –æ–ø—ã—Ç–∞</option>
                <option value="1-year">–î–æ 1 –≥–æ–¥–∞</option>
                <option value="1-3-years">1-3 –≥–æ–¥–∞</option>
                <option value="3-5-years">3-5 –ª–µ—Ç</option>
                <option value="5-plus">–ë–æ–ª–µ–µ 5 –ª–µ—Ç</option>
              </select>
            </div>
          </div>
        </div>

        <!-- –ö–Ω–æ–ø–∫–∏ -->
        <div class="flex justify-end gap-3 pt-4 border-t">
          <button type="button" id="cancelJobPosting" class="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50">
            –û—Ç–º–µ–Ω–∞
          </button>
          <button type="submit" id="submitJobPosting" class="px-6 py-2 bg-primary text-white rounded-lg hover:bg-primary/90">
            –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é
          </button>
        </div>
      </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const mainContainer = document.querySelector('main') || document.body;
    mainContainer.appendChild(formContainer);
  }

  setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∏–ø–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
    document.querySelectorAll('input[name="job_type"]').forEach(radio => {
      radio.addEventListener('change', (e) => {
        this.handleJobTypeChange(e.target.value);
      });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –æ–ø—Ü–∏—è–º —Ç–∏–ø–∞
    document.querySelectorAll('.job-type-option').forEach(option => {
      option.addEventListener('click', () => {
        const radio = option.querySelector('input[type="radio"]');
        radio.checked = true;
        this.handleJobTypeChange(radio.value);
      });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    const form = document.getElementById('jobPostingForm');
    if (form) {
      form.addEventListener('submit', (e) => {
        e.preventDefault();
        this.handleSubmit(e);
      });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
    const cancelBtn = document.getElementById('cancelJobPosting');
    if (cancelBtn) {
      cancelBtn.addEventListener('click', () => {
        this.hideJobPostingForm();
      });
    }
  }

  handleJobTypeChange(jobType) {
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–∞–∫–∞–Ω—Å–∏–∏:', jobType);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    document.querySelectorAll('.job-type-option').forEach(option => {
      option.classList.remove('border-primary', 'bg-primary/5');
      option.classList.add('border-gray-300');
    });
    
    const selectedOption = document.querySelector(`[data-type="${jobType}"]`);
    if (selectedOption) {
      selectedOption.classList.remove('border-gray-300');
      selectedOption.classList.add('border-primary', 'bg-primary/5');
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª—è
    const staffingFields = document.getElementById('staffingFields');
    const directFields = document.getElementById('directFields');
    
    if (jobType === 'staffing_request') {
      staffingFields.classList.remove('hidden');
      directFields.classList.add('hidden');
    } else {
      staffingFields.classList.add('hidden');
      directFields.classList.remove('hidden');
    }
  }

  async handleSubmit(event) {
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –≤–∞–∫–∞–Ω—Å–∏–∏...');
    
    if (!this.currentUser) {
      alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
      return;
    }

    const formData = new FormData(event.target);
    const jobType = formData.get('job_type');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const submitBtn = document.getElementById('submitJobPosting');
    const originalText = submitBtn.textContent;
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<i class="ri-loader-4-line animate-spin mr-2"></i>–†–∞–∑–º–µ—â–∞–µ–º...';

    try {
      if (jobType === 'direct') {
        await this.createDirectJob(formData);
      } else {
        await this.createStaffingRequest(formData);
      }
      
      this.showSuccess('–í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞!');
      this.hideJobPostingForm();
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏:', error);
      this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏: ' + error.message);
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = originalText;
    }
  }

  async createDirectJob(formData) {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä—è–º–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏...');
    
    const jobData = {
      title: formData.get('title'),
      description: formData.get('description'),
      location: formData.get('location'),
      salary: parseInt(formData.get('salary')) || null,
      employment_type: formData.get('employment_type'),
      experience: formData.get('experience'),
      
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      job_type: 'direct',
      employer_id: this.currentUser.uid,
      status: 'active',
      is_featured: false,
      bids_count: 0,
      
      // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
      created_at: new Date(),
      updated_at: new Date()
    };

    const docRef = await this.db.collection('jobs').add(jobData);
    console.log('‚úÖ –ü—Ä—è–º–∞—è –≤–∞–∫–∞–Ω—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', docRef.id);
    
    // üî• Sentry: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    if (typeof Sentry !== 'undefined') {
      Sentry.captureMessage('Direct job created', {
        level: 'info',
        tags: {
          job_id: docRef.id,
          employer_id: this.currentUser.uid,
          job_type: 'direct'
        }
      });
    }
  }

  async createStaffingRequest(formData) {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª...');
    
    const requestData = {
      title: formData.get('title'),
      description: formData.get('description'),
      location: formData.get('location'),
      
      // –ë—é–¥–∂–µ—Ç –∏ —É—Å–ª–æ–≤–∏—è
      budget_range: {
        min: parseInt(formData.get('budget_min')) || null,
        max: parseInt(formData.get('budget_max')) || null
      },
      deadline: formData.get('deadline') ? new Date(formData.get('deadline')) : null,
      candidates_count: parseInt(formData.get('candidates_count')) || 3,
      
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      job_type: 'staffing_request',
      client_id: this.currentUser.uid,
      status: 'open',
      bids_count: 0,
      agencies_count: 0,
      
      // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
      created_at: new Date(),
      updated_at: new Date()
    };

    const docRef = await this.db.collection('jobs').add(requestData);
    console.log('‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª —Å–æ–∑–¥–∞–Ω–∞:', docRef.id);
    
    // üî• Sentry: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
    if (typeof Sentry !== 'undefined') {
      Sentry.captureMessage('Staffing request created', {
        level: 'info',
        tags: {
          job_id: docRef.id,
          client_id: this.currentUser.uid,
          job_type: 'staffing_request'
        }
      });
    }
  }

  showJobPostingForm() {
    const form = document.getElementById('jobPostingForm');
    if (form) {
      form.style.display = 'block';
    } else {
      this.createJobPostingForm();
      this.setupEventListeners();
    }
  }

  hideJobPostingForm() {
    const form = document.getElementById('jobPostingForm');
    if (form) {
      form.style.display = 'none';
    }
  }

  showSuccess(message) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    if (window.userProfileManager && window.userProfileManager.showToast) {
      window.userProfileManager.showToast(message, 'success');
    } else {
      alert(message);
    }
  }

  showError(message) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if (window.userProfileManager && window.userProfileManager.showToast) {
      window.userProfileManager.showToast(message, 'error');
    } else {
      alert(message);
    }
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  window.jobPostingManager = new JobPostingManager();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = JobPostingManager;
} 