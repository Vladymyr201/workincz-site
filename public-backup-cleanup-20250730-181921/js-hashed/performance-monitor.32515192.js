/**
 * –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
 */

class PerformanceMonitor {
    constructor() {
        this.metrics = {};
        this.thresholds = this.initializeThresholds();
        this.alerts = [];
        this.init();
    }

    init() {
        console.log('‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
        this.setupPerformanceObservers();
        this.startMonitoring();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    initializeThresholds() {
        return {
            pageLoad: {
                fast: 1000,      // < 1 —Å–µ–∫—É–Ω–¥—ã
                medium: 3000,    // 1-3 —Å–µ–∫—É–Ω–¥—ã
                slow: 5000       // > 5 —Å–µ–∫—É–Ω–¥
            },
            apiResponse: {
                fast: 200,       // < 200ms
                medium: 500,     // 200-500ms
                slow: 1000       // > 1 —Å–µ–∫—É–Ω–¥—ã
            },
            memoryUsage: {
                low: 50,         // < 50MB
                medium: 100,     // 50-100MB
                high: 200        // > 200MB
            },
            cpuUsage: {
                low: 10,         // < 10%
                medium: 30,      // 10-30%
                high: 50         // > 50%
            }
        };
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    setupPerformanceObservers() {
        // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        if ('performance' in window) {
            const navigationObserver = new PerformanceObserver((list) => {
                for (const entry of list.getEntries()) {
                    if (entry.entryType === 'navigation') {
                        this.analyzePageLoad(entry);
                    }
                }
            });
            navigationObserver.observe({ entryTypes: ['navigation'] });

            // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ —Ä–µ—Å—É—Ä—Å–∞–º–∏
            const resourceObserver = new PerformanceObserver((list) => {
                for (const entry of list.getEntries()) {
                    if (entry.entryType === 'resource') {
                        this.analyzeResourceLoad(entry);
                    }
                }
            });
            resourceObserver.observe({ entryTypes: ['resource'] });

            // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
            if ('longtask' in PerformanceObserver.supportedEntryTypes) {
                const longTaskObserver = new PerformanceObserver((list) => {
                    for (const entry of list.getEntries()) {
                        this.analyzeLongTask(entry);
                    }
                });
                longTaskObserver.observe({ entryTypes: ['longtask'] });
            }
        }

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
        this.monitorMemoryUsage();

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ CPU
        this.monitorCPUUsage();

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        this.monitorNetworkRequests();
    }

    // –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    analyzePageLoad(entry) {
        const metrics = {
            totalLoadTime: entry.loadEventEnd - entry.loadEventStart,
            domContentLoaded: entry.domContentLoadedEventEnd - entry.domContentLoadedEventStart,
            firstPaint: entry.firstPaint,
            firstContentfulPaint: entry.firstContentfulPaint,
            largestContentfulPaint: entry.largestContentfulPaint,
            timestamp: Date.now()
        };

        this.metrics.pageLoad = metrics;
        this.evaluatePageLoadPerformance(metrics);
    }

    // –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    evaluatePageLoadPerformance(metrics) {
        const loadTime = metrics.totalLoadTime;
        let performance = 'fast';

        if (loadTime > this.thresholds.pageLoad.slow) {
            performance = 'slow';
            this.triggerAlert('page_load_slow', `–ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${loadTime}ms`);
        } else if (loadTime > this.thresholds.pageLoad.medium) {
            performance = 'medium';
            this.triggerAlert('page_load_medium', `–°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${loadTime}ms`);
        }

        console.log(`üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${performance} (${loadTime}ms)`);
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        this.saveMetric('pageLoad', {
            loadTime,
            performance,
            timestamp: Date.now()
        });
    }

    // –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    analyzeResourceLoad(entry) {
        const resourceMetrics = {
            name: entry.name,
            type: entry.initiatorType,
            duration: entry.duration,
            size: entry.transferSize,
            timestamp: Date.now()
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        if (entry.duration > this.thresholds.apiResponse.slow) {
            this.triggerAlert('slow_resource', `–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å: ${entry.name} (${entry.duration}ms)`);
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–µ—Å—É—Ä—Å–∞
        this.saveMetric('resources', resourceMetrics);
    }

    // –ê–Ω–∞–ª–∏–∑ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
    analyzeLongTask(entry) {
        const longTaskMetrics = {
            duration: entry.duration,
            startTime: entry.startTime,
            timestamp: Date.now()
        };

        this.triggerAlert('long_task', `–î–ª–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞: ${entry.duration}ms`);
        this.saveMetric('longTasks', longTaskMetrics);
    }

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    monitorMemoryUsage() {
        if ('memory' in performance) {
            setInterval(() => {
                const memoryInfo = performance.memory;
                const usedMemory = memoryInfo.usedJSHeapSize / 1024 / 1024; // MB
                const totalMemory = memoryInfo.totalJSHeapSize / 1024 / 1024; // MB

                const memoryMetrics = {
                    used: usedMemory,
                    total: totalMemory,
                    percentage: (usedMemory / totalMemory) * 100,
                    timestamp: Date.now()
                };

                this.metrics.memory = memoryMetrics;
                this.evaluateMemoryUsage(memoryMetrics);
            }, 5000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        }
    }

    // –û—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    evaluateMemoryUsage(metrics) {
        const usedMemory = metrics.used;
        let status = 'low';

        if (usedMemory > this.thresholds.memoryUsage.high) {
            status = 'high';
            this.triggerAlert('memory_high', `–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${usedMemory.toFixed(2)}MB`);
        } else if (usedMemory > this.thresholds.memoryUsage.medium) {
            status = 'medium';
        }

        console.log(`üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${status} (${usedMemory.toFixed(2)}MB)`);
    }

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU
    monitorCPUUsage() {
        // –°–∏–º—É–ª—è—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ CPU (–≤ –±—Ä–∞—É–∑–µ—Ä–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø)
        setInterval(() => {
            const startTime = performance.now();
            
            // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è CPU
            setTimeout(() => {
                const endTime = performance.now();
                const cpuUsage = (endTime - startTime) / 100; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞

                const cpuMetrics = {
                    usage: cpuUsage,
                    timestamp: Date.now()
                };

                this.metrics.cpu = cpuMetrics;
                this.evaluateCPUUsage(cpuMetrics);
            }, 100);
        }, 10000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    }

    // –û—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU
    evaluateCPUUsage(metrics) {
        const cpuUsage = metrics.usage;
        let status = 'low';

        if (cpuUsage > this.thresholds.cpuUsage.high) {
            status = 'high';
            this.triggerAlert('cpu_high', `–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: ${cpuUsage.toFixed(2)}%`);
        } else if (cpuUsage > this.thresholds.cpuUsage.medium) {
            status = 'medium';
        }

        console.log(`üñ•Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: ${status} (${cpuUsage.toFixed(2)}%)`);
    }

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    monitorNetworkRequests() {
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç fetch –∑–∞–ø—Ä–æ—Å–æ–≤
        const originalFetch = window.fetch;
        window.fetch = async (...args) => {
            const startTime = performance.now();
            
            try {
                const response = await originalFetch(...args);
                const endTime = performance.now();
                const duration = endTime - startTime;

                this.analyzeNetworkRequest(args[0], duration, response.status);
                return response;
            } catch (error) {
                const endTime = performance.now();
                const duration = endTime - startTime;
                
                this.analyzeNetworkRequest(args[0], duration, 'error');
                throw error;
            }
        };

        // –ü–µ—Ä–µ—Ö–≤–∞—Ç XMLHttpRequest
        const originalXHROpen = XMLHttpRequest.prototype.open;
        const originalXHRSend = XMLHttpRequest.prototype.send;

        XMLHttpRequest.prototype.open = function(method, url, ...args) {
            this._startTime = performance.now();
            this._url = url;
            return originalXHROpen.call(this, method, url, ...args);
        };

        XMLHttpRequest.prototype.send = function(...args) {
            this.addEventListener('load', () => {
                const endTime = performance.now();
                const duration = endTime - this._startTime;
                this.analyzeNetworkRequest(this._url, duration, this.status);
            });

            this.addEventListener('error', () => {
                const endTime = performance.now();
                const duration = endTime - this._startTime;
                this.analyzeNetworkRequest(this._url, duration, 'error');
            });

            return originalXHRSend.call(this, ...args);
        };
    }

    // –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    analyzeNetworkRequest(url, duration, status) {
        const requestMetrics = {
            url: typeof url === 'string' ? url : url.toString(),
            duration,
            status,
            timestamp: Date.now()
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if (duration > this.thresholds.apiResponse.slow) {
            this.triggerAlert('slow_request', `–ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: ${url} (${duration}ms)`);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫
        if (status === 'error' || (typeof status === 'number' && status >= 400)) {
            this.triggerAlert('request_error', `–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${url} (${status})`);
        }

        this.saveMetric('networkRequests', requestMetrics);
    }

    // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    startMonitoring() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');

        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫
        setInterval(() => {
            this.collectMetrics();
        }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        setInterval(() => {
            this.cleanupOldData();
        }, 300000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    }

    // –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫
    collectMetrics() {
        const currentMetrics = {
            timestamp: Date.now(),
            pageLoad: this.metrics.pageLoad,
            memory: this.metrics.memory,
            cpu: this.metrics.cpu,
            resources: this.getResourceMetrics(),
            networkRequests: this.getNetworkMetrics()
        };

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
        this.saveMetricsToStorage(currentMetrics);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if (window.analyticsDashboard) {
            window.analyticsDashboard.updatePerformanceMetrics(currentMetrics);
        }

        console.log('üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–±—Ä–∞–Ω—ã');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
    getResourceMetrics() {
        const resources = this.metrics.resources || [];
        return {
            total: resources.length,
            slow: resources.filter(r => r.duration > this.thresholds.apiResponse.slow).length,
            averageDuration: resources.length > 0 ? 
                resources.reduce((sum, r) => sum + r.duration, 0) / resources.length : 0
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ç–∏
    getNetworkMetrics() {
        const requests = this.metrics.networkRequests || [];
        return {
            total: requests.length,
            errors: requests.filter(r => r.status === 'error' || r.status >= 400).length,
            averageDuration: requests.length > 0 ? 
                requests.reduce((sum, r) => sum + r.duration, 0) / requests.length : 0
        };
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    saveMetric(type, data) {
        if (!this.metrics[type]) {
            this.metrics[type] = [];
        }
        this.metrics[type].push(data);

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
        if (this.metrics[type].length > 100) {
            this.metrics[type] = this.metrics[type].slice(-50);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ localStorage
    saveMetricsToStorage(metrics) {
        const storageKey = 'performance_metrics';
        const existingMetrics = JSON.parse(localStorage.getItem(storageKey) || '[]');
        
        existingMetrics.push(metrics);
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –≤ localStorage
        if (existingMetrics.length > 100) {
            existingMetrics.splice(0, existingMetrics.length - 50);
        }
        
        localStorage.setItem(storageKey, JSON.stringify(existingMetrics));
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    cleanupOldData() {
        const oneHourAgo = Date.now() - (60 * 60 * 1000);
        
        Object.keys(this.metrics).forEach(key => {
            if (Array.isArray(this.metrics[key])) {
                this.metrics[key] = this.metrics[key].filter(item => 
                    item.timestamp > oneHourAgo
                );
            }
        });

        console.log('üßπ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—á–∏—â–µ–Ω—ã');
    }

    // –¢—Ä–∏–≥–≥–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    triggerAlert(type, message) {
        const alert = {
            type,
            message,
            timestamp: Date.now(),
            severity: this.getAlertSeverity(type)
        };

        this.alerts.push(alert);
        console.warn(`‚ö†Ô∏è –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${message}`);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Å–∏—Å—Ç–µ–º—É –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
        if (window.notificationSystem) {
            window.notificationSystem.sendAlert(alert);
        }

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
        if (this.alerts.length > 50) {
            this.alerts = this.alerts.slice(-25);
        }
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    getAlertSeverity(type) {
        const severityMap = {
            'page_load_slow': 'high',
            'slow_request': 'medium',
            'memory_high': 'high',
            'cpu_high': 'medium',
            'long_task': 'medium',
            'request_error': 'high'
        };
        return severityMap[type] || 'low';
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    getPerformanceReport() {
        const report = {
            timestamp: Date.now(),
            summary: {
                pageLoad: this.getPageLoadSummary(),
                memory: this.getMemorySummary(),
                cpu: this.getCPUSummary(),
                network: this.getNetworkSummary()
            },
            alerts: this.alerts.slice(-10), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
            recommendations: this.generateRecommendations()
        };

        return report;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    getPageLoadSummary() {
        const pageLoads = this.metrics.pageLoad || [];
        if (pageLoads.length === 0) return { average: 0, status: 'unknown' };

        const average = pageLoads.reduce((sum, p) => sum + p.loadTime, 0) / pageLoads.length;
        let status = 'fast';
        
        if (average > this.thresholds.pageLoad.slow) status = 'slow';
        else if (average > this.thresholds.pageLoad.medium) status = 'medium';

        return { average, status };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–∞–º—è—Ç–∏
    getMemorySummary() {
        const memory = this.metrics.memory;
        if (!memory) return { current: 0, status: 'unknown' };

        let status = 'low';
        if (memory.used > this.thresholds.memoryUsage.high) status = 'high';
        else if (memory.used > this.thresholds.memoryUsage.medium) status = 'medium';

        return { current: memory.used, status };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ CPU
    getCPUSummary() {
        const cpu = this.metrics.cpu;
        if (!cpu) return { current: 0, status: 'unknown' };

        let status = 'low';
        if (cpu.usage > this.thresholds.cpuUsage.high) status = 'high';
        else if (cpu.usage > this.thresholds.cpuUsage.medium) status = 'medium';

        return { current: cpu.usage, status };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å–µ—Ç–∏
    getNetworkSummary() {
        const requests = this.metrics.networkRequests || [];
        if (requests.length === 0) return { average: 0, errors: 0 };

        const average = requests.reduce((sum, r) => sum + r.duration, 0) / requests.length;
        const errors = requests.filter(r => r.status === 'error' || r.status >= 400).length;

        return { average, errors, total: requests.length };
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    generateRecommendations() {
        const recommendations = [];
        const summary = this.getPerformanceReport().summary;

        if (summary.pageLoad.status === 'slow') {
            recommendations.push({
                priority: 'high',
                title: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
                description: '–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è',
                action: 'optimize_page_load'
            });
        }

        if (summary.memory.status === 'high') {
            recommendations.push({
                priority: 'medium',
                title: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏',
                description: '–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                action: 'optimize_memory'
            });
        }

        if (summary.network.errors > 0) {
            recommendations.push({
                priority: 'high',
                title: '–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏',
                description: `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${summary.network.errors} –æ—à–∏–±–æ–∫ –≤ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö`,
                action: 'fix_network_errors'
            });
        }

        return recommendations;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    getStats() {
        return {
            metrics: this.metrics,
            alerts: this.alerts,
            thresholds: this.thresholds
        };
    }

    // –°–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫
    resetMetrics() {
        this.metrics = {};
        this.alerts = [];
        console.log('üîÑ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–±—Ä–æ—à–µ–Ω—ã');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const performanceMonitor = new PerformanceMonitor();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.PerformanceMonitor = PerformanceMonitor; 