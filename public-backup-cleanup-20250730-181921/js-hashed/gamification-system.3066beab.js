/**
 * –°–∏—Å—Ç–µ–º–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –±–µ–π–¥–∂–∏, –æ—á–∫–∏, –Ω–∞–≥—Ä–∞–¥—ã, —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
 */

class GamificationSystem {
    constructor() {
        this.userProfiles = new Map();
        this.achievements = new Map();
        this.badges = new Map();
        this.quests = new Map();
        this.leaderboards = new Map();
        this.rewards = new Map();
        this.events = new Map();
        this.userStats = new Map();
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    init() {
        this.loadData();
        this.initializeAchievements();
        this.initializeBadges();
        this.initializeQuests();
        this.initializeRewards();
        this.setupEventListeners();
        console.log('üéÆ –°–∏—Å—Ç–µ–º–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
     */
    loadData() {
        try {
            const savedProfiles = localStorage.getItem('gamificationProfiles');
            const savedStats = localStorage.getItem('gamificationStats');
            const savedEvents = localStorage.getItem('gamificationEvents');

            if (savedProfiles) this.userProfiles = new Map(JSON.parse(savedProfiles));
            if (savedStats) this.userStats = new Map(JSON.parse(savedStats));
            if (savedEvents) this.events = new Map(JSON.parse(savedEvents));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
     */
    saveData() {
        try {
            localStorage.setItem('gamificationProfiles', JSON.stringify(Array.from(this.userProfiles.entries())));
            localStorage.setItem('gamificationStats', JSON.stringify(Array.from(this.userStats.entries())));
            localStorage.setItem('gamificationEvents', JSON.stringify(Array.from(this.events.entries())));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    initializeAchievements() {
        const achievements = [
            {
                id: 'first-job-application',
                name: '–ü–µ—Ä–≤–∞—è –∑–∞—è–≤–∫–∞',
                description: '–ü–æ–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞–±–æ—Ç—É',
                icon: 'üìù',
                points: 50,
                category: 'applications',
                requirement: { type: 'applications', count: 1 }
            },
            {
                id: 'job-hunter',
                name: '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ —Ä–∞–±–æ—Ç–æ–π',
                description: '–ü–æ–¥–∞–π—Ç–µ 10 –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞–±–æ—Ç—É',
                icon: 'üéØ',
                points: 200,
                category: 'applications',
                requirement: { type: 'applications', count: 10 }
            },
            {
                id: 'profile-complete',
                name: '–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å',
                description: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ 100%',
                icon: 'üë§',
                points: 100,
                category: 'profile',
                requirement: { type: 'profile_completion', percentage: 100 }
            },
            {
                id: 'network-builder',
                name: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å —Å–µ—Ç–∏',
                description: '–î–æ–±–∞–≤—å—Ç–µ 5 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ —Å–µ—Ç—å',
                icon: 'üåê',
                points: 150,
                category: 'social',
                requirement: { type: 'contacts', count: 5 }
            },
            {
                id: 'skill-master',
                name: '–ú–∞—Å—Ç–µ—Ä –Ω–∞–≤—ã–∫–æ–≤',
                description: '–î–æ–±–∞–≤—å—Ç–µ 10 –Ω–∞–≤—ã–∫–æ–≤ –≤ –ø—Ä–æ—Ñ–∏–ª—å',
                icon: '‚ö°',
                points: 120,
                category: 'skills',
                requirement: { type: 'skills', count: 10 }
            },
            {
                id: 'message-king',
                name: '–ö–æ—Ä–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π',
                description: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π',
                icon: 'üí¨',
                points: 180,
                category: 'communication',
                requirement: { type: 'messages', count: 50 }
            },
            {
                id: 'recommendation-expert',
                name: '–≠–∫—Å–ø–µ—Ä—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
                description: '–ü–æ–ª—É—á–∏—Ç–µ 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π',
                icon: '‚≠ê',
                points: 300,
                category: 'reputation',
                requirement: { type: 'recommendations', count: 5 }
            },
            {
                id: 'interview-pro',
                name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª –∏–Ω—Ç–µ—Ä–≤—å—é',
                description: '–ü—Ä–æ–π–¥–∏—Ç–µ 3 –∏–Ω—Ç–µ—Ä–≤—å—é',
                icon: 'üé§',
                points: 250,
                category: 'interviews',
                requirement: { type: 'interviews', count: 3 }
            },
            {
                id: 'early-bird',
                name: '–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞',
                description: '–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
                icon: 'üåÖ',
                points: 100,
                category: 'activity',
                requirement: { type: 'consecutive_days', count: 7 }
            },
            {
                id: 'helpful-community',
                name: '–ü–æ–ª–µ–∑–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫',
                description: '–ü–æ–º–æ–≥–∏—Ç–µ 10 –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
                icon: 'ü§ù',
                points: 200,
                category: 'community',
                requirement: { type: 'help_others', count: 10 }
            }
        ];

        achievements.forEach(achievement => {
            this.achievements.set(achievement.id, achievement);
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–π–¥–∂–µ–π
     */
    initializeBadges() {
        const badges = [
            {
                id: 'newcomer',
                name: '–ù–æ–≤–∏—á–æ–∫',
                description: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ',
                icon: 'üÜï',
                rarity: 'common',
                requirement: { type: 'registration' }
            },
            {
                id: 'active-user',
                name: '–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                description: '–†–µ–≥—É–ª—è—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É',
                icon: 'üî•',
                rarity: 'uncommon',
                requirement: { type: 'activity_streak', days: 30 }
            },
            {
                id: 'job-finder',
                name: '–ò—Å–∫–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç—ã',
                description: '–ù–∞—à–µ–ª —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É',
                icon: 'üéâ',
                rarity: 'rare',
                requirement: { type: 'job_found' }
            },
            {
                id: 'mentor',
                name: '–ú–µ–Ω—Ç–æ—Ä',
                description: '–ü–æ–º–æ–≥ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
                icon: 'üë®‚Äçüè´',
                rarity: 'epic',
                requirement: { type: 'mentor_help', count: 20 }
            },
            {
                id: 'legend',
                name: '–õ–µ–≥–µ–Ω–¥–∞',
                description: '–î–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è',
                icon: 'üëë',
                rarity: 'legendary',
                requirement: { type: 'max_level' }
            }
        ];

        badges.forEach(badge => {
            this.badges.set(badge.id, badge);
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–≤–µ—Å—Ç–æ–≤
     */
    initializeQuests() {
        const quests = [
            {
                id: 'daily-login',
                name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥',
                description: '–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —Å–µ–≥–æ–¥–Ω—è',
                icon: 'üìÖ',
                points: 10,
                type: 'daily',
                requirement: { type: 'login', count: 1 },
                reward: { type: 'points', amount: 10 }
            },
            {
                id: 'apply-jobs',
                name: '–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫',
                description: '–ü–æ–¥–∞–π—Ç–µ 3 –∑–∞—è–≤–∫–∏ —Å–µ–≥–æ–¥–Ω—è',
                icon: 'üìù',
                points: 30,
                type: 'daily',
                requirement: { type: 'applications', count: 3 },
                reward: { type: 'points', amount: 30 }
            },
            {
                id: 'update-profile',
                name: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è',
                description: '–û–±–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
                icon: 'üë§',
                points: 20,
                type: 'weekly',
                requirement: { type: 'profile_update' },
                reward: { type: 'points', amount: 20 }
            },
            {
                id: 'connect-network',
                name: '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–µ—Ç–∏',
                description: '–î–æ–±–∞–≤—å—Ç–µ 2 –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞',
                icon: 'üåê',
                points: 25,
                type: 'weekly',
                requirement: { type: 'new_contacts', count: 2 },
                reward: { type: 'points', amount: 25 }
            },
            {
                id: 'skill-improvement',
                name: '–£–ª—É—á—à–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤',
                description: '–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫',
                icon: '‚ö°',
                points: 15,
                type: 'weekly',
                requirement: { type: 'new_skill' },
                reward: { type: 'points', amount: 15 }
            }
        ];

        quests.forEach(quest => {
            this.quests.set(quest.id, quest);
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≥—Ä–∞–¥
     */
    initializeRewards() {
        const rewards = [
            {
                id: 'premium-week',
                name: '–ù–µ–¥–µ–ª—è –ø—Ä–µ–º–∏—É–º',
                description: '7 –¥–Ω–µ–π –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø–∞',
                icon: '‚≠ê',
                cost: 500,
                type: 'premium',
                effect: { type: 'premium_access', duration: 7 }
            },
            {
                id: 'profile-boost',
                name: '–ë—É—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è',
                description: '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø–µ—Ä–≤—ã–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤',
                icon: 'üöÄ',
                cost: 200,
                type: 'boost',
                effect: { type: 'profile_boost', duration: 24 }
            },
            {
                id: 'extra-applications',
                name: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏',
                description: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∞—Ç—å 5 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞—è–≤–æ–∫',
                icon: 'üìã',
                cost: 150,
                type: 'feature',
                effect: { type: 'extra_applications', count: 5 }
            },
            {
                id: 'custom-badge',
                name: '–ö–∞—Å—Ç–æ–º–Ω—ã–π –±–µ–π–¥–∂',
                description: '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –±–µ–π–¥–∂',
                icon: 'üé®',
                cost: 1000,
                type: 'customization',
                effect: { type: 'custom_badge' }
            },
            {
                id: 'priority-support',
                name: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                description: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
                icon: 'üéØ',
                cost: 300,
                type: 'support',
                effect: { type: 'priority_support', duration: 30 }
            }
        ];

        rewards.forEach(reward => {
            this.rewards.set(reward.id, reward);
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getUserProfile(userId) {
        if (!this.userProfiles.has(userId)) {
            const profile = {
                userId,
                level: 1,
                experience: 0,
                points: 0,
                achievements: new Set(),
                badges: new Set(),
                completedQuests: new Set(),
                activeQuests: new Set(),
                rewards: new Set(),
                friends: new Set(),
                stats: {
                    applications: 0,
                    messages: 0,
                    profileViews: 0,
                    recommendations: 0,
                    interviews: 0,
                    consecutiveDays: 0,
                    lastLogin: null
                },
                createdAt: Date.now(),
                lastUpdated: Date.now()
            };
            this.userProfiles.set(userId, profile);
        }
        return this.userProfiles.get(userId);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getUserStats(userId) {
        if (!this.userStats.has(userId)) {
            const stats = {
                totalPoints: 0,
                totalAchievements: 0,
                totalBadges: 0,
                totalQuests: 0,
                level: 1,
                rank: 0,
                weeklyPoints: 0,
                monthlyPoints: 0,
                lastReset: Date.now()
            };
            this.userStats.set(userId, stats);
        }
        return this.userStats.get(userId);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    processAction(userId, actionType, actionData = {}) {
        const profile = this.getUserProfile(userId);
        const stats = this.getUserStats(userId);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.updateUserStats(profile, actionType, actionData);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        this.checkAchievements(userId, actionType, actionData);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–π–¥–∂–µ–π
        this.checkBadges(userId, actionType, actionData);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–µ—Å—Ç–æ–≤
        this.checkQuests(userId, actionType, actionData);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        this.updateLevel(userId);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
        this.updateLeaderboard(userId);

        this.saveData();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    updateUserStats(profile, actionType, actionData) {
        const stats = profile.stats;

        switch (actionType) {
            case 'application_submitted':
                stats.applications++;
                this.addPoints(profile.userId, 10);
                break;
            case 'message_sent':
                stats.messages++;
                this.addPoints(profile.userId, 5);
                break;
            case 'profile_viewed':
                stats.profileViews++;
                this.addPoints(profile.userId, 2);
                break;
            case 'recommendation_received':
                stats.recommendations++;
                this.addPoints(profile.userId, 25);
                break;
            case 'interview_completed':
                stats.interviews++;
                this.addPoints(profile.userId, 50);
                break;
            case 'daily_login':
                stats.consecutiveDays++;
                this.addPoints(profile.userId, 5);
                break;
            case 'profile_updated':
                this.addPoints(profile.userId, 15);
                break;
            case 'skill_added':
                this.addPoints(profile.userId, 8);
                break;
            case 'contact_added':
                this.addPoints(profile.userId, 12);
                break;
        }

        profile.lastUpdated = Date.now();
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    addPoints(userId, points) {
        const profile = this.getUserProfile(userId);
        const stats = this.getUserStats(userId);

        profile.points += points;
        profile.experience += points;
        stats.totalPoints += points;
        stats.weeklyPoints += points;
        stats.monthlyPoints += points;

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—á–∫–æ–≤
        this.showPointsNotification(points);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    checkAchievements(userId, actionType, actionData) {
        const profile = this.getUserProfile(userId);

        this.achievements.forEach(achievement => {
            if (profile.achievements.has(achievement.id)) return;

            if (this.isAchievementCompleted(profile, achievement, actionType, actionData)) {
                this.unlockAchievement(userId, achievement);
            }
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    isAchievementCompleted(profile, achievement, actionType, actionData) {
        const requirement = achievement.requirement;

        switch (requirement.type) {
            case 'applications':
                return profile.stats.applications >= requirement.count;
            case 'profile_completion':
                return this.getProfileCompletion(profile) >= requirement.percentage;
            case 'contacts':
                return profile.friends.size >= requirement.count;
            case 'skills':
                return profile.stats.skills >= requirement.count;
            case 'messages':
                return profile.stats.messages >= requirement.count;
            case 'recommendations':
                return profile.stats.recommendations >= requirement.count;
            case 'interviews':
                return profile.stats.interviews >= requirement.count;
            case 'consecutive_days':
                return profile.stats.consecutiveDays >= requirement.count;
            case 'help_others':
                return profile.stats.helpOthers >= requirement.count;
            default:
                return false;
        }
    }

    /**
     * –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    unlockAchievement(userId, achievement) {
        const profile = this.getUserProfile(userId);
        const stats = this.getUserStats(userId);

        profile.achievements.add(achievement.id);
        stats.totalAchievements++;

        this.addPoints(userId, achievement.points);

        // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
        this.showAchievementNotification(achievement);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        this.checkSpecialAchievements(userId);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–π–¥–∂–µ–π
     */
    checkBadges(userId, actionType, actionData) {
        const profile = this.getUserProfile(userId);

        this.badges.forEach(badge => {
            if (profile.badges.has(badge.id)) return;

            if (this.isBadgeEarned(profile, badge, actionType, actionData)) {
                this.unlockBadge(userId, badge);
            }
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ–π–¥–∂–∞
     */
    isBadgeEarned(profile, badge, actionType, actionData) {
        const requirement = badge.requirement;

        switch (requirement.type) {
            case 'registration':
                return true;
            case 'activity_streak':
                return profile.stats.consecutiveDays >= requirement.days;
            case 'job_found':
                return profile.stats.jobsFound > 0;
            case 'mentor_help':
                return profile.stats.helpOthers >= requirement.count;
            case 'max_level':
                return profile.level >= 100;
            default:
                return false;
        }
    }

    /**
     * –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±–µ–π–¥–∂–∞
     */
    unlockBadge(userId, badge) {
        const profile = this.getUserProfile(userId);
        const stats = this.getUserStats(userId);

        profile.badges.add(badge.id);
        stats.totalBadges++;

        // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ–π–¥–∂–µ
        this.showBadgeNotification(badge);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–µ—Å—Ç–æ–≤
     */
    checkQuests(userId, actionType, actionData) {
        const profile = this.getUserProfile(userId);

        this.quests.forEach(quest => {
            if (profile.completedQuests.has(quest.id)) return;

            if (this.isQuestCompleted(profile, quest, actionType, actionData)) {
                this.completeQuest(userId, quest);
            }
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
     */
    isQuestCompleted(profile, quest, actionType, actionData) {
        const requirement = quest.requirement;

        switch (requirement.type) {
            case 'login':
                return actionType === 'daily_login';
            case 'applications':
                return profile.stats.applications >= requirement.count;
            case 'profile_update':
                return actionType === 'profile_updated';
            case 'new_contacts':
                return profile.stats.newContacts >= requirement.count;
            case 'new_skill':
                return actionType === 'skill_added';
            default:
                return false;
        }
    }

    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
     */
    completeQuest(userId, quest) {
        const profile = this.getUserProfile(userId);
        const stats = this.getUserStats(userId);

        profile.completedQuests.add(quest.id);
        stats.totalQuests++;

        this.addPoints(userId, quest.points);

        // –í—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥—ã
        if (quest.reward) {
            this.giveReward(userId, quest.reward);
        }

        // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–≤–µ—Å—Ç–µ
        this.showQuestNotification(quest);
    }

    /**
     * –í—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥—ã
     */
    giveReward(userId, reward) {
        const profile = this.getUserProfile(userId);

        switch (reward.type) {
            case 'points':
                this.addPoints(userId, reward.amount);
                break;
            case 'premium_access':
                // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø–∞
                break;
            case 'profile_boost':
                // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±—É—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è
                break;
            case 'extra_applications':
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞—è–≤–æ–∫
                break;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    updateLevel(userId) {
        const profile = this.getUserProfile(userId);
        const newLevel = Math.floor(profile.experience / 100) + 1;

        if (newLevel > profile.level) {
            const oldLevel = profile.level;
            profile.level = newLevel;

            // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
            this.showLevelUpNotification(oldLevel, newLevel);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —É—Ä–æ–≤–Ω—è
            this.checkLevelAchievements(userId, newLevel);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
     */
    updateLeaderboard(userId) {
        const profile = this.getUserProfile(userId);
        const stats = this.getUserStats(userId);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.calculateUserRank(userId);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
        this.updateWeeklyLeaderboard(userId, stats.weeklyPoints);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—è—á–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
        this.updateMonthlyLeaderboard(userId, stats.monthlyPoints);
    }

    /**
     * –†–∞—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    calculateUserRank(userId) {
        const allUsers = Array.from(this.userProfiles.values())
            .sort((a, b) => b.points - a.points);

        const userIndex = allUsers.findIndex(user => user.userId === userId);
        const stats = this.getUserStats(userId);
        stats.rank = userIndex + 1;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
     */
    updateWeeklyLeaderboard(userId, points) {
        if (!this.leaderboards.has('weekly')) {
            this.leaderboards.set('weekly', new Map());
        }

        const weeklyBoard = this.leaderboards.get('weekly');
        weeklyBoard.set(userId, points);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—è—á–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
     */
    updateMonthlyLeaderboard(userId, points) {
        if (!this.leaderboards.has('monthly')) {
            this.leaderboards.set('monthly', new Map());
        }

        const monthlyBoard = this.leaderboards.get('monthly');
        monthlyBoard.set(userId, points);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
     */
    getLeaderboard(type = 'weekly', limit = 10) {
        if (!this.leaderboards.has(type)) {
            return [];
        }

        const board = this.leaderboards.get(type);
        return Array.from(board.entries())
            .sort((a, b) => b[1] - a[1])
            .slice(0, limit)
            .map(([userId, points], index) => ({
                rank: index + 1,
                userId,
                points,
                profile: this.getUserProfile(userId)
            }));
    }

    /**
     * –ü–æ–∫—É–ø–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã
     */
    buyReward(userId, rewardId) {
        const profile = this.getUserProfile(userId);
        const reward = this.rewards.get(rewardId);

        if (!reward) {
            console.error('–ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', rewardId);
            return false;
        }

        if (profile.points < reward.cost) {
            console.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–≥—Ä–∞–¥—ã');
            return false;
        }

        profile.points -= reward.cost;
        profile.rewards.add(rewardId);

        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –Ω–∞–≥—Ä–∞–¥—ã
        this.activateRewardEffect(userId, reward);

        this.saveData();
        return true;
    }

    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –Ω–∞–≥—Ä–∞–¥—ã
     */
    activateRewardEffect(userId, reward) {
        const effect = reward.effect;

        switch (effect.type) {
            case 'premium_access':
                this.activatePremiumAccess(userId, effect.duration);
                break;
            case 'profile_boost':
                this.activateProfileBoost(userId, effect.duration);
                break;
            case 'extra_applications':
                this.addExtraApplications(userId, effect.count);
                break;
            case 'custom_badge':
                this.createCustomBadge(userId);
                break;
            case 'priority_support':
                this.activatePrioritySupport(userId, effect.duration);
                break;
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—á–∫–æ–≤
     */
    showPointsNotification(points) {
        const notification = document.createElement('div');
        notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full';
        notification.innerHTML = `
            <div class="flex items-center">
                <span class="mr-2">üéØ</span>
                <span>+${points} –æ—á–∫–æ–≤</span>
            </div>
        `;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.classList.remove('translate-x-full');
        }, 100);

        setTimeout(() => {
            notification.classList.add('translate-x-full');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 2000);
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
     */
    showAchievementNotification(achievement) {
        const notification = document.createElement('div');
        notification.className = 'fixed top-4 right-4 bg-blue-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full';
        notification.innerHTML = `
            <div class="flex items-center">
                <span class="mr-2">üèÜ</span>
                <div>
                    <div class="font-semibold">${achievement.name}</div>
                    <div class="text-sm opacity-90">+${achievement.points} –æ—á–∫–æ–≤</div>
                </div>
            </div>
        `;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.classList.remove('translate-x-full');
        }, 100);

        setTimeout(() => {
            notification.classList.add('translate-x-full');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 4000);
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ–π–¥–∂–µ
     */
    showBadgeNotification(badge) {
        const notification = document.createElement('div');
        notification.className = 'fixed top-4 right-4 bg-purple-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full';
        notification.innerHTML = `
            <div class="flex items-center">
                <span class="mr-2">${badge.icon}</span>
                <div>
                    <div class="font-semibold">–ù–æ–≤—ã–π –±–µ–π–¥–∂: ${badge.name}</div>
                    <div class="text-sm opacity-90">${badge.description}</div>
                </div>
            </div>
        `;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.classList.remove('translate-x-full');
        }, 100);

        setTimeout(() => {
            notification.classList.add('translate-x-full');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 4000);
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–≤–µ—Å—Ç–µ
     */
    showQuestNotification(quest) {
        const notification = document.createElement('div');
        notification.className = 'fixed top-4 right-4 bg-yellow-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full';
        notification.innerHTML = `
            <div class="flex items-center">
                <span class="mr-2">üìã</span>
                <div>
                    <div class="font-semibold">–ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: ${quest.name}</div>
                    <div class="text-sm opacity-90">+${quest.points} –æ—á–∫–æ–≤</div>
                </div>
            </div>
        `;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.classList.remove('translate-x-full');
        }, 100);

        setTimeout(() => {
            notification.classList.add('translate-x-full');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 4000);
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
     */
    showLevelUpNotification(oldLevel, newLevel) {
        const notification = document.createElement('div');
        notification.className = 'fixed top-4 right-4 bg-orange-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full';
        notification.innerHTML = `
            <div class="flex items-center">
                <span class="mr-2">üöÄ</span>
                <div>
                    <div class="font-semibold">–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è!</div>
                    <div class="text-sm opacity-90">–£—Ä–æ–≤–µ–Ω—å ${oldLevel} ‚Üí ${newLevel}</div>
                </div>
            </div>
        `;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.classList.remove('translate-x-full');
        }, 100);

        setTimeout(() => {
            notification.classList.add('translate-x-full');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 4000);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        document.addEventListener('gamificationAction', (e) => {
            const { userId, actionType, actionData } = e.detail;
            this.processAction(userId, actionType, actionData);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–∞–≥—Ä–∞–¥
        document.addEventListener('buyReward', (e) => {
            const { userId, rewardId } = e.detail;
            this.buyReward(userId, rewardId);
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
     */
    getSystemStats() {
        return {
            totalUsers: this.userProfiles.size,
            totalAchievements: this.achievements.size,
            totalBadges: this.badges.size,
            totalQuests: this.quests.size,
            totalRewards: this.rewards.size,
            activeEvents: this.events.size
        };
    }

    /**
     * –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
     */
    enableTestMode() {
        console.log('üß™ –í–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏');
        
        const testUserId = 'test-user-1';
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        const profile = this.getUserProfile(testUserId);
        
        // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        const testActions = [
            { actionType: 'application_submitted', actionData: {} },
            { actionType: 'message_sent', actionData: {} },
            { actionType: 'profile_updated', actionData: {} },
            { actionType: 'skill_added', actionData: {} },
            { actionType: 'daily_login', actionData: {} }
        ];

        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        testActions.forEach((action, index) => {
            setTimeout(() => {
                this.processAction(testUserId, action.actionType, action.actionData);
            }, index * 2000);
        });

        return {
            profile: this.getUserProfile(testUserId),
            stats: this.getUserStats(testUserId),
            systemStats: this.getSystemStats()
        };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.GamificationSystem = GamificationSystem; 