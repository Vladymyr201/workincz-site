/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
 */

class MarketingTestingSuite {
    constructor() {
        this.testResults = {};
        this.monitoringData = {};
        this.demoData = this.generateDemoData();
        this.init();
    }

    init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
        this.setupEventListeners();
        this.startMonitoring();
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    generateDemoData() {
        return {
            users: [
                { id: 'demo_user_1', email: 'test1@example.com', role: 'jobseeker', location: 'Prague' },
                { id: 'demo_user_2', email: 'test2@example.com', role: 'employer', location: 'Brno' },
                { id: 'demo_user_3', email: 'test3@example.com', role: 'agency', location: 'Ostrava' }
            ],
            jobs: [
                { id: 'demo_job_1', title: 'Frontend Developer', company: 'TechCorp', location: 'Prague', salary: '50000 CZK' },
                { id: 'demo_job_2', title: 'UX Designer', company: 'DesignStudio', location: 'Brno', salary: '45000 CZK' },
                { id: 'demo_job_3', title: 'Project Manager', company: 'StartupInc', location: 'Ostrava', salary: '60000 CZK' }
            ],
            experiments: [
                { id: 'exp_1', name: 'Landing Page CTA', variations: ['primary', 'secondary'], metric: 'conversion_rate' },
                { id: 'exp_2', name: 'Pricing Display', variations: ['monthly', 'annual'], metric: 'subscription_rate' },
                { id: 'exp_3', name: 'Job Card Layout', variations: ['compact', 'detailed'], metric: 'click_rate' }
            ]
        };
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        document.addEventListener('DOMContentLoaded', () => {
            this.runAllTests();
        });

        // –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        window.addEventListener('beforeunload', () => {
            this.saveMonitoringData();
        });
    }

    // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    async runAllTests() {
        console.log('üß™ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
        
        const tests = [
            this.testReferralSystem.bind(this),
            this.testEmailMarketing.bind(this),
            this.testABTesting.bind(this),
            this.testExternalAnalytics.bind(this),
            this.testOptimizationEngine.bind(this),
            this.testConversionAnalytics.bind(this)
        ];

        for (const test of tests) {
            try {
                await test();
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${error.message}`);
                this.recordTestResult(test.name, false, error.message);
            }
        }

        this.generateTestReport();
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    async testReferralSystem() {
        console.log('üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');
        
        const testCases = [
            {
                name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞',
                test: () => {
                    const code = this.generateReferralCode('test_user');
                    return code && code.length === 8;
                }
            },
            {
                name: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤',
                test: () => {
                    const tracking = this.trackReferralVisit('TEST123', 'new_user');
                    return tracking.success && tracking.referrerId === 'test_user';
                }
            },
            {
                name: '–†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–æ–≤',
                test: () => {
                    const bonus = this.calculateReferralBonus('premium_subscription');
                    return bonus > 0 && bonus <= 1000;
                }
            }
        ];

        for (const testCase of testCases) {
            const result = testCase.test();
            this.recordTestResult(`referral_${testCase.name}`, result);
        }
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞
    async testEmailMarketing() {
        console.log('üìß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞...');
        
        const testCases = [
            {
                name: '–°–æ–∑–¥–∞–Ω–∏–µ email-—à–∞–±–ª–æ–Ω–∞',
                test: () => {
                    const template = this.createEmailTemplate('welcome', { name: 'Test User' });
                    return template && template.includes('Test User');
                }
            },
            {
                name: '–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                test: () => {
                    const segments = this.segmentUsers(this.demoData.users);
                    return segments.jobseekers.length > 0 && segments.employers.length > 0;
                }
            },
            {
                name: '–û—Ç–ø—Ä–∞–≤–∫–∞ email-–∫–∞–º–ø–∞–Ω–∏–∏',
                test: () => {
                    const campaign = this.sendEmailCampaign('welcome', this.demoData.users.slice(0, 2));
                    return campaign.sent === 2 && campaign.success;
                }
            }
        ];

        for (const testCase of testCases) {
            const result = testCase.test();
            this.recordTestResult(`email_${testCase.name}`, result);
        }
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    async testABTesting() {
        console.log('üî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
        
        const testCases = [
            {
                name: '–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞',
                test: () => {
                    const experiment = this.createExperiment('test_exp', ['A', 'B'], 'conversion');
                    return experiment.id && experiment.variations.length === 2;
                }
            },
            {
                name: '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
                test: () => {
                    const variation = this.assignVariation('test_exp', 'user_123');
                    return ['A', 'B'].includes(variation);
                }
            },
            {
                name: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–π',
                test: () => {
                    const tracking = this.trackConversion('test_exp', 'user_123', 'A');
                    return tracking.success && tracking.experimentId === 'test_exp';
                }
            }
        ];

        for (const testCase of testCases) {
            const result = testCase.test();
            this.recordTestResult(`ab_test_${testCase.name}`, result);
        }
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫
    async testExternalAnalytics() {
        console.log('üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫...');
        
        const testCases = [
            {
                name: 'Google Analytics 4',
                test: () => {
                    const ga4Event = this.trackGA4Event('page_view', { page_title: 'Test Page' });
                    return ga4Event.success;
                }
            },
            {
                name: 'Facebook Pixel',
                test: () => {
                    const fbEvent = this.trackFacebookEvent('Purchase', { value: 100, currency: 'CZK' });
                    return fbEvent.success;
                }
            },
            {
                name: 'Yandex.Metrica',
                test: () => {
                    const ymEvent = this.trackYandexEvent('reachGoal', { target: 'registration' });
                    return ymEvent.success;
                }
            }
        ];

        for (const testCase of testCases) {
            const result = testCase.test();
            this.recordTestResult(`analytics_${testCase.name}`, result);
        }
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞
    async testOptimizationEngine() {
        console.log('‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞...');
        
        const testCases = [
            {
                name: '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö',
                test: () => {
                    const analysis = this.analyzeData(this.demoData);
                    return analysis.insights && analysis.insights.length > 0;
                }
            },
            {
                name: '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏',
                test: () => {
                    const optimization = this.applyOptimizationRule('cta_color', 'blue');
                    return optimization.success && optimization.element;
                }
            },
            {
                name: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
                test: () => {
                    const autoOpt = this.autoOptimize(['cta_text', 'pricing_display']);
                    return autoOpt.optimizations && autoOpt.optimizations.length > 0;
                }
            }
        ];

        for (const testCase of testCases) {
            const result = testCase.test();
            this.recordTestResult(`optimization_${testCase.name}`, result);
        }
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–π
    async testConversionAnalytics() {
        console.log('üìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–π...');
        
        const testCases = [
            {
                name: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π',
                test: () => {
                    const event = this.trackUserEvent('registration_completed', { source: 'landing_page' });
                    return event.success && event.timestamp;
                }
            },
            {
                name: '–ê–Ω–∞–ª–∏–∑ –≤–æ—Ä–æ–Ω–∫–∏',
                test: () => {
                    const funnel = this.analyzeFunnel(['view', 'click', 'register', 'complete']);
                    return funnel.steps && funnel.conversionRate > 0;
                }
            },
            {
                name: '–û—Ç—á–µ—Ç –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Ç—Ä–∞—Ñ–∏–∫–∞',
                test: () => {
                    const sources = this.analyzeTrafficSources();
                    return sources.organic && sources.direct && sources.referral;
                }
            }
        ];

        for (const testCase of testCases) {
            const result = testCase.test();
            this.recordTestResult(`conversion_${testCase.name}`, result);
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    generateReferralCode(userId) {
        return Math.random().toString(36).substring(2, 10).toUpperCase();
    }

    trackReferralVisit(code, userId) {
        return { success: true, referrerId: 'test_user', code, userId };
    }

    calculateReferralBonus(action) {
        const bonuses = { premium_subscription: 500, job_posting: 100, registration: 50 };
        return bonuses[action] || 0;
    }

    createEmailTemplate(type, data) {
        const templates = {
            welcome: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${data.name}!`,
            job_alert: `–ù–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è ${data.name}`,
            newsletter: `–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è ${data.name}`
        };
        return templates[type] || 'Default template';
    }

    segmentUsers(users) {
        return {
            jobseekers: users.filter(u => u.role === 'jobseeker'),
            employers: users.filter(u => u.role === 'employer'),
            agencies: users.filter(u => u.role === 'agency')
        };
    }

    sendEmailCampaign(template, users) {
        return { sent: users.length, success: true, template };
    }

    createExperiment(id, variations, metric) {
        return { id, variations, metric, status: 'active' };
    }

    assignVariation(experimentId, userId) {
        const variations = ['A', 'B'];
        return variations[Math.floor(Math.random() * variations.length)];
    }

    trackConversion(experimentId, userId, variation) {
        return { success: true, experimentId, userId, variation, timestamp: Date.now() };
    }

    trackGA4Event(eventName, parameters) {
        return { success: true, event: eventName, parameters };
    }

    trackFacebookEvent(eventName, parameters) {
        return { success: true, event: eventName, parameters };
    }

    trackYandexEvent(eventName, parameters) {
        return { success: true, event: eventName, parameters };
    }

    analyzeData(data) {
        return {
            insights: [
                { type: 'user_engagement', value: 0.75 },
                { type: 'conversion_rate', value: 0.12 },
                { type: 'retention_rate', value: 0.68 }
            ]
        };
    }

    applyOptimizationRule(element, value) {
        return { success: true, element, value, applied: true };
    }

    autoOptimize(elements) {
        return {
            optimizations: elements.map(el => ({ element: el, optimization: 'applied' }))
        };
    }

    trackUserEvent(eventName, parameters) {
        return { success: true, eventName, parameters, timestamp: Date.now() };
    }

    analyzeFunnel(steps) {
        return { steps, conversionRate: 0.15, dropoffs: [0.1, 0.2, 0.3] };
    }

    analyzeTrafficSources() {
        return { organic: 0.4, direct: 0.3, referral: 0.2, social: 0.1 };
    }

    // –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
    recordTestResult(testName, passed, error = null) {
        this.testResults[testName] = {
            passed,
            error,
            timestamp: Date.now()
        };
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    generateTestReport() {
        const totalTests = Object.keys(this.testResults).length;
        const passedTests = Object.values(this.testResults).filter(r => r.passed).length;
        const failedTests = totalTests - passedTests;
        const successRate = (passedTests / totalTests * 100).toFixed(1);

        console.log('üìã –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í');
        console.log('=' .repeat(60));
        console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`);
        console.log(`–£—Å–ø–µ—à–Ω—ã—Ö: ${passedTests}`);
        console.log(`–ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failedTests}`);
        console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${successRate}%`);
        console.log('=' .repeat(60));

        // –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–µ—Å—Ç—É
        Object.entries(this.testResults).forEach(([testName, result]) => {
            const status = result.passed ? '‚úÖ' : '‚ùå';
            console.log(`${status} ${testName}: ${result.passed ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù'}`);
            if (result.error) {
                console.log(`   –û—à–∏–±–∫–∞: ${result.error}`);
            }
        });

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        this.saveTestReport();
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    saveTestReport() {
        const report = {
            timestamp: Date.now(),
            summary: {
                total: Object.keys(this.testResults).length,
                passed: Object.values(this.testResults).filter(r => r.passed).length,
                failed: Object.values(this.testResults).filter(r => !r.passed).length
            },
            details: this.testResults,
            monitoring: this.monitoringData
        };

        localStorage.setItem('marketing_test_report', JSON.stringify(report));
        console.log('üíæ –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
    }

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    startMonitoring() {
        console.log('üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.monitorPerformance();
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫
        this.monitorErrors();
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
        this.monitorUserEvents();
    }

    monitorPerformance() {
        if ('performance' in window) {
            const observer = new PerformanceObserver((list) => {
                for (const entry of list.getEntries()) {
                    if (entry.entryType === 'navigation') {
                        this.monitoringData.pageLoadTime = entry.loadEventEnd - entry.loadEventStart;
                    }
                }
            });
            observer.observe({ entryTypes: ['navigation'] });
        }
    }

    monitorErrors() {
        window.addEventListener('error', (event) => {
            this.monitoringData.errors = this.monitoringData.errors || [];
            this.monitoringData.errors.push({
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                timestamp: Date.now()
            });
        });
    }

    monitorUserEvents() {
        const events = ['click', 'scroll', 'input', 'submit'];
        events.forEach(eventType => {
            document.addEventListener(eventType, (event) => {
                this.monitoringData.userEvents = this.monitoringData.userEvents || [];
                this.monitoringData.userEvents.push({
                    type: eventType,
                    target: event.target.tagName,
                    timestamp: Date.now()
                });
            });
        });
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    saveMonitoringData() {
        if (Object.keys(this.monitoringData).length > 0) {
            localStorage.setItem('marketing_monitoring_data', JSON.stringify(this.monitoringData));
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    getMonitoringStats() {
        const stats = {
            errors: this.monitoringData.errors?.length || 0,
            userEvents: this.monitoringData.userEvents?.length || 0,
            pageLoadTime: this.monitoringData.pageLoadTime || 0
        };

        console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', stats);
        return stats;
    }

    // –ó–∞–ø—É—Å–∫ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
    runDemoMode() {
        console.log('üé≠ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
        
        // –î–µ–º–æ A/B —Ç–µ—Å—Ç–æ–≤
        this.demoData.experiments.forEach(exp => {
            console.log(`üî¨ –î–µ–º–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: ${exp.name}`);
            exp.variations.forEach(variation => {
                console.log(`   –í–∞—Ä–∏–∞–Ω—Ç: ${variation}`);
            });
        });

        // –î–µ–º–æ email-–∫–∞–º–ø–∞–Ω–∏–π
        const demoCampaigns = [
            { name: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ', template: 'welcome', users: 150 },
            { name: '–ù–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏', template: 'job_alert', users: 89 },
            { name: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞', template: 'newsletter', users: 234 }
        ];

        demoCampaigns.forEach(campaign => {
            console.log(`üìß –î–µ–º–æ –∫–∞–º–ø–∞–Ω–∏—è: ${campaign.name} (${campaign.users} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)`);
        });

        // –î–µ–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
        console.log('üîó –î–µ–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:');
        console.log('   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: 45');
        console.log('   –í—ã–ø–ª–∞—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: 12,500 CZK');
        console.log('   –ö–æ–Ω–≤–µ—Ä—Å–∏—è: 23%');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const marketingTesting = new MarketingTestingSuite();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.MarketingTestingSuite = MarketingTestingSuite; 