#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üßπ –û–ß–ò–°–¢–ö–ê –ö–≠–®–ê CURSOR MCP\n');

// –ü—É—Ç–∏ –∫ –∫—ç—à—É Cursor
const cachePaths = [
  path.join(process.env.APPDATA, 'Cursor', 'User', 'globalStorage'),
  path.join(process.env.APPDATA, 'Cursor', 'User', 'workspaceStorage'),
  path.join(process.env.APPDATA, 'Cursor', 'logs'),
  path.join(process.env.LOCALAPPDATA, 'Cursor', 'User', 'globalStorage'),
  path.join(process.env.LOCALAPPDATA, 'Cursor', 'User', 'workspaceStorage')
];

let clearedCount = 0;

console.log('üîç –ü–æ–∏—Å–∫ –ø–∞–ø–æ–∫ –∫—ç—à–∞ Cursor...\n');

cachePaths.forEach(cachePath => {
  try {
    if (fs.existsSync(cachePath)) {
      console.log(`üìÅ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞: ${cachePath}`);
      
      // –ü–æ–∏—Å–∫ –ø–∞–ø–æ–∫ MCP
      const items = fs.readdirSync(cachePath);
      
      items.forEach(item => {
        const itemPath = path.join(cachePath, item);
        const stats = fs.statSync(itemPath);
        
        if (stats.isDirectory()) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø–∞–ø–∫–∞ MCP
          if (item.toLowerCase().includes('mcp') || 
              item.toLowerCase().includes('modelcontextprotocol') ||
              item.toLowerCase().includes('cursor')) {
            
            try {
              // –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
              fs.rmSync(itemPath, { recursive: true, force: true });
              console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: ${itemPath}`);
              clearedCount++;
            } catch (error) {
              console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: ${itemPath} - ${error.message}`);
            }
          }
        }
      });
    } else {
      console.log(`‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${cachePath}`);
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫: ${cachePath} - ${error.message}`);
  }
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ —Å MCP
console.log('\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∞–ø–æ–∫ MCP...');

const searchPaths = [
  process.env.APPDATA,
  process.env.LOCALAPPDATA,
  process.env.USERPROFILE
];

searchPaths.forEach(searchPath => {
  if (!searchPath) return;
  
  try {
    const searchForMCP = (dir, depth = 0) => {
      if (depth > 3) return; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –ø–æ–∏—Å–∫–∞
      
      try {
        const items = fs.readdirSync(dir);
        
        items.forEach(item => {
          const itemPath = path.join(dir, item);
          
          try {
            const stats = fs.statSync(itemPath);
            
            if (stats.isDirectory()) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø–∞–ø–∫–∞ MCP
              if (item.toLowerCase().includes('mcp') && 
                  item.toLowerCase().includes('cursor')) {
                
                try {
                  fs.rmSync(itemPath, { recursive: true, force: true });
                  console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ MCP –ø–∞–ø–∫–∞: ${itemPath}`);
                  clearedCount++;
                } catch (error) {
                  console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å MCP –ø–∞–ø–∫—É: ${itemPath} - ${error.message}`);
                }
              } else {
                // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
                searchForMCP(itemPath, depth + 1);
              }
            }
          } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
          }
        });
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
      }
    };
    
    searchForMCP(searchPath);
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤: ${searchPath} - ${error.message}`);
  }
});

// –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');

try {
  const tempDir = process.env.TEMP;
  if (tempDir && fs.existsSync(tempDir)) {
    const tempItems = fs.readdirSync(tempDir);
    
    tempItems.forEach(item => {
      if (item.toLowerCase().includes('cursor') || 
          item.toLowerCase().includes('mcp')) {
        
        const tempPath = path.join(tempDir, item);
        try {
          const stats = fs.statSync(tempPath);
          
          if (stats.isDirectory()) {
            fs.rmSync(tempPath, { recursive: true, force: true });
            console.log(`‚úÖ –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${tempPath}`);
            clearedCount++;
          } else {
            fs.unlinkSync(tempPath);
            console.log(`‚úÖ –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${tempPath}`);
            clearedCount++;
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        }
      }
    });
  }
} catch (error) {
  console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${error.message}`);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
console.log('\nüìä –û–¢–ß–ï–¢ –û–ë –û–ß–ò–°–¢–ö–ï:');
console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø–∞–ø–æ–∫/—Ñ–∞–π–ª–æ–≤: ${clearedCount}`);

const report = {
  timestamp: new Date().toISOString(),
  clearedCount,
  cachePaths,
  status: 'CACHE_CLEARED'
};

try {
  fs.writeFileSync('cursor-cache-clear-report.json', JSON.stringify(report, null, 2));
  console.log('‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ cursor-cache-clear-report.json');
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', error.message);
}

console.log('\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
console.log('1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor');
console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MCP (Ctrl + Shift + P ‚Üí "MCP: Open Settings")');
console.log('3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FullAutoQA –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "1 tool enabled"');

console.log('\n‚úÖ –ö–≠–® –û–ß–ò–©–ï–ù! –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor.'); 