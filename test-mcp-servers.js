#!/usr/bin/env node

/**
 * üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MCP –°–ï–†–í–ï–†–û–í
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π
 */

const { execSync, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logTest(testName, status, details = '') {
  const icon = status === 'PASS' ? '‚úÖ' : status === 'FAIL' ? '‚ùå' : '‚ö†Ô∏è';
  const color = status === 'PASS' ? 'green' : status === 'FAIL' ? 'red' : 'yellow';
  log(`${icon} ${testName}: ${status}${details ? ' - ' + details : ''}`, color);
}

class MCPTester {
  constructor() {
    this.results = {
      total: 0,
      passed: 0,
      failed: 0,
      warnings: 0,
      details: []
    };
  }

  async runTest(testName, testFunction) {
    this.results.total++;
    try {
      const result = await testFunction();
      if (result.status === 'PASS') {
        this.results.passed++;
        logTest(testName, 'PASS', result.details);
      } else if (result.status === 'WARN') {
        this.results.warnings++;
        logTest(testName, 'WARN', result.details);
      } else {
        this.results.failed++;
        logTest(testName, 'FAIL', result.details);
      }
      this.results.details.push({ test: testName, ...result });
    } catch (error) {
      this.results.failed++;
      logTest(testName, 'FAIL', error.message);
      this.results.details.push({ test: testName, status: 'FAIL', error: error.message });
    }
  }

  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
  async testServerInstallation() {
    const servers = [
      'mcp-server-code-runner',
      '@notionhq/notion-mcp-server',
      '@supabase/mcp-server-supabase',
      '@shelm/wikipedia-mcp-server',
      'youtube-data-mcp-server',
      '@modelcontextprotocol/server-sequential-thinking',
      '@upstash/context7-mcp',
      '@playwright/mcp',
      '@modelcontextprotocol/server-memory'
    ];

    let installed = 0;
    for (const server of servers) {
      try {
        execSync(`npm list -g ${server}`, { stdio: 'pipe' });
        installed++;
      } catch (error) {
        // –°–µ—Ä–≤–µ—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      }
    }

    const percentage = (installed / servers.length) * 100;
    if (percentage >= 90) {
      return { status: 'PASS', details: `${installed}/${servers.length} —Å–µ—Ä–≤–µ—Ä–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ` };
    } else if (percentage >= 70) {
      return { status: 'WARN', details: `${installed}/${servers.length} —Å–µ—Ä–≤–µ—Ä–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ` };
    } else {
      return { status: 'FAIL', details: `${installed}/${servers.length} —Å–µ—Ä–≤–µ—Ä–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ` };
    }
  }

  // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ mcp.json
  async testMCPConfig() {
    try {
      const config = JSON.parse(fs.readFileSync('mcp.json', 'utf8'));
      const serverCount = Object.keys(config.mcpServers || {}).length;
      const hasRules = config.rules && config.rules.length > 0;
      const hasChecklist = config.codeReviewChecklist && config.codeReviewChecklist.length > 0;

      if (serverCount >= 10 && hasRules && hasChecklist) {
        return { status: 'PASS', details: `${serverCount} —Å–µ—Ä–≤–µ—Ä–æ–≤, ${config.rules.length} –ø—Ä–∞–≤–∏–ª, ${config.codeReviewChecklist.length} –ø—Ä–æ–≤–µ—Ä–æ–∫` };
      } else {
        return { status: 'WARN', details: `–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è: ${serverCount} —Å–µ—Ä–≤–µ—Ä–æ–≤` };
      }
    } catch (error) {
      return { status: 'FAIL', details: '–§–∞–π–ª mcp.json –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω' };
    }
  }

  // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
  async testServerFunctionality() {
    const servers = [
      { name: 'code-runner', command: 'npx mcp-server-code-runner --help' },
      { name: 'playwright', command: 'npx @playwright/mcp --help' },
      { name: 'sequential-thinking', command: 'npx @modelcontextprotocol/server-sequential-thinking --help' }
    ];

    let working = 0;
    for (const server of servers) {
      try {
        execSync(server.command, { stdio: 'pipe', timeout: 5000 });
        working++;
      } catch (error) {
        // –°–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
      }
    }

    const percentage = (working / servers.length) * 100;
    if (percentage >= 80) {
      return { status: 'PASS', details: `${working}/${servers.length} —Å–µ—Ä–≤–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç` };
    } else if (percentage >= 50) {
      return { status: 'WARN', details: `${working}/${servers.length} —Å–µ—Ä–≤–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç` };
    } else {
      return { status: 'FAIL', details: `${working}/${servers.length} —Å–µ—Ä–≤–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç` };
    }
  }

  // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ GitHub Actions
  async testGitHubActions() {
    const workflowsDir = '.github/workflows';
    if (fs.existsSync(workflowsDir)) {
      const files = fs.readdirSync(workflowsDir);
      const mcpWorkflow = files.find(file => file.includes('mcp'));
      if (mcpWorkflow) {
        return { status: 'PASS', details: 'GitHub Actions workflow –Ω–∞–π–¥–µ–Ω' };
      } else {
        return { status: 'WARN', details: 'GitHub Actions –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ MCP workflow –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }
    } else {
      return { status: 'FAIL', details: 'GitHub Actions –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
    }
  }

  // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  async testMonitoringSystem() {
    if (fs.existsSync('monitor-mcp.js')) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
        execSync('node monitor-mcp.js --test', { stdio: 'pipe', timeout: 10000 });
        return { status: 'PASS', details: '–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç' };
      } catch (error) {
        return { status: 'WARN', details: '–°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç' };
      }
    } else {
      return { status: 'FAIL', details: '–°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }
  }

  // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª
  async testAutomationRules() {
    try {
      const config = JSON.parse(fs.readFileSync('mcp.json', 'utf8'));
      const rules = config.rules || [];
      
      const hasCodeReview = rules.some(rule => rule.name === 'auto-review');
      const hasPerformance = rules.some(rule => rule.name === 'performance-check');
      const hasSecurity = rules.some(rule => rule.name === 'security-scan');

      if (hasCodeReview && hasPerformance && hasSecurity) {
        return { status: 'PASS', details: '–í—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã' };
      } else if (rules.length > 0) {
        return { status: 'WARN', details: `${rules.length} –ø—Ä–∞–≤–∏–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ, –Ω–æ –Ω–µ –≤—Å–µ —Ç–∏–ø—ã` };
      } else {
        return { status: 'FAIL', details: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã' };
      }
    } catch (error) {
      return { status: 'FAIL', details: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏' };
    }
  }

  // –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–µ–∫—Ç–æ–º
  async testProjectIntegration() {
    const requiredFiles = [
      'package.json',
      'firebase.json',
      'public/index.html',
      'docs/PROJECT_KNOWLEDGE.md'
    ];

    let found = 0;
    for (const file of requiredFiles) {
      if (fs.existsSync(file)) {
        found++;
      }
    }

    const percentage = (found / requiredFiles.length) * 100;
    if (percentage >= 90) {
      return { status: 'PASS', details: `${found}/${requiredFiles.length} —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–π–¥–µ–Ω—ã` };
    } else if (percentage >= 70) {
      return { status: 'WARN', details: `${found}/${requiredFiles.length} —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–π–¥–µ–Ω—ã` };
    } else {
      return { status: 'FAIL', details: `${found}/${requiredFiles.length} —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–π–¥–µ–Ω—ã` };
    }
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  async runAllTests() {
    log('\nüß™ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø MCP –°–ï–†–í–ï–†–û–í', 'bright');
    log('–ü—Ä–æ–µ–∫—Ç: WorkInCZ', 'cyan');
    log('–í—Ä–µ–º—è: ' + new Date().toISOString(), 'cyan');

    await this.runTest('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤', () => this.testServerInstallation());
    await this.runTest('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è mcp.json', () => this.testMCPConfig());
    await this.runTest('–†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–≤', () => this.testServerFunctionality());
    await this.runTest('GitHub Actions', () => this.testGitHubActions());
    await this.runTest('–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞', () => this.testMonitoringSystem());
    await this.runTest('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞', () => this.testAutomationRules());
    await this.runTest('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–µ–∫—Ç–æ–º', () => this.testProjectIntegration());

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    this.generateReport();
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
  generateReport() {
    const report = {
      timestamp: new Date().toISOString(),
      project: 'WorkInCZ',
      summary: {
        total: this.results.total,
        passed: this.results.passed,
        failed: this.results.failed,
        warnings: this.results.warnings,
        successRate: ((this.results.passed / this.results.total) * 100).toFixed(1)
      },
      details: this.results.details,
      recommendations: this.generateRecommendations()
    };

    fs.writeFileSync('mcp-test-report.json', JSON.stringify(report, null, 2));

    log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', 'bright');
    log(`  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${this.results.total}`, 'blue');
    log(`  –£—Å–ø–µ—à–Ω–æ: ${this.results.passed}`, 'green');
    log(`  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${this.results.warnings}`, 'yellow');
    log(`  –û—à–∏–±–∫–∏: ${this.results.failed}`, this.results.failed > 0 ? 'red' : 'green');
    log(`  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${report.summary.successRate}%`, report.summary.successRate >= 80 ? 'green' : 'yellow');

    if (this.results.failed > 0) {
      log('\n‚ùå –ü–†–û–ë–õ–ï–ú–´:', 'red');
      this.results.details
        .filter(detail => detail.status === 'FAIL')
        .forEach(detail => {
          log(`  - ${detail.test}: ${detail.details || detail.error}`, 'red');
        });
    }

    if (this.results.warnings > 0) {
      log('\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:', 'yellow');
      this.results.details
        .filter(detail => detail.status === 'WARN')
        .forEach(detail => {
          log(`  - ${detail.test}: ${detail.details}`, 'yellow');
        });
    }

    log('\n‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:', 'cyan');
    report.recommendations.forEach(rec => {
      log(`  - ${rec}`, 'blue');
    });

    log('\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ mcp-test-report.json', 'green');
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  generateRecommendations() {
    const recommendations = [];

    if (this.results.failed > 0) {
      recommendations.push('–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º');
    }

    if (this.results.warnings > 0) {
      recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π');
    }

    if (this.results.passed / this.results.total >= 0.8) {
      recommendations.push('–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    } else {
      recommendations.push('–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞');
    }

    recommendations.push('–†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: node monitor-mcp.js');
    recommendations.push('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö');
    recommendations.push('–û–±–Ω–æ–≤–ª—è—Ç—å —Å–µ—Ä–≤–µ—Ä—ã –µ–∂–µ–º–µ—Å—è—á–Ω–æ');

    return recommendations;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  const tester = new MCPTester();
  tester.runAllTests().then(() => {
    const exitCode = tester.results.failed > 0 ? 1 : 0;
    process.exit(exitCode);
  }).catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    process.exit(1);
  });
}

module.exports = MCPTester; 