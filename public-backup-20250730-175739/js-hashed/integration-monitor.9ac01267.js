/**
 * –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, API –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
 */

class IntegrationMonitor {
    constructor() {
        this.integrations = this.initializeIntegrations();
        this.monitoringData = {};
        this.healthChecks = {};
        this.init();
    }

    init() {
        console.log('üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π');
        this.setupMonitoring();
        this.startPeriodicChecks();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
    initializeIntegrations() {
        return {
            // –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
            stripe: {
                name: 'Stripe',
                type: 'payment',
                endpoints: ['https://api.stripe.com/v1/charges', 'https://api.stripe.com/v1/webhook_endpoints'],
                status: 'unknown',
                lastCheck: null,
                responseTime: null,
                errorCount: 0
            },
            adyen: {
                name: 'Adyen',
                type: 'payment',
                endpoints: ['https://checkout-test.adyen.com/v70/payments', 'https://checkout-test.adyen.com/v70/webhooks'],
                status: 'unknown',
                lastCheck: null,
                responseTime: null,
                errorCount: 0
            },

            // –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
            googleAnalytics: {
                name: 'Google Analytics 4',
                type: 'analytics',
                endpoints: ['https://www.google-analytics.com/g/collect', 'https://analytics.google.com/analytics/web/'],
                status: 'unknown',
                lastCheck: null,
                responseTime: null,
                errorCount: 0
            },
            facebookPixel: {
                name: 'Facebook Pixel',
                type: 'analytics',
                endpoints: ['https://www.facebook.com/tr', 'https://graph.facebook.com/v18.0/'],
                status: 'unknown',
                lastCheck: null,
                responseTime: null,
                errorCount: 0
            },
            yandexMetrica: {
                name: 'Yandex.Metrica',
                type: 'analytics',
                endpoints: ['https://mc.yandex.ru/watch/', 'https://api-metrika.yandex.net/'],
                status: 'unknown',
                lastCheck: null,
                responseTime: null,
                errorCount: 0
            },

            // Email-—Å–µ—Ä–≤–∏—Å—ã
            sendgrid: {
                name: 'SendGrid',
                type: 'email',
                endpoints: ['https://api.sendgrid.com/v3/mail/send', 'https://api.sendgrid.com/v3/status'],
                status: 'unknown',
                lastCheck: null,
                responseTime: null,
                errorCount: 0
            },
            mailgun: {
                name: 'Mailgun',
                type: 'email',
                endpoints: ['https://api.mailgun.net/v3/messages', 'https://api.mailgun.net/v3/domains'],
                status: 'unknown',
                lastCheck: null,
                responseTime: null,
                errorCount: 0
            },

            // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            firebase: {
                name: 'Firebase',
                type: 'database',
                endpoints: ['https://firestore.googleapis.com/v1/projects/', 'https://firebase.google.com/'],
                status: 'unknown',
                lastCheck: null,
                responseTime: null,
                errorCount: 0
            },
            cloudStorage: {
                name: 'Cloud Storage',
                type: 'storage',
                endpoints: ['https://storage.googleapis.com/', 'https://console.cloud.google.com/storage'],
                status: 'unknown',
                lastCheck: null,
                responseTime: null,
                errorCount: 0
            },

            // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            sentry: {
                name: 'Sentry',
                type: 'monitoring',
                endpoints: ['https://o450000000000000.ingest.sentry.io/', 'https://sentry.io/api/0/'],
                status: 'unknown',
                lastCheck: null,
                responseTime: null,
                errorCount: 0
            },
            loggly: {
                name: 'Loggly',
                type: 'logging',
                endpoints: ['https://logs-01.loggly.com/inputs/', 'https://www.loggly.com/api/'],
                status: 'unknown',
                lastCheck: null,
                responseTime: null,
                errorCount: 0
            }
        };
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    setupMonitoring() {
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        this.monitorNetworkRequests();
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫ API
        this.monitorAPIErrors();
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.monitorPerformance();
    }

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    monitorNetworkRequests() {
        if ('performance' in window) {
            const observer = new PerformanceObserver((list) => {
                for (const entry of list.getEntries()) {
                    if (entry.entryType === 'resource') {
                        this.analyzeNetworkRequest(entry);
                    }
                }
            });
            observer.observe({ entryTypes: ['resource'] });
        }
    }

    // –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    analyzeNetworkRequest(entry) {
        const url = entry.name;
        const responseTime = entry.responseEnd - entry.startTime;
        const status = entry.transferSize > 0 ? 'success' : 'error';

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–æ URL
        const integration = this.identifyIntegrationByURL(url);
        if (integration) {
            this.updateIntegrationStatus(integration, status, responseTime);
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø—Ä–æ—Å–µ
        this.monitoringData.networkRequests = this.monitoringData.networkRequests || [];
        this.monitoringData.networkRequests.push({
            url,
            responseTime,
            status,
            timestamp: Date.now(),
            integration
        });
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–æ URL
    identifyIntegrationByURL(url) {
        const urlLower = url.toLowerCase();
        
        if (urlLower.includes('stripe.com')) return 'stripe';
        if (urlLower.includes('adyen.com')) return 'adyen';
        if (urlLower.includes('google-analytics.com') || urlLower.includes('analytics.google.com')) return 'googleAnalytics';
        if (urlLower.includes('facebook.com') || urlLower.includes('fb.com')) return 'facebookPixel';
        if (urlLower.includes('yandex.ru') || urlLower.includes('mc.yandex.ru')) return 'yandexMetrica';
        if (urlLower.includes('sendgrid.com')) return 'sendgrid';
        if (urlLower.includes('mailgun.net')) return 'mailgun';
        if (urlLower.includes('firebase') || urlLower.includes('firestore')) return 'firebase';
        if (urlLower.includes('storage.googleapis.com')) return 'cloudStorage';
        if (urlLower.includes('sentry.io')) return 'sentry';
        if (urlLower.includes('loggly.com')) return 'loggly';
        
        return null;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    updateIntegrationStatus(integrationKey, status, responseTime) {
        const integration = this.integrations[integrationKey];
        if (!integration) return;

        integration.status = status;
        integration.lastCheck = Date.now();
        integration.responseTime = responseTime;

        if (status === 'error') {
            integration.errorCount++;
        } else {
            integration.errorCount = Math.max(0, integration.errorCount - 1);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        if (integration.errorCount >= 5) {
            this.triggerAlert(integrationKey, 'critical', `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: ${integration.errorCount}`);
        }
    }

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫ API
    monitorAPIErrors() {
        window.addEventListener('unhandledrejection', (event) => {
            const error = event.reason;
            this.handleAPIError(error);
        });

        window.addEventListener('error', (event) => {
            if (event.filename && event.filename.includes('api')) {
                this.handleAPIError(event);
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ API
    handleAPIError(error) {
        const errorData = {
            message: error.message || error.toString(),
            stack: error.stack,
            timestamp: Date.now(),
            url: window.location.href
        };

        this.monitoringData.apiErrors = this.monitoringData.apiErrors || [];
        this.monitoringData.apiErrors.push(errorData);

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–æ –æ—à–∏–±–∫–µ
        const integration = this.identifyIntegrationByError(error);
        if (integration) {
            this.updateIntegrationStatus(integration, 'error', null);
        }

        console.error('üö® –û—à–∏–±–∫–∞ API:', errorData);
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–æ –æ—à–∏–±–∫–µ
    identifyIntegrationByError(error) {
        const errorMessage = error.message || error.toString();
        const errorLower = errorMessage.toLowerCase();

        if (errorLower.includes('stripe')) return 'stripe';
        if (errorLower.includes('adyen')) return 'adyen';
        if (errorLower.includes('google') || errorLower.includes('analytics')) return 'googleAnalytics';
        if (errorLower.includes('facebook') || errorLower.includes('pixel')) return 'facebookPixel';
        if (errorLower.includes('yandex')) return 'yandexMetrica';
        if (errorLower.includes('sendgrid')) return 'sendgrid';
        if (errorLower.includes('mailgun')) return 'mailgun';
        if (errorLower.includes('firebase')) return 'firebase';
        if (errorLower.includes('storage')) return 'cloudStorage';
        if (errorLower.includes('sentry')) return 'sentry';
        if (errorLower.includes('loggly')) return 'loggly';

        return null;
    }

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    monitorPerformance() {
        if ('performance' in window) {
            const observer = new PerformanceObserver((list) => {
                for (const entry of list.getEntries()) {
                    if (entry.entryType === 'navigation') {
                        this.analyzePagePerformance(entry);
                    }
                }
            });
            observer.observe({ entryTypes: ['navigation'] });
        }
    }

    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    analyzePagePerformance(entry) {
        const performanceData = {
            loadTime: entry.loadEventEnd - entry.loadEventStart,
            domContentLoaded: entry.domContentLoadedEventEnd - entry.domContentLoadedEventStart,
            firstPaint: entry.firstPaint,
            firstContentfulPaint: entry.firstContentfulPaint,
            timestamp: Date.now()
        };

        this.monitoringData.performance = performanceData;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if (performanceData.loadTime > 5000) {
            this.triggerAlert('performance', 'warning', `–ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${performanceData.loadTime}ms`);
        }
    }

    // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    startPeriodicChecks() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            this.runHealthChecks();
        }, 30000);

        // –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        setInterval(() => {
            this.runFullHealthCheck();
        }, 300000);
    }

    // –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–¥–æ—Ä–æ–≤—å—è
    async runHealthChecks() {
        console.log('üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–¥–æ—Ä–æ–≤—å—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...');
        
        const criticalIntegrations = ['stripe', 'firebase', 'googleAnalytics'];
        
        for (const integrationKey of criticalIntegrations) {
            await this.checkIntegrationHealth(integrationKey);
        }
    }

    // –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    async runFullHealthCheck() {
        console.log('üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...');
        
        for (const integrationKey of Object.keys(this.integrations)) {
            await this.checkIntegrationHealth(integrationKey);
        }

        this.generateHealthReport();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    async checkIntegrationHealth(integrationKey) {
        const integration = this.integrations[integrationKey];
        if (!integration) return;

        try {
            const startTime = Date.now();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
            const response = await this.pingEndpoint(integration.endpoints[0]);
            
            const responseTime = Date.now() - startTime;
            const status = response ? 'healthy' : 'unhealthy';

            this.updateIntegrationStatus(integrationKey, status, responseTime);
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏
            this.healthChecks[integrationKey] = {
                status,
                responseTime,
                timestamp: Date.now(),
                error: response ? null : 'Endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è ${integration.name}:`, error);
            this.updateIntegrationStatus(integrationKey, 'error', null);
            
            this.healthChecks[integrationKey] = {
                status: 'error',
                responseTime: null,
                timestamp: Date.now(),
                error: error.message
            };
        }
    }

    // –ü–∏–Ω–≥ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    async pingEndpoint(url) {
        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 5000);

            const response = await fetch(url, {
                method: 'HEAD',
                signal: controller.signal,
                mode: 'no-cors'
            });

            clearTimeout(timeoutId);
            return true;
        } catch (error) {
            return false;
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∑–¥–æ—Ä–æ–≤—å–µ
    generateHealthReport() {
        const totalIntegrations = Object.keys(this.integrations).length;
        const healthyIntegrations = Object.values(this.integrations).filter(i => i.status === 'healthy').length;
        const unhealthyIntegrations = totalIntegrations - healthyIntegrations;
        const healthRate = (healthyIntegrations / totalIntegrations * 100).toFixed(1);

        console.log('üìä –û–¢–ß–ï–¢ –û –ó–î–û–†–û–í–¨–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ô');
        console.log('=' .repeat(50));
        console.log(`–í—Å–µ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: ${totalIntegrations}`);
        console.log(`–ó–¥–æ—Ä–æ–≤—ã—Ö: ${healthyIntegrations}`);
        console.log(`–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö: ${unhealthyIntegrations}`);
        console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è: ${healthRate}%`);
        console.log('=' .repeat(50));

        // –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–∞–∂–¥–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        Object.entries(this.integrations).forEach(([key, integration]) => {
            const status = integration.status === 'healthy' ? '‚úÖ' : '‚ùå';
            const responseTime = integration.responseTime ? `${integration.responseTime}ms` : 'N/A';
            console.log(`${status} ${integration.name}: ${integration.status} (${responseTime})`);
            
            if (integration.errorCount > 0) {
                console.log(`   –û—à–∏–±–æ–∫: ${integration.errorCount}`);
            }
        });

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        this.saveHealthReport();
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –∑–¥–æ—Ä–æ–≤—å–µ
    saveHealthReport() {
        const report = {
            timestamp: Date.now(),
            summary: {
                total: Object.keys(this.integrations).length,
                healthy: Object.values(this.integrations).filter(i => i.status === 'healthy').length,
                unhealthy: Object.values(this.integrations).filter(i => i.status !== 'healthy').length
            },
            integrations: this.integrations,
            healthChecks: this.healthChecks,
            monitoring: this.monitoringData
        };

        localStorage.setItem('integration_health_report', JSON.stringify(report));
        console.log('üíæ –û—Ç—á–µ—Ç –æ –∑–¥–æ—Ä–æ–≤—å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
    }

    // –¢—Ä–∏–≥–≥–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    triggerAlert(integrationKey, level, message) {
        const alert = {
            integration: integrationKey,
            level,
            message,
            timestamp: Date.now()
        };

        this.monitoringData.alerts = this.monitoringData.alerts || [];
        this.monitoringData.alerts.push(alert);

        console.log(`üö® –û–ü–û–í–ï–©–ï–ù–ò–ï [${level.toUpperCase()}]: ${message}`);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if (level === 'critical') {
            this.sendCriticalAlert(alert);
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    sendCriticalAlert(alert) {
        // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
        if (window.notificationSystem) {
            window.notificationSystem.sendAlert(alert);
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        const criticalAlerts = JSON.parse(localStorage.getItem('critical_alerts') || '[]');
        criticalAlerts.push(alert);
        localStorage.setItem('critical_alerts', JSON.stringify(criticalAlerts));
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    getMonitoringStats() {
        const stats = {
            integrations: Object.keys(this.integrations).length,
            healthy: Object.values(this.integrations).filter(i => i.status === 'healthy').length,
            errors: this.monitoringData.apiErrors?.length || 0,
            alerts: this.monitoringData.alerts?.length || 0,
            networkRequests: this.monitoringData.networkRequests?.length || 0
        };

        console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π:', stats);
        return stats;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    getIntegrationStatus(integrationKey) {
        return this.integrations[integrationKey] || null;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    getAllIntegrationStatuses() {
        return this.integrations;
    }

    // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
    resetErrorCounters() {
        Object.values(this.integrations).forEach(integration => {
            integration.errorCount = 0;
        });
        console.log('üîÑ –°—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ —Å–±—Ä–æ—à–µ–Ω—ã');
    }

    // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    runTestMode() {
        console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π');
        
        // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        setTimeout(() => {
            this.updateIntegrationStatus('stripe', 'healthy', 150);
        }, 1000);

        setTimeout(() => {
            this.updateIntegrationStatus('googleAnalytics', 'error', null);
        }, 2000);

        setTimeout(() => {
            this.updateIntegrationStatus('firebase', 'healthy', 200);
        }, 3000);

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            this.generateHealthReport();
        }, 5000);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
const integrationMonitor = new IntegrationMonitor();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.IntegrationMonitor = IntegrationMonitor; 