// üîê –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–æ–ª—è–º–∏

class TestAuthSystem {
  constructor() {
    this.auth = null;
    this.firestore = null;
    this.currentUser = null;
    this.currentProfile = null;
    this.isInitialized = false;
    
    console.log('[TestAuthSystem] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
    this.init();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
  async init() {
    try {
      if (typeof firebase === 'undefined') {
        throw new Error('Firebase –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
      }

      this.auth = firebase.auth();
      this.firestore = firebase.firestore();
      this.isInitialized = true;
      
      console.log('[TestAuthSystem] Firebase –ø–æ–¥–∫–ª—é—á–µ–Ω');
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      this.auth.onAuthStateChanged(async (user) => {
        if (user) {
          console.log(`[TestAuthSystem] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${user.email}`);
          this.currentUser = user;
          await this.loadUserProfile(user.uid);
        } else {
          console.log('[TestAuthSystem] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª');
          this.currentUser = null;
          this.currentProfile = null;
        }
      });
      
    } catch (error) {
      console.error('[TestAuthSystem] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async loadUserProfile(uid) {
    try {
      const doc = await this.firestore.collection('users').doc(uid).get();
      if (doc.exists) {
        this.currentProfile = doc.data();
        console.log(`[TestAuthSystem] –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: ${this.currentProfile.role}`);
      }
    } catch (error) {
      console.error('[TestAuthSystem] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }
  }

  // –ü—Ä–æ—Å—Ç–æ–π –≤—Ö–æ–¥ –ø–æ email/password
  async signIn(email, password) {
    if (!this.isInitialized) {
      throw new Error('–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    try {
      const userCredential = await this.auth.signInWithEmailAndPassword(email, password);
      console.log(`[TestAuthSystem] –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: ${userCredential.user.email}`);
      return userCredential.user;
    } catch (error) {
      console.error('[TestAuthSystem] –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
      throw error;
    }
  }

  // –í—ã—Ö–æ–¥
  async signOut() {
    if (!this.isInitialized) return;
    
    try {
      await this.auth.signOut();
      console.log('[TestAuthSystem] –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
    } catch (error) {
      console.error('[TestAuthSystem] –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
    }
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ–ª–∏
  async switchRole(email) {
    const password = 'test1234'; // –û–±—â–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –≤—ã—Ö–æ–¥–∏–º
      await this.signOut();
      
      // –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // –í—Ö–æ–¥–∏–º –ø–æ–¥ –Ω–æ–≤–æ–π —Ä–æ–ª—å—é
      const user = await this.signIn(email, password);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –∏–∑ email
      const role = email.split('@')[0].split('-')[1];
      
      console.log(`[TestAuthSystem] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–æ–ª—å: ${role}`);
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–∞—à–±–æ—Ä–¥
      this.redirectToDashboard(role);
      
      return user;
    } catch (error) {
      console.error('[TestAuthSystem] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–æ–ª–∏:', error);
      throw error;
    }
  }

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –¥–∞—à–±–æ—Ä–¥
  redirectToDashboard(role) {
    const dashboards = {
      'candidate': '/dashboard.html',
      'employer': '/employer-dashboard.html', 
      'agency': '/agency-dashboard.html',
      'admin': '/admin-dashboard.html'
    };
    
    const dashboard = dashboards[role] || '/dashboard.html';
    console.log(`[TestAuthSystem] –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞: ${dashboard}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Ä–æ–ª–∏ –≤ URL
    const url = new URL(dashboard, window.location.origin);
    url.searchParams.set('role', role);
    
    window.location.href = url.toString();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getCurrentUser() {
    return this.currentUser;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
  getCurrentProfile() {
    return this.currentProfile;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  isAuthenticated() {
    return !!this.currentUser;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏
  getCurrentRole() {
    return this.currentProfile?.role || 'unknown';
  }
}

// –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.testAuthSystem = new TestAuthSystem(); 