/**
 * –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ø–ª–∞—Ç–µ–∂–µ–π
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏, –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º–∏, –ø–ª–∞—Ç–µ–∂–∞–º–∏ –∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
 */

class SubscriptionSystem {
    constructor() {
        this.subscriptions = new Map();
        this.paymentMethods = new Map();
        this.promoCodes = new Map();
        this.invoices = new Map();
        this.subscriptionPlans = new Map();
        this.premiumFeatures = new Map();
        this.paymentHistory = new Map();
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫
     */
    init() {
        this.loadData();
        this.initializePlans();
        this.initializeFeatures();
        this.initializePromoCodes();
        this.setupEventListeners();
        console.log('üí≥ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
     */
    loadData() {
        try {
            const savedSubscriptions = localStorage.getItem('subscriptions');
            const savedPaymentMethods = localStorage.getItem('paymentMethods');
            const savedInvoices = localStorage.getItem('invoices');
            const savedPaymentHistory = localStorage.getItem('paymentHistory');

            if (savedSubscriptions) this.subscriptions = new Map(JSON.parse(savedSubscriptions));
            if (savedPaymentMethods) this.paymentMethods = new Map(JSON.parse(savedPaymentMethods));
            if (savedInvoices) this.invoices = new Map(JSON.parse(savedInvoices));
            if (savedPaymentHistory) this.paymentHistory = new Map(JSON.parse(savedPaymentHistory));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:', error);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
     */
    saveData() {
        try {
            localStorage.setItem('subscriptions', JSON.stringify(Array.from(this.subscriptions.entries())));
            localStorage.setItem('paymentMethods', JSON.stringify(Array.from(this.paymentMethods.entries())));
            localStorage.setItem('invoices', JSON.stringify(Array.from(this.invoices.entries())));
            localStorage.setItem('paymentHistory', JSON.stringify(Array.from(this.paymentHistory.entries())));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:', error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫
     */
    initializePlans() {
        const plans = [
            {
                id: 'free',
                name: '–ë–∞–∑–æ–≤—ã–π',
                description: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                price: 0,
                currency: 'CZK',
                interval: 'month',
                features: [
                    '5 –∑–∞—è–≤–æ–∫ –≤ –º–µ—Å—è—Ü',
                    '–ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π',
                    '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                    '–ë–∞–∑–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                    '–°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤',
                    '–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π',
                    '–ë–∞–∑–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
                    '–°–∏—Å—Ç–µ–º–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏',
                    '–ë–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
                    '–î–æ—Å—Ç—É–ø –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º',
                    '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ',
                    '–ë–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞'
                ],
                limits: {
                    applications: 5,
                    messages: 10,
                    profileViews: 100,
                    searchFilters: 3,
                    reviews: 10,
                    calendarEvents: 50
                }
            },
            {
                id: 'premium',
                name: '–ü—Ä–µ–º–∏—É–º',
                description: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π',
                price: 299,
                currency: 'CZK',
                interval: 'month',
                features: [
                    '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏',
                    '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫',
                    '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                    '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
                    '–ö–∞—Å—Ç–æ–º–Ω—ã–µ –±–µ–π–¥–∂–∏',
                    '–ë—É—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è',
                    '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã',
                    '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö'
                ],
                limits: {
                    applications: -1, // –±–µ–∑–ª–∏–º–∏—Ç
                    messages: 100,
                    profileViews: 1000,
                    searchFilters: 10
                }
            },
            {
                id: 'business',
                name: '–ë–∏–∑–Ω–µ—Å',
                description: '–î–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π –∏ HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤',
                price: 999,
                currency: 'CZK',
                interval: 'month',
                features: [
                    '–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ü—Ä–µ–º–∏—É–º',
                    '–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–π',
                    '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏',
                    'HR –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
                    '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ATS',
                    'API –¥–æ—Å—Ç—É–ø',
                    '–ë–µ–ª—ã–π –ª–µ–π–±–ª',
                    '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ'
                ],
                limits: {
                    applications: -1,
                    messages: 500,
                    profileViews: 5000,
                    searchFilters: 20,
                    jobPostings: 10
                }
            },
            {
                id: 'enterprise',
                name: 'Enterprise',
                description: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π',
                price: 2999,
                currency: 'CZK',
                interval: 'month',
                features: [
                    '–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ë–∏–∑–Ω–µ—Å',
                    '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏',
                    '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                    '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞',
                    'SLA –≥–∞—Ä–∞–Ω—Ç–∏–∏',
                    '–û–±—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã',
                    '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å HR —Å–∏—Å—Ç–µ–º–∞–º–∏',
                    '–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å'
                ],
                limits: {
                    applications: -1,
                    messages: -1,
                    profileViews: -1,
                    searchFilters: -1,
                    jobPostings: -1
                }
            }
        ];

        plans.forEach(plan => {
            this.subscriptionPlans.set(plan.id, plan);
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–π
     */
    initializeFeatures() {
        const features = [
            // –ë–ê–ó–û–í–´–ï –ë–ï–°–ü–õ–ê–¢–ù–´–ï –§–£–ù–ö–¶–ò–ò
            {
                id: 'basic_search',
                name: '–ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π',
                description: '–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π —Å –±–∞–∑–æ–≤—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏',
                icon: 'üîç',
                category: 'search',
                plans: ['free', 'premium', 'business', 'enterprise']
            },
            {
                id: 'basic_profile',
                name: '–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å',
                description: '–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è',
                icon: 'üë§',
                category: 'profile',
                plans: ['free', 'premium', 'business', 'enterprise']
            },
            {
                id: 'basic_notifications',
                name: '–ë–∞–∑–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö –∏ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö',
                icon: 'üîî',
                category: 'notifications',
                plans: ['free', 'premium', 'business', 'enterprise']
            },
            {
                id: 'basic_messaging',
                name: '–ë–∞–∑–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
                description: '–û–±—â–µ–Ω–∏–µ —Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º–∏',
                icon: 'üí¨',
                category: 'messaging',
                plans: ['free', 'premium', 'business', 'enterprise']
            },
            {
                id: 'basic_reviews',
                name: '–ë–∞–∑–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã',
                description: '–û—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è—Ö',
                icon: '‚≠ê',
                category: 'reviews',
                plans: ['free', 'premium', 'business', 'enterprise']
            },
            {
                id: 'basic_calendar',
                name: '–ë–∞–∑–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å',
                description: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π –∏ –≤—Å—Ç—Ä–µ—á',
                icon: 'üìÖ',
                category: 'calendar',
                plans: ['free', 'premium', 'business', 'enterprise']
            },
            {
                id: 'basic_gamification',
                name: '–ë–∞–∑–æ–≤–∞—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è',
                description: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –±–µ–π–¥–∂–∏',
                icon: 'üèÜ',
                category: 'gamification',
                plans: ['free', 'premium', 'business', 'enterprise']
            },
            {
                id: 'basic_achievements',
                name: '–ë–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
                description: '–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –Ω–∞–≥—Ä–∞–¥',
                icon: 'üéñÔ∏è',
                category: 'achievements',
                plans: ['free', 'premium', 'business', 'enterprise']
            },
            {
                id: 'basic_resume',
                name: '–ë–∞–∑–æ–≤–æ–µ —Ä–µ–∑—é–º–µ',
                description: '–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ',
                icon: 'üìÑ',
                category: 'resume',
                plans: ['free', 'premium', 'business', 'enterprise']
            },
            {
                id: 'basic_filters',
                name: '–ë–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã',
                description: '–ë–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π',
                icon: 'üîß',
                category: 'search',
                plans: ['free', 'premium', 'business', 'enterprise']
            },
            
            // –ü–†–ï–ú–ò–£–ú –§–£–ù–ö–¶–ò–ò
            {
                id: 'unlimited_applications',
                name: '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏',
                description: '–ü–æ–¥–∞–≤–∞–π—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞–±–æ—Ç—É',
                icon: 'üìù',
                category: 'applications',
                plans: ['premium', 'business', 'enterprise']
            },
            {
                id: 'advanced_search',
                name: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫',
                description: '–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π',
                icon: 'üîç',
                category: 'search',
                plans: ['premium', 'business', 'enterprise']
            },
            {
                id: 'priority_support',
                name: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                description: '–ë—ã—Å—Ç—Ä–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º',
                icon: 'üéØ',
                category: 'support',
                plans: ['premium', 'business', 'enterprise']
            },
            {
                id: 'advanced_analytics',
                name: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
                description: '–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
                icon: 'üìä',
                category: 'analytics',
                plans: ['premium', 'business', 'enterprise']
            },
            {
                id: 'custom_badges',
                name: '–ö–∞—Å—Ç–æ–º–Ω—ã–µ –±–µ–π–¥–∂–∏',
                description: '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–µ–π–¥–∂–∏',
                icon: 'üé®',
                category: 'customization',
                plans: ['premium', 'business', 'enterprise']
            },
            {
                id: 'profile_boost',
                name: '–ë—É—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è',
                description: '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö',
                icon: 'üöÄ',
                category: 'visibility',
                plans: ['premium', 'business', 'enterprise']
            },
            {
                id: 'export_data',
                name: '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
                description: '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö',
                icon: 'üì§',
                category: 'data',
                plans: ['premium', 'business', 'enterprise']
            },
            {
                id: 'job_posting',
                name: '–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–π',
                description: '–ü—É–±–ª–∏–∫—É–π—Ç–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ',
                icon: 'üìã',
                category: 'employer',
                plans: ['business', 'enterprise']
            },
            {
                id: 'candidate_management',
                name: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏',
                description: '–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏ –∏ –∏—Ö –∑–∞—è–≤–∫–∞–º–∏',
                icon: 'üë•',
                category: 'employer',
                plans: ['business', 'enterprise']
            },
            {
                id: 'hr_analytics',
                name: 'HR –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
                description: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤',
                icon: 'üìà',
                category: 'analytics',
                plans: ['business', 'enterprise']
            },
            {
                id: 'api_access',
                name: 'API –¥–æ—Å—Ç—É–ø',
                description: '–î–æ—Å—Ç—É–ø –∫ API –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
                icon: 'üîå',
                category: 'integration',
                plans: ['business', 'enterprise']
            }
        ];

        features.forEach(feature => {
            this.premiumFeatures.set(feature.id, feature);
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
     */
    initializePromoCodes() {
        const promoCodes = [
            {
                code: 'WELCOME2024',
                description: '–°–∫–∏–¥–∫–∞ 20% –Ω–∞ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü',
                discount: 20,
                type: 'percentage',
                validFrom: new Date('2024-01-01'),
                validTo: new Date('2024-12-31'),
                maxUses: 1000,
                usedCount: 0,
                applicablePlans: ['premium', 'business'],
                minSubscriptionDuration: 1
            },
            {
                code: 'FREEMONTH',
                description: '–ü–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ',
                discount: 100,
                type: 'percentage',
                validFrom: new Date('2024-01-01'),
                validTo: new Date('2024-12-31'),
                maxUses: 500,
                usedCount: 0,
                applicablePlans: ['premium'],
                minSubscriptionDuration: 3
            },
            {
                code: 'BUSINESS50',
                description: '–°–∫–∏–¥–∫–∞ 50% –Ω–∞ –±–∏–∑–Ω–µ—Å –ø–ª–∞–Ω',
                discount: 50,
                type: 'percentage',
                validFrom: new Date('2024-01-01'),
                validTo: new Date('2024-06-30'),
                maxUses: 100,
                usedCount: 0,
                applicablePlans: ['business'],
                minSubscriptionDuration: 6
            },
            {
                code: 'ENTERPRISE25',
                description: '–°–∫–∏–¥–∫–∞ 25% –Ω–∞ enterprise –ø–ª–∞–Ω',
                discount: 25,
                type: 'percentage',
                validFrom: new Date('2024-01-01'),
                validTo: new Date('2024-12-31'),
                maxUses: 50,
                usedCount: 0,
                applicablePlans: ['enterprise'],
                minSubscriptionDuration: 12
            }
        ];

        promoCodes.forEach(promoCode => {
            this.promoCodes.set(promoCode.code, promoCode);
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getUserSubscription(userId) {
        if (!this.subscriptions.has(userId)) {
            const subscription = {
                userId: userId,
                planId: 'free',
                status: 'active',
                startDate: Date.now(),
                endDate: null,
                autoRenew: false,
                paymentMethodId: null,
                promoCode: null,
                features: this.getPlanFeatures('free'),
                limits: this.getPlanLimits('free'),
                usage: {
                    applications: 0,
                    messages: 0,
                    profileViews: 0,
                    searchFilters: 0
                }
            };
            this.subscriptions.set(userId, subscription);
        }
        return this.subscriptions.get(userId);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø–ª–∞–Ω–∞
     */
    getPlanFeatures(planId) {
        const plan = this.subscriptionPlans.get(planId);
        if (!plan) return [];

        return Array.from(this.premiumFeatures.values())
            .filter(feature => feature.plans.includes(planId))
            .map(feature => feature.id);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–ª–∞–Ω–∞
     */
    getPlanLimits(planId) {
        const plan = this.subscriptionPlans.get(planId);
        return plan ? plan.limits : {};
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    hasFeature(userId, featureId) {
        const subscription = this.getUserSubscription(userId);
        const feature = this.premiumFeatures.get(featureId);
        
        // –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ
        const freeFeatures = [
            'basic_search',
            'basic_profile',
            'basic_notifications',
            'basic_messaging',
            'basic_reviews',
            'basic_calendar',
            'basic_gamification',
            'basic_achievements',
            'basic_resume',
            'basic_filters'
        ];
        
        if (freeFeatures.includes(featureId)) {
            return true; // –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã
        }
        
        if (!feature || !subscription) {
            return false;
        }
        
        return feature.plans.includes(subscription.planId);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
     */
    checkLimit(userId, limitType) {
        const subscription = this.getUserSubscription(userId);
        const limit = subscription.limits[limitType];
        const usage = subscription.usage[limitType] || 0;

        if (limit === -1) return true; // –±–µ–∑–ª–∏–º–∏—Ç
        return usage < limit;
    }

    /**
     * –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
     */
    incrementUsage(userId, limitType) {
        const subscription = this.getUserSubscription(userId);
        if (!subscription.usage[limitType]) {
            subscription.usage[limitType] = 0;
        }
        subscription.usage[limitType]++;
        this.saveData();
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–ª–∞–Ω
     */
    async subscribeToPlan(userId, planId, paymentMethodId = null, promoCode = null) {
        const plan = this.subscriptionPlans.get(planId);
        if (!plan) {
            throw new Error('–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const subscription = this.getUserSubscription(userId);
        const oldPlanId = subscription.planId;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        let finalPrice = plan.price;
        let appliedPromoCode = null;

        if (promoCode) {
            const promoResult = this.validatePromoCode(promoCode, planId);
            if (promoResult.valid) {
                finalPrice = this.calculateDiscountedPrice(plan.price, promoResult.promoCode);
                appliedPromoCode = promoCode;
            }
        }

        // –°–∏–º—É–ª—è—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞
        const paymentResult = await this.processPayment(userId, finalPrice, plan.currency, paymentMethodId);
        
        if (paymentResult.success) {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            subscription.planId = planId;
            subscription.status = 'active';
            subscription.startDate = Date.now();
            subscription.endDate = this.calculateEndDate(plan.interval);
            subscription.autoRenew = true;
            subscription.paymentMethodId = paymentMethodId;
            subscription.promoCode = appliedPromoCode;
            subscription.features = this.getPlanFeatures(planId);
            subscription.limits = this.getPlanLimits(planId);

            // –°–±—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            subscription.usage = {
                applications: 0,
                messages: 0,
                profileViews: 0,
                searchFilters: 0
            };

            // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞
            this.createInvoice(userId, planId, finalPrice, plan.currency, appliedPromoCode);

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
            if (appliedPromoCode) {
                this.updatePromoCodeUsage(appliedPromoCode);
            }

            this.saveData();

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            this.notifySubscriptionChange(userId, oldPlanId, planId);

            return {
                success: true,
                subscription: subscription,
                payment: paymentResult
            };
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: ' + paymentResult.error);
        }
    }

    /**
     * –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
     */
    cancelSubscription(userId) {
        const subscription = this.getUserSubscription(userId);
        
        subscription.status = 'cancelled';
        subscription.autoRenew = false;
        subscription.endDate = Date.now();

        this.saveData();

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏
        this.notifySubscriptionCancellation(userId);

        return subscription;
    }

    /**
     * –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
     */
    async renewSubscription(userId) {
        const subscription = this.getUserSubscription(userId);
        
        if (subscription.status !== 'cancelled') {
            throw new Error('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞');
        }

        const plan = this.subscriptionPlans.get(subscription.planId);
        const paymentResult = await this.processPayment(userId, plan.price, plan.currency, subscription.paymentMethodId);

        if (paymentResult.success) {
            subscription.status = 'active';
            subscription.autoRenew = true;
            subscription.startDate = Date.now();
            subscription.endDate = this.calculateEndDate(plan.interval);

            this.saveData();

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            this.notifySubscriptionRenewal(userId);

            return subscription;
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: ' + paymentResult.error);
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
     */
    validatePromoCode(code, planId) {
        const promoCode = this.promoCodes.get(code);
        
        if (!promoCode) {
            return { valid: false, error: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }

        if (promoCode.usedCount >= promoCode.maxUses) {
            return { valid: false, error: '–ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω' };
        }

        if (Date.now() < promoCode.validFrom.getTime() || Date.now() > promoCode.validTo.getTime()) {
            return { valid: false, error: '–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç–µ–∫ –∏–ª–∏ –µ—â–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω' };
        }

        if (!promoCode.applicablePlans.includes(planId)) {
            return { valid: false, error: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º –∫ –¥–∞–Ω–Ω–æ–º—É –ø–ª–∞–Ω—É' };
        }

        return { valid: true, promoCode: promoCode };
    }

    /**
     * –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π
     */
    calculateDiscountedPrice(originalPrice, promoCode) {
        if (promoCode.type === 'percentage') {
            return originalPrice * (1 - promoCode.discount / 100);
        } else if (promoCode.type === 'fixed') {
            return Math.max(0, originalPrice - promoCode.discount);
        }
        return originalPrice;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
     */
    updatePromoCodeUsage(code) {
        const promoCode = this.promoCodes.get(code);
        if (promoCode) {
            promoCode.usedCount++;
            this.promoCodes.set(code, promoCode);
        }
    }

    /**
     * –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
     */
    calculateEndDate(interval) {
        const now = new Date();
        
        switch (interval) {
            case 'month':
                return new Date(now.getFullYear(), now.getMonth() + 1, now.getDate()).getTime();
            case 'year':
                return new Date(now.getFullYear() + 1, now.getMonth(), now.getDate()).getTime();
            default:
                return new Date(now.getFullYear(), now.getMonth() + 1, now.getDate()).getTime();
        }
    }

    /**
     * –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
     */
    async processPayment(userId, amount, currency, paymentMethodId) {
        // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        await new Promise(resolve => setTimeout(resolve, 1000));

        // –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (90% —É—Å–ø–µ—Ö)
        const success = Math.random() > 0.1;

        if (success) {
            const paymentId = 'pay_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
            this.paymentHistory.set(paymentId, {
                id: paymentId,
                userId: userId,
                amount: amount,
                currency: currency,
                status: 'succeeded',
                timestamp: Date.now(),
                paymentMethodId: paymentMethodId
            });

            return {
                success: true,
                paymentId: paymentId,
                amount: amount,
                currency: currency
            };
        } else {
            return {
                success: false,
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ'
            };
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞
     */
    createInvoice(userId, planId, amount, currency, promoCode = null) {
        const invoiceId = 'inv_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        
        const invoice = {
            id: invoiceId,
            userId: userId,
            planId: planId,
            amount: amount,
            currency: currency,
            promoCode: promoCode,
            status: 'paid',
            createdAt: Date.now(),
            dueDate: Date.now()
        };

        this.invoices.set(invoiceId, invoice);
        return invoice;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≤–æ–π—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getUserInvoices(userId, limit = 10) {
        return Array.from(this.invoices.values())
            .filter(invoice => invoice.userId === userId)
            .sort((a, b) => b.createdAt - a.createdAt)
            .slice(0, limit);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
     */
    getPaymentHistory(userId, limit = 10) {
        return Array.from(this.paymentHistory.values())
            .filter(payment => payment.userId === userId)
            .sort((a, b) => b.timestamp - a.timestamp)
            .slice(0, limit);
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
     */
    notifySubscriptionChange(userId, oldPlanId, newPlanId) {
        const event = new CustomEvent('subscriptionChanged', {
            detail: {
                userId: userId,
                oldPlanId: oldPlanId,
                newPlanId: newPlanId,
                timestamp: Date.now()
            }
        });
        document.dispatchEvent(event);
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏
     */
    notifySubscriptionCancellation(userId) {
        const event = new CustomEvent('subscriptionCancelled', {
            detail: {
                userId: userId,
                timestamp: Date.now()
            }
        });
        document.dispatchEvent(event);
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
     */
    notifySubscriptionRenewal(userId) {
        const event = new CustomEvent('subscriptionRenewed', {
            detail: {
                userId: userId,
                timestamp: Date.now()
            }
        });
        document.dispatchEvent(event);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–ª–∞–Ω
        document.addEventListener('subscribeToPlan', (e) => {
            const { userId, planId, paymentMethodId, promoCode } = e.detail;
            this.subscribeToPlan(userId, planId, paymentMethodId, promoCode);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
        document.addEventListener('cancelSubscription', (e) => {
            const { userId } = e.detail;
            this.cancelSubscription(userId);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        document.addEventListener('renewSubscription', (e) => {
            const { userId } = e.detail;
            this.renewSubscription(userId);
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
     */
    getSystemStats() {
        const subscriptions = Array.from(this.subscriptions.values());
        const activeSubscriptions = subscriptions.filter(sub => sub.status === 'active');
        const premiumSubscriptions = activeSubscriptions.filter(sub => sub.planId !== 'free');

        return {
            totalUsers: subscriptions.length,
            activeSubscriptions: activeSubscriptions.length,
            premiumSubscriptions: premiumSubscriptions.length,
            conversionRate: subscriptions.length > 0 ? 
                (premiumSubscriptions.length / subscriptions.length) * 100 : 0,
            totalRevenue: this.calculateTotalRevenue(),
            averageRevenuePerUser: this.calculateARPU()
        };
    }

    /**
     * –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞
     */
    calculateTotalRevenue() {
        let total = 0;
        
        for (const payment of this.paymentHistory.values()) {
            if (payment.status === 'succeeded') {
                // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ CZK –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
                if (payment.currency === 'EUR') {
                    total += payment.amount * 25; // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
                } else if (payment.currency === 'USD') {
                    total += payment.amount * 23; // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
                } else {
                    total += payment.amount;
                }
            }
        }
        
        return total;
    }

    /**
     * –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –¥–æ—Ö–æ–¥–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    calculateARPU() {
        const totalRevenue = this.calculateTotalRevenue();
        const activeSubscriptions = Array.from(this.subscriptions.values())
            .filter(sub => sub.status === 'active').length;
        
        return activeSubscriptions > 0 ? totalRevenue / activeSubscriptions : 0;
    }

    /**
     * –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
     */
    enableTestMode() {
        console.log('üß™ –í–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫');
        
        const testUserId = 'test-user-1';
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        const subscription = this.getUserSubscription(testUserId);
        
        // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–ª–∞–Ω
        setTimeout(() => {
            this.subscribeToPlan(testUserId, 'premium', 'test-payment-method', 'WELCOME2024')
                .then(result => {
                    console.log('–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', result);
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:', error);
                });
        }, 2000);

        return {
            subscription: this.getUserSubscription(testUserId),
            systemStats: this.getSystemStats(),
            availablePlans: Array.from(this.subscriptionPlans.values()),
            premiumFeatures: Array.from(this.premiumFeatures.values())
        };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.SubscriptionSystem = SubscriptionSystem; 