/**
 * UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
 */

class RecommendationUI {
    constructor(recommendationEngine) {
        this.engine = recommendationEngine;
        this.currentRecommendations = [];
        this.isVisible = false;
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    init() {
        this.createRecommendationWidget();
        this.setupEventListeners();
        console.log('üé® UI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
     */
    createRecommendationWidget() {
        const widget = document.createElement('div');
        widget.id = 'recommendationWidget';
        widget.className = 'fixed bottom-4 right-4 bg-white rounded-lg shadow-xl border border-gray-200 p-4 w-80 max-h-96 overflow-hidden transition-all duration-300 transform translate-y-full';
        widget.style.zIndex = '1000';

        widget.innerHTML = `
            <div class="flex items-center justify-between mb-3">
                <h3 class="text-lg font-semibold text-gray-800 flex items-center">
                    <span class="mr-2">üéØ</span>
                    –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                </h3>
                <button id="closeRecommendations" class="text-gray-400 hover:text-gray-600 transition-colors">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            
            <div id="recommendationContent" class="space-y-3 max-h-64 overflow-y-auto">
                <div class="text-center text-gray-500 py-8">
                    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-2"></div>
                    <p>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è...</p>
                </div>
            </div>
            
            <div class="mt-3 pt-3 border-t border-gray-200">
                <button id="refreshRecommendations" class="w-full bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-md transition-colors text-sm">
                    –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                </button>
            </div>
        `;

        document.body.appendChild(widget);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        document.addEventListener('click', (e) => {
            if (e.target.id === 'closeRecommendations') {
                this.hide();
            }
        });

        // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        document.addEventListener('click', (e) => {
            if (e.target.id === 'refreshRecommendations') {
                this.refreshRecommendations();
            }
        });

        // –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º
        document.addEventListener('click', (e) => {
            if (e.target.closest('.recommendation-feedback')) {
                const button = e.target.closest('.recommendation-feedback');
                const jobId = button.dataset.jobId;
                const feedback = button.dataset.feedback;
                this.handleFeedback(jobId, feedback);
            }
        });

        // –ö–ª–∏–∫–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º –≤–∞–∫–∞–Ω—Å–∏–π
        document.addEventListener('click', (e) => {
            if (e.target.closest('.recommendation-job-card')) {
                const card = e.target.closest('.recommendation-job-card');
                const jobId = card.dataset.jobId;
                this.handleJobClick(jobId);
            }
        });
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥–∂–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
     */
    show() {
        const widget = document.getElementById('recommendationWidget');
        if (widget) {
            widget.classList.remove('translate-y-full');
            this.isVisible = true;
            this.loadRecommendations();
        }
    }

    /**
     * –°–∫—Ä—ã—Ç—å –≤–∏–¥–∂–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
     */
    hide() {
        const widget = document.getElementById('recommendationWidget');
        if (widget) {
            widget.classList.add('translate-y-full');
            this.isVisible = false;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
     */
    async loadRecommendations() {
        const content = document.getElementById('recommendationContent');
        if (!content) return;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        content.innerHTML = `
            <div class="text-center text-gray-500 py-8">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-2"></div>
                <p>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è...</p>
            </div>
        `;

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            const userId = this.engine.getCurrentUserId();
            const recommendations = this.engine.generateRecommendations(userId, 5);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–π
            const jobData = await this.getJobData(recommendations.map(r => r.jobId));
            
            this.currentRecommendations = recommendations;
            this.renderRecommendations(recommendations, jobData);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
            content.innerHTML = `
                <div class="text-center text-red-500 py-8">
                    <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</p>
                    <button onclick="recommendationUI.refreshRecommendations()" class="mt-2 text-blue-500 hover:underline">
                        –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                </div>
            `;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
     */
    async getJobData(jobIds) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –∑–∞–ø—Ä–æ—Å
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const mockJobs = {
            'job-1': {
                id: 'job-1',
                title: 'Frontend Developer',
                company: 'TechCorp',
                location: 'Prague',
                salary: '50,000 CZK',
                skills: ['JavaScript', 'React', 'TypeScript'],
                matchScore: 0.95
            },
            'job-2': {
                id: 'job-2',
                title: 'Backend Developer',
                company: 'DataSoft',
                location: 'Brno',
                salary: '45,000 CZK',
                skills: ['Node.js', 'Python', 'PostgreSQL'],
                matchScore: 0.87
            },
            'job-3': {
                id: 'job-3',
                title: 'UX Designer',
                company: 'DesignLab',
                location: 'Prague',
                salary: '40,000 CZK',
                skills: ['Figma', 'Adobe XD', 'User Research'],
                matchScore: 0.78
            }
        };

        return jobIds.reduce((acc, jobId) => {
            if (mockJobs[jobId]) {
                acc[jobId] = mockJobs[jobId];
            }
            return acc;
        }, {});
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
     */
    renderRecommendations(recommendations, jobData) {
        const content = document.getElementById('recommendationContent');
        if (!content) return;

        if (recommendations.length === 0) {
            content.innerHTML = `
                <div class="text-center text-gray-500 py-8">
                    <p>–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</p>
                    <p class="text-sm mt-1">–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</p>
                </div>
            `;
            return;
        }

        const recommendationsHTML = recommendations.map(rec => {
            const job = jobData[rec.jobId];
            if (!job) return '';

            const matchPercentage = Math.round(rec.matchScore * 100);
            const matchColor = matchPercentage >= 80 ? 'text-green-600' : 
                              matchPercentage >= 60 ? 'text-yellow-600' : 'text-red-600';

            return `
                <div class="recommendation-job-card bg-gray-50 rounded-lg p-3 cursor-pointer hover:bg-gray-100 transition-colors" data-job-id="${job.id}">
                    <div class="flex items-start justify-between mb-2">
                        <h4 class="font-medium text-gray-800 text-sm leading-tight">${job.title}</h4>
                        <span class="text-xs font-semibold ${matchColor}">${matchPercentage}%</span>
                    </div>
                    
                    <p class="text-xs text-gray-600 mb-2">${job.company} ‚Ä¢ ${job.location}</p>
                    
                    <div class="flex flex-wrap gap-1 mb-3">
                        ${job.skills.slice(0, 3).map(skill => 
                            `<span class="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded">${skill}</span>`
                        ).join('')}
                        ${job.skills.length > 3 ? `<span class="text-xs text-gray-500">+${job.skills.length - 3}</span>` : ''}
                    </div>
                    
                    <div class="flex items-center justify-between">
                        <span class="text-xs font-medium text-gray-700">${job.salary}</span>
                        
                        <div class="flex space-x-1">
                            <button class="recommendation-feedback text-xs px-2 py-1 rounded bg-green-100 text-green-700 hover:bg-green-200 transition-colors" 
                                    data-job-id="${job.id}" data-feedback="positive" title="–ù—Ä–∞–≤–∏—Ç—Å—è">
                                üëç
                            </button>
                            <button class="recommendation-feedback text-xs px-2 py-1 rounded bg-red-100 text-red-700 hover:bg-red-200 transition-colors" 
                                    data-job-id="${job.id}" data-feedback="negative" title="–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è">
                                üëé
                            </button>
                        </div>
                    </div>
                </div>
            `;
        }).join('');

        content.innerHTML = recommendationsHTML;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
     */
    refreshRecommendations() {
        this.loadRecommendations();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
     */
    handleFeedback(jobId, feedback) {
        const userId = this.engine.getCurrentUserId();
        this.engine.recordFeedback(userId, jobId, feedback);

        // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        const button = document.querySelector(`[data-job-id="${jobId}"][data-feedback="${feedback}"]`);
        if (button) {
            const originalText = button.innerHTML;
            button.innerHTML = feedback === 'positive' ? '‚úÖ' : '‚ùå';
            button.disabled = true;
            
            setTimeout(() => {
                button.innerHTML = originalText;
                button.disabled = false;
            }, 2000);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification(
            feedback === 'positive' ? '–°–ø–∞—Å–∏–±–æ! –ú—ã —É—á—Ç–µ–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è' : '–ü–æ–Ω—è—Ç–Ω–æ, –±—É–¥–µ–º —É—á–∏—Ç—ã–≤–∞—Ç—å —ç—Ç–æ –≤ –±—É–¥—É—â–µ–º',
            feedback === 'positive' ? 'success' : 'info'
        );
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏
     */
    handleJobClick(jobId) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        console.log('–ö–ª–∏–∫ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏:', jobId);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification('–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏...', 'info');
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏
        // window.location.href = `/job/${jobId}`;
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `fixed top-4 right-4 px-4 py-2 rounded-md text-white text-sm z-50 transition-all duration-300 transform translate-x-full`;
        
        switch (type) {
            case 'success':
                notification.className += ' bg-green-500';
                break;
            case 'error':
                notification.className += ' bg-red-500';
                break;
            default:
                notification.className += ' bg-blue-500';
        }
        
        notification.textContent = message;
        document.body.appendChild(notification);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            notification.classList.remove('translate-x-full');
        }, 100);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            notification.classList.add('translate-x-full');
            setTimeout(() => {
                document.body.removeChild(notification);
            }, 300);
        }, 3000);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
     */
    createRecommendationButton() {
        const button = document.createElement('button');
        button.id = 'openRecommendations';
        button.className = 'fixed bottom-4 right-4 bg-blue-500 hover:bg-blue-600 text-white p-3 rounded-full shadow-lg transition-all duration-300 z-50';
        button.innerHTML = `
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
            </svg>
        `;
        button.title = '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏';

        button.addEventListener('click', () => {
            this.show();
        });

        document.body.appendChild(button);
    }

    /**
     * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
     */
    integrateWithMainPage() {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        const nav = document.querySelector('nav') || document.querySelector('.navbar');
        if (nav) {
            const recommendationNavItem = document.createElement('div');
            recommendationNavItem.className = 'flex items-center space-x-2';
            recommendationNavItem.innerHTML = `
                <button id="navRecommendations" class="text-gray-600 hover:text-blue-500 transition-colors flex items-center space-x-1">
                    <span>üéØ</span>
                    <span class="hidden md:inline">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</span>
                </button>
            `;
            
            nav.appendChild(recommendationNavItem);
            
            document.getElementById('navRecommendations').addEventListener('click', () => {
                this.show();
            });
        }

        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≤–∞—é—â—É—é –∫–Ω–æ–ø–∫—É
        this.createRecommendationButton();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
     */
    getStats() {
        return this.engine.getRecommendationStats();
    }

    /**
     * –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
     */
    enableTestMode() {
        console.log('üß™ –í–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º UI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π');
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        const testRecommendations = this.engine.enableTestMode();
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–π
        const testJobData = {
            'job-1': {
                id: 'job-1',
                title: 'Frontend Developer',
                company: 'TechCorp',
                location: 'Prague',
                salary: '50,000 CZK',
                skills: ['JavaScript', 'React', 'TypeScript'],
                matchScore: 0.95
            },
            'job-2': {
                id: 'job-2',
                title: 'Backend Developer',
                company: 'DataSoft',
                location: 'Brno',
                salary: '45,000 CZK',
                skills: ['Node.js', 'Python', 'PostgreSQL'],
                matchScore: 0.87
            },
            'job-3': {
                id: 'job-3',
                title: 'UX Designer',
                company: 'DesignLab',
                location: 'Prague',
                salary: '40,000 CZK',
                skills: ['Figma', 'Adobe XD', 'User Research'],
                matchScore: 0.78
            }
        };

        this.currentRecommendations = testRecommendations;
        this.renderRecommendations(testRecommendations, testJobData);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç
        this.show();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.RecommendationUI = RecommendationUI; 