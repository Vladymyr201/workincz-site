// üíº –ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ WorkInCZ
class JobsManager {
  constructor() {
    this.db = null;
    this.auth = null;
    this.currentUser = null;
    this.jobsCache = new Map();
    this.filters = {
      category: 'all',
      location: 'all',
      workType: 'all',
      jobType: 'all',
      withHousing: false,
      urgent: false,
      salaryMin: null,
      salaryMax: null
    };
    
    this.init();
  }

  async init() {
    console.log('üìã JobsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...');
    
    // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ AuthManager
    let attempts = 0;
    const maxAttempts = 100;
    
    while (!window.authManager && attempts < maxAttempts) {
      console.log(`‚è≥ –ñ–¥–µ–º AuthManager (–ø–æ–ø—ã—Ç–∫–∞ ${attempts + 1}/${maxAttempts})...`);
      await new Promise(resolve => setTimeout(resolve, 100));
      attempts++;
    }
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ AuthManager
    if (window.authManager) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ waitForReady —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (window.authManager && window.authManager.isInitialized) {
          console.log('‚úÖ AuthManager —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } else {
          console.log('‚è≥ –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AuthManager...');
          while (!window.authManager?.isInitialized && attempts < maxAttempts) {
            await new Promise(resolve => setTimeout(resolve, 100));
            attempts++;
            console.log(`‚è≥ –ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts} - AuthManager: ${window.authManager ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
          }
          
          if (window.authManager?.isInitialized) {
            console.log('‚úÖ AuthManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
          } else {
            console.warn('‚ö†Ô∏è AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏');
          }
        }
        
        this.db = window.authManager.db;
        this.auth = window.authManager.auth;
        
        console.log('üî• JobsManager –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ AuthManager');
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ AuthManager
        if (typeof window.authManager.subscribe === 'function') {
          this.unsubscribeAuth = window.authManager.subscribe((user) => {
            this.currentUser = user;
            if (user) {
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ AuthManager
              this.currentUser.userData = window.authManager.getUserData(user.uid);
            }
          });
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AuthManager:', error);
      }
    } else {
      console.warn('‚ö†Ô∏è AuthManager –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–µ–∑ –Ω–µ–≥–æ');
    }
    
    this.setupEventListeners();
    this.loadJobs();
    console.log('üìã JobsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
  }

  setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç–∫–ª–∏–∫–æ–≤
    document.addEventListener('click', (e) => {
      if (e.target.matches('.apply-btn, .apply-btn *')) {
        e.preventDefault();
        const btn = e.target.closest('.apply-btn');
        const jobId = btn.dataset.jobId;
        this.applyToJob(jobId);
      }
      
      if (e.target.matches('.bid-btn, .bid-btn *')) {
        e.preventDefault();
        const btn = e.target.closest('.bid-btn');
        const jobId = btn.dataset.jobId;
        this.submitBid(jobId);
      }
      
      if (e.target.matches('.save-btn, .save-btn *')) {
        e.preventDefault();
        const btn = e.target.closest('.save-btn');
        const jobId = btn.dataset.jobId;
        this.saveJob(jobId);
      }
    });

    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –Ω–æ–≤–æ–π —Ñ–æ—Ä–º–æ–π –ø–æ–∏—Å–∫–∞
    const searchForm = document.getElementById('jobSearchForm');
    if (searchForm) {
      searchForm.addEventListener('submit', (e) => {
        e.preventDefault();
        this.filters.keywords = document.getElementById('searchKeywords')?.value?.trim() || '';
        this.filters.location = document.getElementById('searchLocation')?.value?.trim() || 'all';
        this.filters.category = document.getElementById('searchCategory')?.value || 'all';
        this.filters.workType = document.getElementById('searchWorkType')?.value || 'all';
        this.filters.withHousing = document.getElementById('filterHousing')?.checked || false;
        this.filters.urgent = document.getElementById('filterUrgent')?.checked || false;
        this.filters.noLanguage = document.getElementById('filterNoLanguage')?.checked || false;
        this.loadJobs();
      });
    }
  }

  async loadJobs(limit = 20) {
    try {
      console.log(`üìã –ó–∞–≥—Ä—É–∂–∞—é ${limit} –≤–∞–∫–∞–Ω—Å–∏–π...`);
      
      // –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      const demoJobs = this.getDemoJobs();
      this.jobsCache.clear();
      
      demoJobs.forEach(job => {
        this.jobsCache.set(job.id, job);
      });
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${demoJobs.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
      return demoJobs;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π:', error);
      return [];
    }
  }

  // –î–µ–º–æ-–≤–∞–∫–∞–Ω—Å–∏–∏
  getDemoJobs() {
    return [
      {
        id: 'demo-1',
        title: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å',
        companyName: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è "–ü—Ä–∞–≥–∞"',
        location: { city: '–ü—Ä–∞–≥–∞' },
        salary: { min: 25000, max: 35000, currency: 'Kƒç' },
        workType: 'full-time',
        category: 'construction',
        description: '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—ã—Ç–Ω—ã–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –ü—Ä–∞–≥–µ. –ñ–∏–ª—å–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è.',
        requirements: {
          languages: [{ name: '—á–µ—à—Å–∫–∏–π', level: '–±–∞–∑–æ–≤—ã–π' }],
          experience: '1+ –ª–µ—Ç'
        },
        isVip: true,
        hasAccommodation: true,
        isUrgent: true
      },
      {
        id: 'demo-2',
        title: '–í–æ–¥–∏—Ç–µ–ª—å-–∫—É—Ä—å–µ—Ä',
        companyName: '–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
        location: { city: '–ë—Ä–Ω–æ' },
        salary: { min: 22000, max: 28000, currency: 'Kƒç' },
        workType: 'full-time',
        category: 'logistics',
        description: '–†–∞–±–æ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–º-–∫—É—Ä—å–µ—Ä–æ–º –≤ –ë—Ä–Ω–æ. –ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫.',
        requirements: {
          languages: [{ name: '—á–µ—à—Å–∫–∏–π', level: '–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è' }],
          experience: '–±–µ–∑ –æ–ø—ã—Ç–∞'
        },
        isVip: false,
        hasAccommodation: false,
        isUrgent: false
      },
      {
        id: 'demo-3',
        title: '–ü—Ä–æ–¥–∞–≤–µ—Ü-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç',
        companyName: '–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä',
        location: { city: '–û—Å—Ç—Ä–∞–≤–∞' },
        salary: { min: 20000, max: 25000, currency: 'Kƒç' },
        workType: 'part-time',
        category: 'sales',
        description: '–†–∞–±–æ—Ç–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–µ–Ω—Ç—Ä–µ. –û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è.',
        requirements: {
          languages: [{ name: '—á–µ—à—Å–∫–∏–π', level: '–±–∞–∑–æ–≤—ã–π' }],
          experience: '–±–µ–∑ –æ–ø—ã—Ç–∞'
        },
        isVip: false,
        hasAccommodation: false,
        isUrgent: true
      }
    ];
  }

  // –û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
  async applyToJob(jobId) {
    try {
      if (!this.currentUser) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        this.showLoginModal();
        return false;
      }

      console.log(`üìã –û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: ${jobId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ—Ç–∫–ª–∏–∫–æ–≤
      const canApply = await this.checkApplicationLimit();
      if (!canApply) {
        this.showUpgradeModal('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ç–∫–ª–∏–∫–æ–≤');
        return false;
      }
      
      // –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      const job = this.jobsCache.get(jobId);
      if (job) {
        console.log(`‚úÖ –û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: ${job.title}`);
        this.showSuccess('–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
        return true;
      }
      
      return false;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é:', error);
      this.showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∫–ª–∏–∫–∞');
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –æ—Ç–∫–ª–∏–∫–æ–≤
  async checkApplicationLimit() {
    if (!this.currentUser) return false;
    
    // –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º
    return true;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
  async saveJob(jobId) {
    try {
      if (!this.currentUser) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        this.showLoginModal();
        return false;
      }

      console.log(`üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏: ${jobId}`);
      
      // –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      const job = this.jobsCache.get(jobId);
      if (job) {
        console.log(`‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${job.title}`);
        this.showSuccess('–í–∞–∫–∞–Ω—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
        return true;
      }
      
      return false;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏:', error);
      this.showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏');
      return false;
    }
  }

  // –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –±–∏—Ä–∂–µ —É—Å–ª—É–≥
  async submitBid(jobId) {
    try {
      if (!this.currentUser) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        this.showLoginModal();
        return false;
      }

      console.log(`üìã –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: ${jobId}`);
      
      // –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      const job = this.jobsCache.get(jobId);
      if (job) {
        console.log(`‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: ${job.title}`);
        this.showSuccess('–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞!');
        return true;
      }
      
      return false;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏:', error);
      this.showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏');
      return false;
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
  formatSalary(salary) {
    if (!salary) return '–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏';
    
    const { min, max, currency } = salary;
    if (min && max) {
      return `${min.toLocaleString()} - ${max.toLocaleString()} ${currency}`;
    } else if (min) {
      return `–æ—Ç ${min.toLocaleString()} ${currency}`;
    } else if (max) {
      return `–¥–æ ${max.toLocaleString()} ${currency}`;
    }
    
    return '–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏';
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã
  formatWorkType(workType) {
    const types = {
      'full-time': '–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å',
      'part-time': '–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å',
      'contract': '–ö–æ–Ω—Ç—Ä–∞–∫—Ç',
      'temporary': '–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞'
    };
    return types[workType] || workType;
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª –≤—Ö–æ–¥–∞
  showLoginModal() {
    if (window.enhancedAuthSystem) {
      window.enhancedAuthSystem.showEnhancedLoginModal();
    } else {
      console.log('‚ùå EnhancedAuthSystem –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  showUpgradeModal(message) {
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
    
    const modalContent = document.createElement('div');
    modalContent.className = 'bg-white rounded-xl max-w-md w-full mx-4 p-6';
    
    const content = document.createElement('div');
    content.className = 'text-center';
    
    const icon = document.createElement('div');
    icon.className = 'w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4';
    icon.innerHTML = '<i class="ri-vip-crown-line text-primary text-2xl"></i>';
    
    const title = document.createElement('h3');
    title.className = 'text-xl font-bold text-gray-900 mb-2';
    title.textContent = '–û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å';
    
    const description = document.createElement('p');
    description.className = 'text-gray-600 mb-6';
    description.textContent = message;
    
    const buttons = document.createElement('div');
    buttons.className = 'flex gap-3';
    
    const upgradeBtn = document.createElement('button');
    upgradeBtn.className = 'upgrade-btn bg-primary text-white px-6 py-3 rounded-lg font-medium hover:bg-primary/90 flex-1';
    upgradeBtn.textContent = '–û–±–Ω–æ–≤–∏—Ç—å';
    
    const cancelBtn = document.createElement('button');
    cancelBtn.className = 'cancel-btn bg-gray-100 text-gray-700 px-6 py-3 rounded-lg font-medium hover:bg-gray-200 flex-1';
    cancelBtn.textContent = '–û—Ç–º–µ–Ω–∞';
    
    buttons.appendChild(upgradeBtn);
    buttons.appendChild(cancelBtn);
    
    content.appendChild(icon);
    content.appendChild(title);
    content.appendChild(description);
    content.appendChild(buttons);
    
    modalContent.appendChild(content);
    modal.appendChild(modalContent);
    
    cancelBtn.onclick = () => modal.remove();
    upgradeBtn.onclick = () => {
      modal.remove();
      window.location.href = '#subscription';
    };

    document.body.appendChild(modal);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—Ö
  showSuccess(message) {
    if (window.showToast) {
      window.showToast(message, 'success');
    } else {
      console.log('‚úÖ', message);
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
  showError(message) {
    if (window.showToast) {
      window.showToast(message, 'error');
    } else {
      console.error('‚ùå', message);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –ø–æ ID
  getJobById(jobId) {
    return this.jobsCache.get(jobId);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏
  getAllJobs() {
    return Array.from(this.jobsCache.values());
  }

  // –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π
  searchJobs(query) {
    const jobs = this.getAllJobs();
    if (!query) return jobs;
    
    const searchTerm = query.toLowerCase();
    return jobs.filter(job => 
      job.title.toLowerCase().includes(searchTerm) ||
      job.companyName.toLowerCase().includes(searchTerm) ||
      job.location.city.toLowerCase().includes(searchTerm)
    );
  }

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–π
  filterJobs(filters) {
    let jobs = this.getAllJobs();
    
    if (filters.category && filters.category !== 'all') {
      jobs = jobs.filter(job => job.category === filters.category);
    }
    
    if (filters.city) {
      jobs = jobs.filter(job => job.location.city.toLowerCase().includes(filters.city.toLowerCase()));
    }
    
    if (filters.hasAccommodation) {
      jobs = jobs.filter(job => job.hasAccommodation);
    }
    
    if (filters.isUrgent) {
      jobs = jobs.filter(job => job.isUrgent);
    }
    
    if (filters.workType && filters.workType !== 'any') {
      jobs = jobs.filter(job => job.workType === filters.workType);
    }
    
    return jobs;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
window.JobsManager = JobsManager; 