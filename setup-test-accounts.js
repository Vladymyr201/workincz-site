// üîê –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Firebase Admin SDK
// –ó–∞–ø—É—Å–∫: node setup-test-accounts.js

const admin = require('firebase-admin');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin SDK
// –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å service account key –≤ Firebase Console
// Project Settings -> Service Accounts -> Generate New Private Key

let serviceAccount;
try {
  serviceAccount = require('./firebase-service-account.json');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª firebase-service-account.json');
  console.log('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:');
  console.log('1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Firebase Console -> Project Settings -> Service Accounts');
  console.log('2. –ù–∞–∂–º–∏—Ç–µ "Generate New Private Key"');
  console.log('3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –∫–∞–∫ firebase-service-account.json –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞');
  process.exit(1);
}

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const auth = admin.auth();
const firestore = admin.firestore();

// –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
const testAccounts = [
  {
    role: 'candidate',
    email: 'test-candidate@workclick.cz',
    password: 'test1234',
    displayName: '–¢–µ—Å—Ç–æ–≤—ã–π –°–æ–∏—Å–∫–∞—Ç–µ–ª—å',
    profile: {
      role: 'candidate',
      firstName: '–ò–≤–∞–Ω',
      lastName: '–ü–µ—Ç—Ä–æ–≤',
      phone: '+420123456789',
      location: '–ü—Ä–∞–≥–∞',
      skills: ['JavaScript', 'React', 'Node.js'],
      experience: '3 –≥–æ–¥–∞',
      education: '–í—ã—Å—à–µ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ',
      languages: ['–†—É—Å—Å–∫–∏–π', '–ß–µ—à—Å–∫–∏–π', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π'],
      visaStatus: '–†–∞–±–æ—á–∞—è –≤–∏–∑–∞',
      salaryExpectation: '45000 CZK',
      availability: '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ',
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    }
  },
  {
    role: 'employer',
    email: 'test-employer@workclick.cz',
    password: 'test1234',
    displayName: '–¢–µ—Å—Ç–æ–≤—ã–π –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å',
    profile: {
      role: 'employer',
      companyName: 'TechCorp s.r.o.',
      firstName: '–ê–Ω–Ω–∞',
      lastName: '–ù–æ–≤–∞–∫–æ–≤–∞',
      phone: '+420987654321',
      location: '–ü—Ä–∞–≥–∞',
      industry: 'IT –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
      companySize: '50-100 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
      website: 'https://techcorp.cz',
      description: '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è IT –∫–æ–º–ø–∞–Ω–∏—è',
      verificationStatus: 'verified',
      subscriptionPlan: 'premium',
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    }
  },
  {
    role: 'agency',
    email: 'test-agency@workclick.cz',
    password: 'test1234',
    displayName: '–¢–µ—Å—Ç–æ–≤–æ–µ –ê–≥–µ–Ω—Ç—Å—Ç–≤–æ',
    profile: {
      role: 'agency',
      companyName: 'WorkBridge Agency s.r.o.',
      firstName: '–ü–µ—Ç—Ä',
      lastName: '–°–º–∏—Ä–Ω–æ–≤',
      phone: '+420555666777',
      location: '–ë—Ä–Ω–æ',
      industry: '–†–µ–∫—Ä—É—Ç–∏–Ω–≥ –∏ HR',
      companySize: '10-25 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
      website: 'https://workbridge.cz',
      description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ –ø–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É',
      licenseNumber: 'CZ123456789',
      verificationStatus: 'verified',
      subscriptionPlan: 'premium',
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    }
  },
  {
    role: 'admin',
    email: 'test-admin@workclick.cz',
    password: 'test1234',
    displayName: '–¢–µ—Å—Ç–æ–≤—ã–π –ê–¥–º–∏–Ω',
    profile: {
      role: 'admin',
      firstName: '–ê–¥–º–∏–Ω',
      lastName: '–°–∏—Å—Ç–µ–º–Ω—ã–π',
      phone: '+420111222333',
      permissions: ['all'],
      isSuperAdmin: true,
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    }
  }
];

async function createTestAccounts() {
  console.log('üîê –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...');
  
  for (const account of testAccounts) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      try {
        const existingUser = await auth.getUserByEmail(account.email);
        console.log(`‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${account.email}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ Firestore
        await firestore.collection('users').doc(existingUser.uid).set({
          email: account.email,
          name: account.name,
          role: account.role,
          verified: true,
          is_premium: false,
          updated_at: admin.firestore.FieldValue.serverTimestamp()
        }, { merge: true });
        
        console.log(`üìù –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Firestore –¥–ª—è: ${account.email}`);
        continue;
      } catch (error) {
        if (error.code !== 'auth/user-not-found') {
          throw error;
        }
      }
      
      // –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firebase Auth
      const userRecord = await auth.createUser({
        email: account.email,
        password: account.password,
        displayName: account.displayName,
        emailVerified: true
      });
      
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: ${account.email} (${account.role})`);
      
      // –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ñ–∏–ª—å –≤ Firestore
      await firestore.collection('users').doc(userRecord.uid).set({
        email: account.email,
        name: account.name,
        role: account.role,
        verified: true,
        is_premium: false,
        created_at: admin.firestore.FieldValue.serverTimestamp(),
        updated_at: admin.firestore.FieldValue.serverTimestamp()
      });
      
      console.log(`üìù –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –≤ Firestore –¥–ª—è: ${account.email}`);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${account.email}:`, error.message);
    }
  }
  
  console.log('üéâ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('');
  console.log('üìã –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:');
  testAccounts.forEach(account => {
    console.log(`   ${account.email} (${account.role}) - –ø–∞—Ä–æ–ª—å: ${account.password}`);
  });
  console.log('');
  console.log('üé≠ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–æ–ª–µ–π!');
  
  process.exit(0);
}

createTestAccounts().catch(console.error); 