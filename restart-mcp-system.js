#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ MCP —Å–∏—Å—Ç–µ–º—ã...\n');

// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MCP
console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP...');
try {
  const mcpConfig = JSON.parse(fs.readFileSync('mcp.json', 'utf8'));
  console.log('‚úÖ mcp.json –∑–∞–≥—Ä—É–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  
  const fullAutoQAPath = mcpConfig.mcpServers.FullAutoQA.args[0];
  console.log(`üìÅ –ü—É—Ç—å –∫ FullAutoQA: ${fullAutoQAPath}`);
  
  if (fs.existsSync(fullAutoQAPath)) {
    console.log('‚úÖ –§–∞–π–ª FullAutoQA —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
  } else {
    console.log('‚ùå –§–∞–π–ª FullAutoQA –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    process.exit(1);
  }
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ mcp.json:', error.message);
  process.exit(1);
}

// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º MCP SDK
console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ MCP SDK...');
try {
  const sdkVersion = execSync('npm list @modelcontextprotocol/sdk', { encoding: 'utf8' });
  console.log('‚úÖ MCP SDK —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', sdkVersion.trim());
} catch (error) {
  console.log('‚ùå MCP SDK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
  console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...');
  execSync('npm install @modelcontextprotocol/sdk', { stdio: 'inherit' });
}

// 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º FullAutoQA —Å–µ—Ä–≤–µ—Ä
console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FullAutoQA —Å–µ—Ä–≤–µ—Ä–∞...');
try {
  const serverPath = path.resolve('servers/src/testing/full-auto-qa-simple-mcp.cjs');
  console.log(`üß™ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞: ${serverPath}`);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
  const child = require('child_process').spawn('node', [serverPath], {
    stdio: ['pipe', 'pipe', 'pipe']
  });
  
  // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
  setTimeout(() => {
    if (child.killed) {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è');
    } else {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ');
      child.kill();
    }
  }, 2000);
  
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
}

// 4. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ Cursor
console.log('\n4Ô∏è‚É£ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ Cursor:');
console.log(`
üîÑ –ü–û–õ–ù–ê–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê CURSOR:

1. –ó–∞–∫—Ä–æ–π—Ç–µ Cursor –ø–æ–ª–Ω–æ—Å—Ç—å—é (Ctrl+Shift+Q)
2. –£–¥–∞–ª–∏—Ç–µ –∫—ç—à MCP:
   - Windows: %APPDATA%\\Cursor\\User\\globalStorage\\modelcontextprotocol
   - Mac: ~/Library/Application Support/Cursor/User/globalStorage/modelcontextprotocol
   - Linux: ~/.config/Cursor/User/globalStorage/modelcontextprotocol

3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor
4. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MCP (Ctrl+Shift+P ‚Üí "MCP: Open Settings")
5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ FullAutoQA –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "4 tools enabled" —Å –∑–µ–ª–µ–Ω–æ–π —Ç–æ—á–∫–æ–π

üìã –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è:
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (F12)
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Node.js –≤–µ—Ä—Å–∏–∏ 16+ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
`);

// 5. –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞
const status = {
  timestamp: new Date().toISOString(),
  mcpConfig: 'OK',
  sdkInstalled: 'OK',
  serverPath: path.resolve('servers/src/testing/full-auto-qa-simple-mcp.cjs'),
  instructions: 'Cursor restart required'
};

fs.writeFileSync('mcp-restart-status.json', JSON.stringify(status, null, 2));
console.log('\n‚úÖ –°—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ mcp-restart-status.json');

console.log('\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
console.log('1. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ Cursor –ø–æ–ª–Ω–æ—Å—Ç—å—é');
console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MCP');
console.log('3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FullAutoQA —Ä–∞–±–æ—Ç–∞–µ—Ç'); 