const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const JS_DIR = './public/js';
const OUTPUT_DIR = './public/js-hashed';
const MANIFEST_FILE = './public/manifest.json';

// –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
if (!fs.existsSync(OUTPUT_DIR)) {
  fs.mkdirSync(OUTPUT_DIR, { recursive: true });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞ —Ñ–∞–π–ª–∞
function generateHash(content) {
  return crypto.createHash('md5').update(content).digest('hex').substring(0, 8);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å —Ö–µ—à–µ–º
function copyFileWithHash(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  const hash = generateHash(content);
  const ext = path.extname(filePath);
  const name = path.basename(filePath, ext);
  const hashedName = `${name}.${hash}${ext}`;
  const hashedPath = path.join(OUTPUT_DIR, hashedName);
  
  fs.copyFileSync(filePath, hashedPath);
  
  return {
    original: path.relative('./public', filePath),
    hashed: path.relative('./public', hashedPath),
    hash: hash
  };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function generateHashedFiles() {
  console.log('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
  
  const manifest = {};
  const jsFiles = fs.readdirSync(JS_DIR).filter(file => file.endsWith('.js'));
  
  jsFiles.forEach(file => {
    const filePath = path.join(JS_DIR, file);
    const result = copyFileWithHash(filePath);
    manifest[result.original] = result.hashed;
    
    console.log(`‚úÖ ${result.original} ‚Üí ${result.hashed} (${result.hash})`);
  });
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
  fs.writeFileSync(MANIFEST_FILE, JSON.stringify(manifest, null, 2));
  console.log(`üìã –ú–∞–Ω–∏—Ñ–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${MANIFEST_FILE}`);
  
  return manifest;
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  generateHashedFiles();
}

module.exports = { generateHashedFiles }; 