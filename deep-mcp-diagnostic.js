#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync, spawn } = require('child_process');
const os = require('os');

console.log('üîç –ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê MCP –°–ï–†–í–ï–†–û–í\n');

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
console.log('1Ô∏è‚É£ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï:');
console.log(`   –û–°: ${os.platform()} ${os.release()}`);
console.log(`   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${os.arch()}`);
console.log(`   Node.js: ${process.version}`);
console.log(`   –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${process.cwd()}`);

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ MCP SDK
console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê MCP SDK:');
try {
  const sdkPath = require.resolve('@modelcontextprotocol/sdk/server/index.js');
  console.log(`   ‚úÖ MCP SDK –Ω–∞–π–¥–µ–Ω: ${sdkPath}`);
  
  const sdkPackage = JSON.parse(fs.readFileSync(path.join(path.dirname(sdkPath), '..', 'package.json'), 'utf8'));
  console.log(`   –í–µ—Ä—Å–∏—è SDK: ${sdkPackage.version}`);
} catch (error) {
  console.log(`   ‚ùå MCP SDK –Ω–µ –Ω–∞–π–¥–µ–Ω: ${error.message}`);
}

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:');
try {
  const mcpConfig = JSON.parse(fs.readFileSync('mcp.json', 'utf8'));
  console.log('   ‚úÖ mcp.json –∑–∞–≥—Ä—É–∂–µ–Ω');
  
  const servers = Object.keys(mcpConfig.mcpServers);
  console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: ${servers.length}`);
  
  servers.forEach(serverName => {
    const server = mcpConfig.mcpServers[serverName];
    console.log(`   üìã ${serverName}:`);
    console.log(`      –ö–æ–º–∞–Ω–¥–∞: ${server.command}`);
    console.log(`      –ê—Ä–≥—É–º–µ–Ω—Ç—ã: ${JSON.stringify(server.args)}`);
    
    if (server.args && server.args[0]) {
      const serverPath = server.args[0];
      if (fs.existsSync(serverPath)) {
        console.log(`      ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${serverPath}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        try {
          fs.accessSync(serverPath, fs.constants.R_OK | fs.constants.X_OK);
          console.log(`      ‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ OK`);
        } catch (error) {
          console.log(`      ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞: ${error.message}`);
        }
      } else {
        console.log(`      ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${serverPath}`);
      }
    }
  });
} catch (error) {
  console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`);
}

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('\n4Ô∏è‚É£ –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:');
const envVars = ['PATH', 'NODE_PATH', 'MCP_SERVER_PATH', 'CURSOR_MCP_PATH'];
envVars.forEach(varName => {
  const value = process.env[varName];
  if (value) {
    console.log(`   ${varName}: ${value.substring(0, 100)}${value.length > 100 ? '...' : ''}`);
  } else {
    console.log(`   ${varName}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
  }
});

// 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Cursor
console.log('\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–†–û–¶–ï–°–°–û–í CURSOR:');
try {
  if (os.platform() === 'win32') {
    const processes = execSync('tasklist /FI "IMAGENAME eq Cursor.exe"', { encoding: 'utf8' });
    if (processes.includes('Cursor.exe')) {
      console.log('   ‚úÖ Cursor –∑–∞–ø—É—â–µ–Ω');
    } else {
      console.log('   ‚ùå Cursor –Ω–µ –∑–∞–ø—É—â–µ–Ω');
    }
  } else {
    const processes = execSync('ps aux | grep -i cursor', { encoding: 'utf8' });
    if (processes.includes('cursor')) {
      console.log('   ‚úÖ Cursor –∑–∞–ø—É—â–µ–Ω');
    } else {
      console.log('   ‚ùå Cursor –Ω–µ –∑–∞–ø—É—â–µ–Ω');
    }
  }
} catch (error) {
  console.log(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã: ${error.message}`);
}

// 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ Cursor
console.log('\n6Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ö–≠–®–ê CURSOR:');
const cursorPaths = [
  path.join(os.homedir(), 'AppData', 'Roaming', 'Cursor'),
  path.join(os.homedir(), 'AppData', 'Local', 'Cursor'),
  path.join(os.homedir(), '.cursor'),
  path.join(os.tmpdir(), 'cursor')
];

cursorPaths.forEach(cachePath => {
  if (fs.existsSync(cachePath)) {
    console.log(`   üìÅ –ö—ç—à –Ω–∞–π–¥–µ–Ω: ${cachePath}`);
    try {
      const stats = fs.statSync(cachePath);
      console.log(`      –†–∞–∑–º–µ—Ä: ${(stats.size / 1024 / 1024).toFixed(2)} MB`);
      console.log(`      –ò–∑–º–µ–Ω–µ–Ω: ${stats.mtime}`);
    } catch (error) {
      console.log(`      ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: ${error.message}`);
    }
  } else {
    console.log(`   ‚ùå –ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω: ${cachePath}`);
  }
});

// 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
console.log('\n7Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ï–†–í–ï–†–ê:');
const serverPath = 'servers/src/testing/full-auto-qa-minimal.cjs';

try {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
  console.log('   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞...');
  execSync(`node -c "${serverPath}"`, { stdio: 'pipe' });
  console.log('   ‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  console.log('   üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
  const server = spawn('node', [serverPath], {
    stdio: ['pipe', 'pipe', 'pipe'],
    timeout: 5000
  });
  
  let serverOutput = '';
  let serverError = '';
  
  server.stdout.on('data', (data) => {
    serverOutput += data.toString();
  });
  
  server.stderr.on('data', (data) => {
    serverError += data.toString();
  });
  
  server.on('close', (code) => {
    if (code === 0) {
      console.log('   ‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
    } else {
      console.log(`   ‚ùå –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: ${code}`);
    }
    
    if (serverOutput) {
      console.log(`   üì§ –í—ã–≤–æ–¥: ${serverOutput.trim()}`);
    }
    
    if (serverError) {
      console.log(`   üì• –û—à–∏–±–∫–∏: ${serverError.trim()}`);
    }
  });
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    if (!server.killed) {
      server.kill();
      console.log('   ‚èπÔ∏è –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }, 3000);
  
} catch (error) {
  console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
}

// 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
console.log('\n8Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò:');
const nodeVersion = process.version;
const majorVersion = parseInt(nodeVersion.substring(1).split('.')[0]);

if (majorVersion >= 16) {
  console.log(`   ‚úÖ Node.js ${nodeVersion} —Å–æ–≤–º–µ—Å—Ç–∏–º —Å MCP`);
} else {
  console.log(`   ‚ùå Node.js ${nodeVersion} —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π –¥–ª—è MCP`);
}

// 9. –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
console.log('\n9Ô∏è‚É£ –ò–ó–í–ï–°–¢–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ MCP:');
console.log('   üî¥ –ü—Ä–æ–±–ª–µ–º–∞ 1: –ö—ç—à Cursor –Ω–µ –æ—á–∏—â–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ');
console.log('   üî¥ –ü—Ä–æ–±–ª–µ–º–∞ 2: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ handlers');
console.log('   üî¥ –ü—Ä–æ–±–ª–µ–º–∞ 3: –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—É—Ç—è–º–∏ –≤ Windows');
console.log('   üî¥ –ü—Ä–æ–±–ª–µ–º–∞ 4: –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤–µ—Ä—Å–∏–π MCP SDK');
console.log('   üî¥ –ü—Ä–æ–±–ª–µ–º–∞ 5: –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º');

// 10. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
console.log('\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
console.log('   1. –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç–µ Cursor –∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ');
console.log('   2. –û—á–∏—Å—Ç–∏—Ç–µ –≤—Å–µ –∫—ç—à–∏ –≤—Ä—É—á–Ω—É—é');
console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
console.log('   4. –û–±–Ω–æ–≤–∏—Ç–µ Node.js –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏');
console.log('   5. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞');
console.log('   6. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å (–º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å MCP)');
console.log('   7. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
console.log('   8. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π MCP SDK');

console.log('\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!'); 