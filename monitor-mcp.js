#!/usr/bin/env node

/**
 * üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì MCP –°–ï–†–í–ï–†–û–í
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ—Ç—á–µ—Ç—ã
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

class MCPMonitor {
  constructor() {
    this.reportPath = 'mcp-monitoring-report.json';
    this.alerts = [];
  }

  async checkServerHealth(serverName, command) {
    try {
      const output = execSync(command, { stdio: 'pipe', timeout: 10000 });
      return { 
        status: 'healthy', 
        timestamp: new Date().toISOString(),
        version: output.toString().trim() 
      };
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${serverName}:`, error.message);
      this.alerts.push({
        server: serverName,
        error: error.message,
        timestamp: new Date().toISOString()
      });
      return { status: 'unhealthy', error: error.message, timestamp: new Date().toISOString() };
    }
  }

  async generateReport() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    const servers = [
      { name: 'node', command: 'node --version' },
      { name: 'npm', command: 'npm --version' },
      { name: 'git', command: 'git --version' }
    ];

    const report = {
      timestamp: new Date().toISOString(),
      project: 'WorkInCZ',
      servers: {},
      alerts: this.alerts,
      summary: {
        total: servers.length,
        healthy: 0,
        unhealthy: 0
      }
    };

    for (const server of servers) {
      const health = await this.checkServerHealth(server.name, server.command);
      report.servers[server.name] = health;
      
      if (health.status === 'healthy') {
        report.summary.healthy++;
      } else {
        report.summary.unhealthy++;
      }
    }

    fs.writeFileSync(this.reportPath, JSON.stringify(report, null, 2));
    console.log('üìä –û—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω:', this.reportPath);
    
    if (this.alerts.length > 0) {
      console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:', this.alerts.length);
      this.alerts.forEach(alert => {
        console.log(`  - ${alert.server}: ${alert.error}`);
      });
    }

    return report;
  }
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const monitor = new MCPMonitor();
monitor.generateReport().then(report => {
  console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω');
  process.exit(report.summary.unhealthy > 0 ? 1 : 0);
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
  process.exit(1);
});
