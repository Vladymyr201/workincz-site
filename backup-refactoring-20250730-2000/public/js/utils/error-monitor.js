/**
 * üö® Error Monitor - –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * –î–∞—Ç–∞: 30.07.2025
 * 
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ JavaScript, Firebase –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

class ErrorMonitor {
    constructor() {
        this.errors = [];
        this.maxErrors = 100;
        this.init();
    }

    init() {
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç –æ—à–∏–±–æ–∫ JavaScript
        window.addEventListener('error', (event) => {
            this.logError('JavaScript Error', {
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                error: event.error?.stack,
                url: window.location.href,
                userAgent: navigator.userAgent,
                timestamp: new Date().toISOString()
            });
        });

        // –ü–µ—Ä–µ—Ö–≤–∞—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö Promise rejections
        window.addEventListener('unhandledrejection', (event) => {
            this.logError('Unhandled Promise Rejection', {
                reason: event.reason,
                url: window.location.href,
                userAgent: navigator.userAgent,
                timestamp: new Date().toISOString()
            });
        });

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.monitorPerformance();

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Firebase –æ—à–∏–±–æ–∫
        this.monitorFirebase();

        console.log('üö® Error Monitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    logError(type, details) {
        const error = {
            id: this.generateId(),
            type,
            details,
            timestamp: new Date().toISOString()
        };

        this.errors.push(error);

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
        if (this.errors.length > this.maxErrors) {
            this.errors.shift();
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        console.error(`üö® ${type}:`, details);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        if (this.isCriticalError(type, details)) {
            this.sendToServer(error);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        this.saveToStorage();
    }

    isCriticalError(type, details) {
        // –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const criticalPatterns = [
            'Firebase',
            'Authentication',
            'Network',
            'SyntaxError',
            'ReferenceError'
        ];

        return criticalPatterns.some(pattern => 
            type.includes(pattern) || 
            details.message?.includes(pattern) ||
            details.reason?.includes(pattern)
        );
    }

    async sendToServer(error) {
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            const response = await fetch('/api/errors', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(error)
            });

            if (!response.ok) {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
            }
        } catch (err) {
            console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—à–∏–±–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', err);
        }
    }

    monitorPerformance() {
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('load', () => {
            const loadTime = performance.now();
            
            if (loadTime > 3000) { // –ë–æ–ª—å—à–µ 3 —Å–µ–∫—É–Ω–¥
                this.logError('Performance Warning', {
                    message: '–ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
                    loadTime: Math.round(loadTime),
                    url: window.location.href,
                    timestamp: new Date().toISOString()
                });
            }
        });

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
        if ('memory' in performance) {
            setInterval(() => {
                const memory = performance.memory;
                const usedMB = Math.round(memory.usedJSHeapSize / 1024 / 1024);
                const totalMB = Math.round(memory.totalJSHeapSize / 1024 / 1024);

                if (usedMB > 100) { // –ë–æ–ª—å—à–µ 100MB
                    this.logError('Memory Warning', {
                        message: '–í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏',
                        usedMB,
                        totalMB,
                        url: window.location.href,
                        timestamp: new Date().toISOString()
                    });
                }
            }, 30000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        }
    }

    monitorFirebase() {
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º Firebase –æ—à–∏–±–∫–∏
        const originalConsoleError = console.error;
        console.error = (...args) => {
            const message = args.join(' ');
            
            if (message.includes('Firebase') || message.includes('firebase')) {
                this.logError('Firebase Error', {
                    message,
                    url: window.location.href,
                    userAgent: navigator.userAgent,
                    timestamp: new Date().toISOString()
                });
            }

            // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π console.error
            originalConsoleError.apply(console, args);
        };
    }

    generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    }

    saveToStorage() {
        try {
            localStorage.setItem('workincz-errors', JSON.stringify(this.errors));
        } catch (err) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ localStorage:', err);
        }
    }

    loadFromStorage() {
        try {
            const stored = localStorage.getItem('workincz-errors');
            if (stored) {
                this.errors = JSON.parse(stored);
            }
        } catch (err) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—à–∏–±–∫–∏ –∏–∑ localStorage:', err);
        }
    }

    getErrors() {
        return this.errors;
    }

    clearErrors() {
        this.errors = [];
        localStorage.removeItem('workincz-errors');
    }

    getErrorStats() {
        const stats = {
            total: this.errors.length,
            byType: {},
            recent: this.errors.slice(-10)
        };

        this.errors.forEach(error => {
            stats.byType[error.type] = (stats.byType[error.type] || 0) + 1;
        });

        return stats;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.errorMonitor = new ErrorMonitor();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ErrorMonitor;
} 