// üí¨ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π real-time —á–∞—Ç JobBridge
// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ emoji, –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, GDPR, –º–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è

class ChatWidget {
  constructor() {
    this.db = firebase.firestore();
    this.auth = firebase.auth();
    this.currentUser = null;
    this.currentChatId = null;
    this.unsubscribeMessages = null;
    this.emojiList = ['üòÄ','üëç','üî•','üíº','üôè','üéâ','üòé','‚ù§Ô∏è','ü§ù','üá®üáø','üá∑üá∫','üá∫üá¶'];
    this.quickReplies = [
      '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞–∫–∞–Ω—Å–∏—è.',
      '–ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏.',
      '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!',
      '–ö–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ?',
      '–ï—Å—Ç—å –ª–∏ –∂–∏–ª—å—ë?'
    ];
    this.init();
  }

  init() {
    this.createChatModal();
    this.setupEventListeners();
    this.auth.onAuthStateChanged(user => {
      this.currentUser = user;
    });
  }

  createChatModal() {
    if (document.getElementById('chatModal')) return;
    const modal = document.createElement('div');
    modal.id = 'chatModal';
    modal.className = 'fixed inset-0 z-50 flex items-end md:items-center justify-center bg-black/40 hidden';
    modal.innerHTML = `
      <div class="bg-white rounded-t-2xl md:rounded-2xl shadow-lg w-full max-w-md mx-auto flex flex-col h-[80vh] md:h-[70vh]">
        <div class="flex items-center justify-between p-4 border-b">
          <div class="flex items-center gap-2">
            <span id="chatUserAvatar" class="w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center text-primary text-lg"></span>
            <span id="chatUserName" class="font-medium text-gray-900">–ß–∞—Ç</span>
            <span id="chatUserOnline" class="ml-2 w-2 h-2 rounded-full bg-success hidden"></span>
          </div>
          <button id="closeChatModal" class="text-gray-400 hover:text-gray-600"><i class="ri-close-line text-2xl"></i></button>
        </div>
        <div id="chatMessages" class="flex-1 overflow-y-auto p-4 space-y-3 bg-gray-50"></div>
        <div class="p-3 border-t bg-white">
          <div class="flex gap-2 mb-2 flex-wrap">
            ${this.quickReplies.map(q => `<button class="quick-reply bg-primary/10 text-primary px-3 py-1 rounded-full text-xs hover:bg-primary/20">${q}</button>`).join('')}
          </div>
          <div class="flex items-center gap-2">
            <button id="emojiBtn" class="text-xl"><i class="ri-emotion-happy-line"></i></button>
            <input id="chatInput" type="text" class="flex-1 px-3 py-2 border border-gray-300 rounded focus:ring-2 focus:ring-primary/20 focus:border-primary focus:outline-none text-sm" placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ...">
            <button id="sendMsgBtn" class="bg-primary text-white px-4 py-2 rounded-button font-medium hover:bg-primary/90"><i class="ri-send-plane-2-line"></i></button>
          </div>
          <div id="emojiPicker" class="mt-2 p-2 bg-white border rounded shadow-lg flex gap-1 flex-wrap hidden">
            ${this.emojiList.map(e => `<button class="emoji-btn text-xl">${e}</button>`).join('')}
          </div>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  }

  setupEventListeners() {
    document.getElementById('closeChatModal').onclick = () => this.hide();
    document.getElementById('emojiBtn').onclick = () => {
      document.getElementById('emojiPicker').classList.toggle('hidden');
    };
    document.querySelectorAll('.emoji-btn').forEach(btn => {
      btn.onclick = () => {
        document.getElementById('chatInput').value += btn.textContent;
        document.getElementById('emojiPicker').classList.add('hidden');
      };
    });
    document.getElementById('sendMsgBtn').onclick = () => this.sendMessage();
    document.getElementById('chatInput').onkeydown = (e) => {
      if (e.key === 'Enter') this.sendMessage();
    };
    document.querySelectorAll('.quick-reply').forEach(btn => {
      btn.onclick = () => {
        document.getElementById('chatInput').value = btn.textContent;
        this.sendMessage();
      };
    });
  }

  // –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º/–ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏
  open({chatId, toUser, vacancyTitle, vacancyId}) {
    document.getElementById('chatModal').classList.remove('hidden');
    document.getElementById('chatUserName').textContent = toUser?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    document.getElementById('chatUserAvatar').textContent = (toUser?.name || 'U')[0];
    // TODO: online-—Å—Ç–∞—Ç—É—Å, –∞–≤–∞—Ç–∞—Ä, GDPR-privacy
    this.currentChatId = chatId;
    this.listenMessages(chatId);
    // Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —á–∞—Ç–∞
    if (window.notificationManager) {
      window.notificationManager.show('–û—Ç–∫—Ä—ã—Ç —á–∞—Ç —Å ' + (toUser?.name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'), 'info');
    }
  }

  hide() {
    document.getElementById('chatModal').classList.add('hidden');
    if (this.unsubscribeMessages) this.unsubscribeMessages();
    document.getElementById('chatMessages').innerHTML = '';
  }

  listenMessages(chatId) {
    if (this.unsubscribeMessages) this.unsubscribeMessages();
    this.unsubscribeMessages = this.db.collection('chats').doc(chatId).collection('messages')
      .orderBy('createdAt', 'asc')
      .onSnapshot(snapshot => {
        const messages = [];
        snapshot.forEach(doc => messages.push(doc.data()));
        this.renderMessages(messages);
      });
  }

  renderMessages(messages) {
    const container = document.getElementById('chatMessages');
    container.innerHTML = messages.map(msg => `
      <div class="flex ${msg.senderId === this.currentUser?.uid ? 'justify-end' : 'justify-start'}">
        <div class="max-w-[70%] px-4 py-2 rounded-lg mb-1 ${msg.senderId === this.currentUser?.uid ? 'bg-primary text-white' : 'bg-gray-200 text-gray-900'}">
          <span>${msg.text}</span>
          <span class="ml-2 text-xs opacity-60">${msg.createdAt?.toDate ? msg.createdAt.toDate().toLocaleTimeString('ru-RU',{hour:'2-digit',minute:'2-digit'}) : ''}</span>
        </div>
      </div>
    `).join('');
    container.scrollTop = container.scrollHeight;
  }

  async sendMessage() {
    const input = document.getElementById('chatInput');
    const text = input.value.trim();
    if (!text || !this.currentChatId || !this.currentUser) return;
    input.value = '';
    await this.db.collection('chats').doc(this.currentChatId).collection('messages').add({
      text,
      senderId: this.currentUser.uid,
      createdAt: firebase.firestore.FieldValue.serverTimestamp()
    });
    // Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É (TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ notification-manager.js)
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —á–∞—Ç–∞
window.chatWidget = new ChatWidget();

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ —á–∞—Ç–∞ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
window.startChatWithUser = async function(userId, initialMsg, vacancyId) {
  // –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ userId
  const currentUser = firebase.auth().currentUser;
  if (!currentUser) {
    if (window.registrationSystem) window.registrationSystem.showLoginModal();
    return;
  }
  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π chatId (user1_user2 –∏–ª–∏ vacancyId_user1_user2)
  const chatId = vacancyId ? `${vacancyId}_${[currentUser.uid, userId].sort().join('_')}` : [currentUser.uid, userId].sort().join('_');
  // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
  let toUser = { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' };
  try {
    const userDoc = await firebase.firestore().collection('users').doc(userId).get();
    if (userDoc.exists) toUser = userDoc.data();
  } catch {}
  window.chatWidget.open({chatId, toUser, vacancyId});
  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ
  if (initialMsg) {
    await firebase.firestore().collection('chats').doc(chatId).collection('messages').add({
      text: initialMsg,
      senderId: currentUser.uid,
      createdAt: firebase.firestore.FieldValue.serverTimestamp()
    });
  }
};

window.ChatWidget = ChatWidget; 