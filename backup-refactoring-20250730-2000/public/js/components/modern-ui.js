/**
 * üé® Modern UI Components - –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ Next.js –ø—Ä–æ–µ–∫—Ç–∞
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * –î–∞—Ç–∞: 30.07.2025
 * 
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 * - ModernButton - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
 * - ModernInput - —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
 * - ModernModal - –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
 * - ModernToast - —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * - ModernDropdown - –≤—ã–ø–∞–¥–∞—é—â–∏–µ –º–µ–Ω—é
 */

class ModernUI {
    constructor() {
        this.toasts = [];
        this.modals = [];
        this.dropdowns = [];
        this.init();
    }

    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.createToastContainer();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        this.createModalContainer();
        
        console.log('üé® Modern UI Components –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
     */
    createModalContainer() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        if (document.getElementById('modal-container')) {
            return;
        }
        
        const modalContainer = document.createElement('div');
        modalContainer.id = 'modal-container';
        modalContainer.className = 'fixed inset-0 z-50 hidden';
        modalContainer.innerHTML = `
            <div class="fixed inset-0 bg-black bg-opacity-50 transition-opacity"></div>
            <div class="flex items-center justify-center min-h-screen p-4">
                <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4 transform transition-all">
                    <div class="modal-content p-6">
                        <!-- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å -->
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modalContainer);
        console.log('‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω —Å–æ–∑–¥–∞–Ω');
    }

    // ===== –ö–ù–û–ü–ö–ò =====
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
     * @param {Object} options - –æ–ø—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏
     * @returns {HTMLElement} - —ç–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏
     */
    createButton(options = {}) {
        const {
            text = '–ö–Ω–æ–ø–∫–∞',
            variant = 'default', // default, outline, ghost, link, destructive
            size = 'default', // sm, default, lg, icon
            loading = false,
            disabled = false,
            icon = null,
            onClick = null,
            className = '',
            type = 'button'
        } = options;

        const button = document.createElement('button');
        button.type = type;
        button.textContent = text;
        button.disabled = disabled || loading;

        // –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
        let classes = [
            'inline-flex',
            'items-center',
            'justify-center',
            'whitespace-nowrap',
            'rounded-md',
            'text-sm',
            'font-medium',
            'ring-offset-background',
            'transition-colors',
            'focus-visible:outline-none',
            'focus-visible:ring-2',
            'focus-visible:ring-ring',
            'focus-visible:ring-offset-2',
            'disabled:pointer-events-none',
            'disabled:opacity-50'
        ];

        // –í–∞—Ä–∏–∞–Ω—Ç—ã
        const variants = {
            default: 'bg-blue-600 text-white hover:bg-blue-700',
            outline: 'border border-gray-300 bg-white hover:bg-gray-50',
            ghost: 'hover:bg-gray-100',
            link: 'text-blue-600 underline-offset-4 hover:underline',
            destructive: 'bg-red-600 text-white hover:bg-red-700'
        };

        // –†–∞–∑–º–µ—Ä—ã
        const sizes = {
            sm: 'h-9 rounded-md px-3',
            default: 'h-10 px-4 py-2',
            lg: 'h-11 rounded-md px-8',
            icon: 'h-10 w-10'
        };

        classes.push(variants[variant] || variants.default);
        classes.push(sizes[size] || sizes.default);

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if (icon) {
            const iconElement = document.createElement('i');
            iconElement.className = icon;
            iconElement.classList.add('mr-2');
            button.insertBefore(iconElement, button.firstChild);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        if (loading) {
            const spinner = document.createElement('div');
            spinner.className = 'mr-2 h-4 w-4 animate-spin';
            spinner.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
            `;
            button.insertBefore(spinner, button.firstChild);
        }

        button.className = classes.join(' ') + ' ' + className;

        if (onClick) {
            button.addEventListener('click', onClick);
        }

        return button;
    }

    // ===== –ü–û–õ–Ø –í–í–û–î–ê =====

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
     * @param {Object} options - –æ–ø—Ü–∏–∏ –ø–æ–ª—è
     * @returns {HTMLElement} - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
     */
    createInput(options = {}) {
        const {
            type = 'text',
            placeholder = '',
            label = '',
            error = '',
            helperText = '',
            value = '',
            required = false,
            disabled = false,
            icon = null,
            onChange = null,
            className = '',
            id = null
        } = options;

        const container = document.createElement('div');
        container.className = 'w-full';

        // –°–æ–∑–¥–∞–µ–º ID –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        const inputId = id || `input-${Math.random().toString(36).substr(2, 9)}`;

        // –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–π–±–ª
        if (label) {
            const labelElement = document.createElement('label');
            labelElement.htmlFor = inputId;
            labelElement.className = 'block text-sm font-medium text-gray-700 mb-1';
            labelElement.textContent = label;
            container.appendChild(labelElement);
        }

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        const input = document.createElement('input');
        input.type = type;
        input.id = inputId;
        input.placeholder = placeholder;
        input.value = value;
        input.required = required;
        input.disabled = disabled;

        // –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
        let classes = [
            'flex',
            'h-10',
            'w-full',
            'rounded-md',
            'border',
            'border-gray-300',
            'bg-white',
            'px-3',
            'py-2',
            'text-sm',
            'ring-offset-background',
            'placeholder:text-gray-400',
            'focus-visible:outline-none',
            'focus-visible:ring-2',
            'focus-visible:ring-blue-500',
            'focus-visible:ring-offset-2',
            'disabled:cursor-not-allowed',
            'disabled:opacity-50'
        ];

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if (icon) {
            const iconContainer = document.createElement('div');
            iconContainer.className = 'relative';
            
            const iconElement = document.createElement('i');
            iconElement.className = `absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 ${icon}`;
            
            input.classList.add('pl-10');
            iconContainer.appendChild(iconElement);
            iconContainer.appendChild(input);
            container.appendChild(iconContainer);
        } else {
            container.appendChild(input);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
        if (error) {
            classes.push('border-red-500', 'focus-visible:ring-red-500');
            const errorElement = document.createElement('p');
            errorElement.className = 'mt-1 text-sm text-red-600';
            errorElement.textContent = error;
            container.appendChild(errorElement);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        if (helperText && !error) {
            const helperElement = document.createElement('p');
            helperElement.className = 'mt-1 text-sm text-gray-500';
            helperElement.textContent = helperText;
            container.appendChild(helperElement);
        }

        input.className = classes.join(' ') + ' ' + className;

        if (onChange) {
            input.addEventListener('input', onChange);
        }

        return container;
    }

    // ===== –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê =====

    /**
     * –°–æ–∑–¥–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     * @param {Object} options - –æ–ø—Ü–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     * @returns {Object} - –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    createModal(options = {}) {
        const {
            title = '',
            content = '',
            size = 'default', // sm, default, lg, xl
            closeOnOverlay = true,
            showCloseButton = true,
            onClose = null
        } = options;

        const modalId = `modal-${Math.random().toString(36).substr(2, 9)}`;
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.id = modalId;
        modal.className = 'fixed inset-0 z-50 flex items-center justify-center';
        modal.style.display = 'none';

        // –û–≤–µ—Ä–ª–µ–π
        const overlay = document.createElement('div');
        overlay.className = 'absolute inset-0 bg-black bg-opacity-50';
        
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const container = document.createElement('div');
        container.className = 'relative bg-white rounded-lg shadow-xl max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto';

        // –†–∞–∑–º–µ—Ä—ã
        const sizes = {
            sm: 'max-w-sm',
            default: 'max-w-md',
            lg: 'max-w-lg',
            xl: 'max-w-xl'
        };
        container.className = container.className.replace('max-w-md', sizes[size] || sizes.default);

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if (title) {
            const header = document.createElement('div');
            header.className = 'flex items-center justify-between p-6 border-b border-gray-200';
            
            const titleElement = document.createElement('h3');
            titleElement.className = 'text-lg font-semibold text-gray-900';
            titleElement.textContent = title;
            
            header.appendChild(titleElement);

            if (showCloseButton) {
                const closeButton = document.createElement('button');
                closeButton.className = 'text-gray-400 hover:text-gray-600';
                closeButton.innerHTML = '<i class="fas fa-times"></i>';
                closeButton.onclick = () => this.closeModal(modalId);
                header.appendChild(closeButton);
            }

            container.appendChild(header);
        }

        // –ö–æ–Ω—Ç–µ–Ω—Ç
        const contentElement = document.createElement('div');
        contentElement.className = 'p-6';
        
        if (typeof content === 'string') {
            contentElement.innerHTML = content;
        } else if (content instanceof HTMLElement) {
            contentElement.appendChild(content);
        }
        
        container.appendChild(contentElement);

        // –°–æ–±–∏—Ä–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.appendChild(overlay);
        modal.appendChild(container);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
        document.body.appendChild(modal);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        if (closeOnOverlay) {
            overlay.addEventListener('click', () => this.closeModal(modalId));
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
        this.modals.push({
            id: modalId,
            element: modal,
            onClose
        });

        return {
            id: modalId,
            show: () => this.showModal(modalId),
            close: () => this.closeModal(modalId),
            updateContent: (newContent) => this.updateModalContent(modalId, newContent)
        };
    }

    showModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.style.display = 'flex';
            document.body.style.overflow = 'hidden';
        }
    }

    closeModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.style.display = 'none';
            document.body.style.overflow = '';
            
            // –í—ã–∑—ã–≤–∞–µ–º callback
            const modalData = this.modals.find(m => m.id === modalId);
            if (modalData && modalData.onClose) {
                modalData.onClose();
            }
        }
    }

    updateModalContent(modalId, content) {
        const modal = document.getElementById(modalId);
        if (modal) {
            const contentElement = modal.querySelector('.p-6');
            if (contentElement) {
                if (typeof content === 'string') {
                    contentElement.innerHTML = content;
                } else if (content instanceof HTMLElement) {
                    contentElement.innerHTML = '';
                    contentElement.appendChild(content);
                }
            }
        }
    }

    // ===== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =====

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     * @param {Object} options - –æ–ø—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showToast(options = {}) {
        const {
            title = '',
            message = '',
            type = 'info', // success, error, warning, info
            duration = 5000,
            position = 'top-right' // top-right, top-left, bottom-right, bottom-left
        } = options;

        const toastId = `toast-${Math.random().toString(36).substr(2, 9)}`;
        
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const toast = document.createElement('div');
        toast.id = toastId;
        toast.className = 'bg-white border rounded-lg shadow-lg p-4 mb-4 transform transition-all duration-300 ease-in-out';
        toast.style.maxWidth = '400px';
        toast.style.transform = 'translateX(100%)';

        // –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        const icons = {
            success: 'fas fa-check-circle text-green-500',
            error: 'fas fa-exclamation-circle text-red-500',
            warning: 'fas fa-exclamation-triangle text-yellow-500',
            info: 'fas fa-info-circle text-blue-500'
        };

        // –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        const colors = {
            success: 'border-green-200',
            error: 'border-red-200',
            warning: 'border-yellow-200',
            info: 'border-blue-200'
        };

        toast.classList.add(colors[type] || colors.info);

        // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        toast.innerHTML = `
            <div class="flex items-start">
                <div class="flex-shrink-0">
                    <i class="${icons[type] || icons.info} text-lg"></i>
                </div>
                <div class="ml-3 flex-1">
                    ${title ? `<div class="text-sm font-medium text-gray-900">${title}</div>` : ''}
                    ${message ? `<div class="text-sm text-gray-500 mt-1">${message}</div>` : ''}
                </div>
                <div class="ml-4 flex-shrink-0">
                    <button class="text-gray-400 hover:text-gray-600" onclick="modernUI.closeToast('${toastId}')">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const container = this.getToastContainer(position);
        container.appendChild(toast);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            toast.style.transform = 'translateX(0)';
        }, 100);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        if (duration > 0) {
            setTimeout(() => {
                this.closeToast(toastId);
            }, duration);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
        this.toasts.push({
            id: toastId,
            element: toast,
            position
        });

        return toastId;
    }

    closeToast(toastId) {
        const toast = document.getElementById(toastId);
        if (toast) {
            toast.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 300);

            // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
            this.toasts = this.toasts.filter(t => t.id !== toastId);
        }
    }

    createToastContainer(position) {
        const containerId = `toast-container-${position}`;
        let container = document.getElementById(containerId);
        
        if (!container) {
            container = document.createElement('div');
            container.id = containerId;
            container.className = 'fixed z-50 p-4 space-y-4';
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            const positions = {
                'top-right': 'top-0 right-0',
                'top-left': 'top-0 left-0',
                'bottom-right': 'bottom-0 right-0',
                'bottom-left': 'bottom-0 left-0'
            };
            
            container.className += ' ' + (positions[position] || positions['top-right']);
            document.body.appendChild(container);
        }
        
        return container;
    }

    getToastContainer(position) {
        return this.createToastContainer(position);
    }

    // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

    /**
     * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç CSS –∫–ª–∞—Å—Å—ã
     * @param {...string} classes - –∫–ª–∞—Å—Å—ã –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
     * @returns {string} - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã
     */
    cn(...classes) {
        return classes.filter(Boolean).join(' ');
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É
     * @param {Date|string} date - –¥–∞—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {string} - –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
     */
    formatDate(date) {
        const d = new Date(date);
        return d.toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email
     * @param {string} email - email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {boolean} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É
     * @param {number} ms - –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
     * @returns {Promise} - –ø—Ä–æ–º–∏—Å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * –î–µ–±–∞—É–Ω—Å —Ñ—É–Ω–∫—Ü–∏—è
     * @param {Function} func - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–±–∞—É–Ω—Å–∞
     * @param {number} wait - –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
     * @returns {Function} - –¥–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
     */
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const modernUI = new ModernUI();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ModernUI;
} else {
    window.ModernUI = ModernUI;
    window.modernUI = modernUI;
} 