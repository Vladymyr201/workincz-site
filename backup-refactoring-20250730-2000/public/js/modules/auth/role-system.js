/**
 * üé≠ Role System - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * –î–∞—Ç–∞: 30.07.2025
 * 
 * –†–æ–ª–∏:
 * - jobseeker (–°–æ–∏—Å–∫–∞—Ç–µ–ª—å)
 * - employer (–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å) 
 * - agency (–ö–∞–¥—Ä–æ–≤–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ)
 */

class RoleSystem {
    constructor() {
        this.currentRole = null;
        this.userRoles = [];
        this.init();
    }

    init() {
        console.log('üé≠ Role System –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    /**
     * –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
     */
    static get ROLES() {
        return {
            JOBSEEKER: 'jobseeker',
            EMPLOYER: 'employer', 
            AGENCY: 'agency'
        };
    }

    /**
     * –ù–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º
     */
    static get ROLE_NAMES() {
        return {
            [RoleSystem.ROLES.JOBSEEKER]: '–°–æ–∏—Å–∫–∞—Ç–µ–ª—å',
            [RoleSystem.ROLES.EMPLOYER]: '–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å',
            [RoleSystem.ROLES.AGENCY]: '–ö–∞–¥—Ä–æ–≤–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ'
        };
    }

    /**
     * –û–ø–∏—Å–∞–Ω–∏—è —Ä–æ–ª–µ–π
     */
    static get ROLE_DESCRIPTIONS() {
        return {
            [RoleSystem.ROLES.JOBSEEKER]: '–ò—â–µ—Ç–µ —Ä–∞–±–æ—Ç—É –≤ –ß–µ—Ö–∏–∏? –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞–π–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é',
            [RoleSystem.ROLES.EMPLOYER]: '–ò—â–µ—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤? –†–∞–∑–º–µ—â–∞–π—Ç–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤',
            [RoleSystem.ROLES.AGENCY]: '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ —É—Å–ª—É–≥–∏ –ø–æ –ø–æ–¥–±–æ—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∞? –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ'
        };
    }

    /**
     * –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
     */
    static get ROLE_FEATURES() {
        return {
            [RoleSystem.ROLES.JOBSEEKER]: [
                '–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞–∫–∞–Ω—Å–∏–π',
                '–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫',
                '–û–±—â–µ–Ω–∏–µ —Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º–∏',
                '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞'
            ],
            [RoleSystem.ROLES.EMPLOYER]: [
                '–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π',
                '–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤',
                '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏',
                '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'
            ],
            [RoleSystem.ROLES.AGENCY]: [
                '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏',
                '–ü–æ–¥–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤',
                '–ö–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã–µ',
                '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'
            ]
        };
    }

    /**
     * –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–æ–ª–µ–π
     */
    static get ROLE_ICONS() {
        return {
            [RoleSystem.ROLES.JOBSEEKER]: 'fas fa-user',
            [RoleSystem.ROLES.EMPLOYER]: 'fas fa-building',
            [RoleSystem.ROLES.AGENCY]: 'fas fa-handshake'
        };
    }

    /**
     * –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–æ–ª–µ–π
     */
    static get ROLE_COLORS() {
        return {
            [RoleSystem.ROLES.JOBSEEKER]: 'blue',
            [RoleSystem.ROLES.EMPLOYER]: 'green',
            [RoleSystem.ROLES.AGENCY]: 'purple'
        };
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—è–º–∏
     */
    async registerUser(userData, selectedRoles) {
        try {
            if (!window.firebaseAuth || !window.firebaseDb) {
                throw new Error('Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            const user = window.firebaseAuth.currentUser;
            if (!user) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            }

            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userProfile = {
                uid: user.uid,
                email: user.email,
                displayName: userData.displayName || user.displayName || userData.firstName + ' ' + userData.lastName,
                firstName: userData.firstName || '',
                lastName: userData.lastName || '',
                phone: userData.phone || user.phoneNumber || '',
                avatar: userData.avatar || user.photoURL || '',
                provider: userData.provider || user.providerData[0]?.providerId || 'email',
                roles: selectedRoles,
                currentRole: selectedRoles[0], // –ü–µ—Ä–≤–∞—è —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                createdAt: new Date(),
                updatedAt: new Date(),
                isActive: true
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
            await window.firebaseDb.collection('users').doc(user.uid).set(userProfile);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
            for (const role of selectedRoles) {
                await this.initializeRoleProfile(user.uid, role, userData);
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å
            this.currentRole = selectedRoles[0];
            this.userRoles = selectedRoles;

            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å —Ä–æ–ª—è–º–∏:', selectedRoles);
            return userProfile;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏
     */
    async initializeRoleProfile(uid, role, userData) {
        try {
            const roleProfile = {
                uid: uid,
                role: role,
                createdAt: new Date(),
                updatedAt: new Date(),
                isActive: true
            };

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
            switch (role) {
                case RoleSystem.ROLES.JOBSEEKER:
                    roleProfile.profile = {
                        firstName: userData.firstName || '',
                        lastName: userData.lastName || '',
                        birthDate: userData.birthDate || '',
                        location: userData.location || '',
                        skills: userData.skills || [],
                        experience: userData.experience || '',
                        education: userData.education || '',
                        languages: userData.languages || [],
                        resume: null,
                        applications: [],
                        avatar: userData.avatar || ''
                    };
                    break;

                case RoleSystem.ROLES.EMPLOYER:
                    roleProfile.company = {
                        name: userData.companyName || '',
                        description: userData.companyDescription || '',
                        industry: userData.industry || '',
                        size: userData.companySize || '',
                        location: userData.location || '',
                        website: userData.website || '',
                        logo: null,
                        vacancies: [],
                        contactPerson: {
                            firstName: userData.firstName || '',
                            lastName: userData.lastName || '',
                            email: userData.email || '',
                            phone: userData.phone || ''
                        }
                    };
                    break;

                case RoleSystem.ROLES.AGENCY:
                    roleProfile.agency = {
                        name: userData.agencyName || '',
                        description: userData.agencyDescription || '',
                        services: userData.services || [],
                        location: userData.location || '',
                        website: userData.website || '',
                        logo: null,
                        clients: [],
                        candidates: [],
                        contactPerson: {
                            firstName: userData.firstName || '',
                            lastName: userData.lastName || '',
                            email: userData.email || '',
                            phone: userData.phone || ''
                        }
                    };
                    break;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ä–æ–ª–∏
            await window.firebaseDb.collection('roleProfiles').doc(`${uid}_${role}`).set(roleProfile);

            console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Ä–æ–ª–∏ ${role} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è —Ä–æ–ª–∏ ${role}:`, error);
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async loadUserRoles(uid) {
        try {
            if (!window.firebaseDb) {
                throw new Error('Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            const userDoc = await window.firebaseDb.collection('users').doc(uid).get();
            
            if (userDoc.exists) {
                const userData = userDoc.data();
                this.userRoles = userData.roles || [];
                this.currentRole = userData.currentRole || this.userRoles[0];
                
                console.log('‚úÖ –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.userRoles);
                return userData;
            } else {
                console.warn('‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return null;
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ–ª–∏
     */
    async switchRole(newRole) {
        try {
            if (!this.userRoles.includes(newRole)) {
                throw new Error('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç–∞–∫–æ–π —Ä–æ–ª–∏');
            }

            if (!window.firebaseAuth || !window.firebaseDb) {
                throw new Error('Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            const user = window.firebaseAuth.currentUser;
            if (!user) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å –≤ –±–∞–∑–µ
            await window.firebaseDb.collection('users').doc(user.uid).update({
                currentRole: newRole,
                updatedAt: new Date()
            });

            this.currentRole = newRole;
            console.log('‚úÖ –†–æ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞:', newRole);

            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.updateUIForRole(newRole);

            return newRole;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–æ–ª–∏:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏
     */
    getCurrentRole() {
        return this.currentRole;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getUserRoles() {
        return this.userRoles;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–æ–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    hasRole(role) {
        return this.userRoles.includes(role);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
     */
    updateUIForRole(role) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        this.updateNavigation(role);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.updatePageContent(role);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Ä–æ–ª–µ–π
        this.updateRoleSelector(role);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Ä–æ–ª–∏
     */
    updateNavigation(role) {
        const roleName = RoleSystem.ROLE_NAMES[role];
        const roleIcon = RoleSystem.ROLE_ICONS[role];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const roleIndicator = document.getElementById('current-role-indicator');
        if (roleIndicator) {
            roleIndicator.innerHTML = `
                <i class="${roleIcon}"></i>
                <span>${roleName}</span>
            `;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        this.toggleNavigationItems(role);
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    toggleNavigationItems(role) {
        // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π
        const jobseekerItems = document.querySelectorAll('[data-role="jobseeker"]');
        jobseekerItems.forEach(item => {
            item.style.display = role === RoleSystem.ROLES.JOBSEEKER ? 'block' : 'none';
        });

        // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π
        const employerItems = document.querySelectorAll('[data-role="employer"]');
        employerItems.forEach(item => {
            item.style.display = role === RoleSystem.ROLES.EMPLOYER ? 'block' : 'none';
        });

        // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∞–≥–µ–Ω—Ç—Å—Ç–≤
        const agencyItems = document.querySelectorAll('[data-role="agency"]');
        agencyItems.forEach(item => {
            item.style.display = role === RoleSystem.ROLES.AGENCY ? 'block' : 'none';
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    updatePageContent(role) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const pageTitle = document.querySelector('[data-role-title]');
        if (pageTitle) {
            pageTitle.textContent = RoleSystem.ROLE_NAMES[role];
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        const pageDescription = document.querySelector('[data-role-description]');
        if (pageDescription) {
            pageDescription.textContent = RoleSystem.ROLE_DESCRIPTIONS[role];
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        this.showRoleContent(role);
    }

    /**
     * –ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏
     */
    showRoleContent(role) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–Ω—Ç—ã —Ä–æ–ª–µ–π
        const allRoleContents = document.querySelectorAll('[data-role-content]');
        allRoleContents.forEach(content => {
            content.style.display = 'none';
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏
        const currentRoleContent = document.querySelector(`[data-role-content="${role}"]`);
        if (currentRoleContent) {
            currentRoleContent.style.display = 'block';
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ä–æ–ª–µ–π
     */
    updateRoleSelector(role) {
        const roleSelector = document.getElementById('role-selector');
        if (roleSelector) {
            roleSelector.value = role;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ —Ä–æ–ª–µ–π
        const roleTabs = document.querySelectorAll('[data-role-tab]');
        roleTabs.forEach(tab => {
            tab.classList.remove('active');
            if (tab.dataset.roleTab === role) {
                tab.classList.add('active');
            }
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ä–æ–ª–µ–π
     */
    createRoleSelector() {
        const selector = document.createElement('div');
        selector.className = 'role-selector';
        selector.innerHTML = `
            <div class="role-selector-header">
                <span>–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å:</span>
                <div class="current-role">
                    <i class="${RoleSystem.ROLE_ICONS[this.currentRole]}"></i>
                    <span>${RoleSystem.ROLE_NAMES[this.currentRole]}</span>
                </div>
            </div>
            <div class="role-tabs">
                ${this.userRoles.map(role => `
                    <button class="role-tab ${role === this.currentRole ? 'active' : ''}" 
                            data-role-tab="${role}"
                            onclick="roleSystem.switchRole('${role}')">
                        <i class="${RoleSystem.ROLE_ICONS[role]}"></i>
                        <span>${RoleSystem.ROLE_NAMES[role]}</span>
                    </button>
                `).join('')}
            </div>
        `;
        return selector;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const roleSystem = new RoleSystem();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = RoleSystem;
} else {
    window.RoleSystem = RoleSystem;
    window.roleSystem = roleSystem;
} 