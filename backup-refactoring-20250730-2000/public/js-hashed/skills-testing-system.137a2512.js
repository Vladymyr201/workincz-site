/**
 * –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∏ –Ω–∞–≤—ã–∫–æ–≤
 * –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ, —è–∑—ã–∫–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ü–µ–Ω–∫–æ–π
 */

class SkillsTestingSystem {
    constructor() {
        this.tests = new Map();
        this.userResults = new Map();
        this.certificates = new Map();
        this.skillRatings = new Map();
        this.testCategories = new Map();
        this.learningPaths = new Map();
        this.testTemplates = new Map();
        this.analytics = new Map();
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    init() {
        this.loadData();
        this.initializeTestCategories();
        this.initializeTestTemplates();
        this.initializeLearningPaths();
        this.setupEventListeners();
        console.log('üß™ –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
     */
    loadData() {
        try {
            const savedResults = localStorage.getItem('skillsTestResults');
            const savedCertificates = localStorage.getItem('skillsCertificates');
            const savedRatings = localStorage.getItem('skillsRatings');
            const savedAnalytics = localStorage.getItem('skillsAnalytics');

            if (savedResults) this.userResults = new Map(JSON.parse(savedResults));
            if (savedCertificates) this.certificates = new Map(JSON.parse(savedCertificates));
            if (savedRatings) this.skillRatings = new Map(JSON.parse(savedRatings));
            if (savedAnalytics) this.analytics = new Map(JSON.parse(savedAnalytics));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
     */
    saveData() {
        try {
            localStorage.setItem('skillsTestResults', JSON.stringify(Array.from(this.userResults.entries())));
            localStorage.setItem('skillsCertificates', JSON.stringify(Array.from(this.certificates.entries())));
            localStorage.setItem('skillsRatings', JSON.stringify(Array.from(this.skillRatings.entries())));
            localStorage.setItem('skillsAnalytics', JSON.stringify(Array.from(this.analytics.entries())));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ—Å—Ç–æ–≤
     */
    initializeTestCategories() {
        const categories = [
            {
                id: 'technical',
                name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏',
                description: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–∏–∑–∞–π–Ω, –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö',
                icon: 'üíª',
                color: 'blue',
                skills: ['JavaScript', 'Python', 'React', 'Node.js', 'SQL', 'Git', 'Docker', 'AWS']
            },
            {
                id: 'language',
                name: '–Ø–∑—ã–∫–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏',
                description: '–ß–µ—à—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –Ω–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫–∏',
                icon: 'üåç',
                color: 'green',
                skills: ['–ß–µ—à—Å–∫–∏–π', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', '–ù–µ–º–µ—Ü–∫–∏–π', '–°–ª–æ–≤–∞—Ü–∫–∏–π', '–ü–æ–ª—å—Å–∫–∏–π']
            },
            {
                id: 'soft_skills',
                name: '–ú—è–≥–∫–∏–µ –Ω–∞–≤—ã–∫–∏',
                description: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è, –ª–∏–¥–µ—Ä—Å—Ç–≤–æ, —Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ',
                icon: 'ü§ù',
                color: 'purple',
                skills: ['–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', '–õ–∏–¥–µ—Ä—Å—Ç–≤–æ', '–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ', '–¢–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', '–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å']
            },
            {
                id: 'business',
                name: '–ë–∏–∑–Ω–µ—Å –Ω–∞–≤—ã–∫–∏',
                description: '–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, –ø—Ä–æ–¥–∞–∂–∏',
                icon: 'üìä',
                color: 'orange',
                skills: ['–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤', '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–ü—Ä–æ–¥–∞–∂–∏', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ']
            },
            {
                id: 'industry',
                name: '–û—Ç—Ä–∞—Å–ª–µ–≤—ã–µ –∑–Ω–∞–Ω–∏—è',
                description: '–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è –ø–æ –æ—Ç—Ä–∞—Å–ª—è–º',
                icon: 'üè≠',
                color: 'red',
                skills: ['–§–∏–Ω–∞–Ω—Å—ã', '–ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 'IT', '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ']
            }
        ];

        categories.forEach(category => {
            this.testCategories.set(category.id, category);
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ —Ç–µ—Å—Ç–æ–≤
     */
    initializeTestTemplates() {
        const templates = [
            // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
            {
                id: 'javascript_basic',
                name: 'JavaScript - –û—Å–Ω–æ–≤—ã',
                category: 'technical',
                skill: 'JavaScript',
                description: '–ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è JavaScript',
                duration: 15, // –º–∏–Ω—É—Ç—ã
                questions: [
                    {
                        id: 1,
                        type: 'multiple_choice',
                        question: '–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç console.log(typeof null)?',
                        options: ['"object"', '"null"', '"undefined"', '"boolean"'],
                        correct: 0,
                        explanation: 'typeof null –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "object" - —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å JavaScript'
                    },
                    {
                        id: 2,
                        type: 'multiple_choice',
                        question: '–ö–∞–∫–æ–π –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞?',
                        options: ['push()', 'pop()', 'shift()', 'unshift()'],
                        correct: 0,
                        explanation: 'push() –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞'
                    },
                    {
                        id: 3,
                        type: 'code',
                        question: '–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –¥–≤—É—Ö —á–∏—Å–µ–ª',
                        template: 'function sum(a, b) {\n  // –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\n}',
                        testCases: [
                            { input: [2, 3], expected: 5 },
                            { input: [-1, 1], expected: 0 },
                            { input: [0, 0], expected: 0 }
                        ],
                        explanation: '–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–∂–∏—Ç—å –¥–≤–∞ —á–∏—Å–ª–∞'
                    }
                ],
                passingScore: 70
            },
            {
                id: 'react_basic',
                name: 'React - –û—Å–Ω–æ–≤—ã',
                category: 'technical',
                skill: 'React',
                description: '–ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è React',
                duration: 20,
                questions: [
                    {
                        id: 1,
                        type: 'multiple_choice',
                        question: '–ß—Ç–æ —Ç–∞–∫–æ–µ JSX?',
                        options: ['JavaScript XML', 'JavaScript Extension', 'React Syntax', 'HTML –≤ JavaScript'],
                        correct: 0,
                        explanation: 'JSX —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ JavaScript XML'
                    },
                    {
                        id: 2,
                        type: 'multiple_choice',
                        question: '–ö–∞–∫–æ–π —Ö—É–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º?',
                        options: ['useState', 'useEffect', 'useContext', 'useReducer'],
                        correct: 0,
                        explanation: 'useState - –æ—Å–Ω–æ–≤–Ω–æ–π —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º'
                    }
                ],
                passingScore: 70
            },
            // –Ø–∑—ã–∫–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
            {
                id: 'czech_basic',
                name: '–ß–µ—à—Å–∫–∏–π —è–∑—ã–∫ - –û—Å–Ω–æ–≤—ã',
                category: 'language',
                skill: '–ß–µ—à—Å–∫–∏–π',
                description: '–ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è —á–µ—à—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
                duration: 25,
                questions: [
                    {
                        id: 1,
                        type: 'multiple_choice',
                        question: '–ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ" –ø–æ-—á–µ—à—Å–∫–∏?',
                        options: ['Dobr√Ω den', 'Ahoj', 'Dƒõkuji', 'Pros√≠m'],
                        correct: 0,
                        explanation: 'Dobr√Ω den - —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'
                    },
                    {
                        id: 2,
                        type: 'translation',
                        question: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ: "–Ø –∏—â—É —Ä–∞–±–æ—Ç—É"',
                        answer: 'Hled√°m pr√°ci',
                        alternatives: ['Hled√°m pr√°ci', 'Hled√°m zamƒõstn√°n√≠', 'Pot≈ôebuji pr√°ci'],
                        explanation: 'Hled√°m pr√°ci - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–∫–∞–∑–∞—Ç—å "–∏—â—É —Ä–∞–±–æ—Ç—É"'
                    }
                ],
                passingScore: 60
            },
            // –ú—è–≥–∫–∏–µ –Ω–∞–≤—ã–∫–∏
            {
                id: 'communication_basic',
                name: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è - –û—Å–Ω–æ–≤—ã',
                category: 'soft_skills',
                skill: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è',
                description: '–ë–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏',
                duration: 15,
                questions: [
                    {
                        id: 1,
                        type: 'scenario',
                        question: '–ö–æ–ª–ª–µ–≥–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–µ—Ä–µ–±–∏–≤–∞–µ—Ç –≤–∞—Å –Ω–∞ —Å–æ–≤–µ—â–∞–Ω–∏—è—Ö. –ß—Ç–æ –≤—ã —Å–¥–µ–ª–∞–µ—Ç–µ?',
                        options: [
                            '–ù–∞—á–Ω—É –ø–µ—Ä–µ–±–∏–≤–∞—Ç—å –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç',
                            '–ü–æ–≥–æ–≤–æ—Ä—é —Å –Ω–∏–º –Ω–∞–µ–¥–∏–Ω–µ –æ –ø—Ä–æ–±–ª–µ–º–µ',
                            '–ü–æ–∂–∞–ª—É—é—Å—å –Ω–∞—á–∞–ª—å–Ω–∏–∫—É',
                            '–ü–µ—Ä–µ—Å—Ç–∞–Ω—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–æ–≤–µ—â–∞–Ω–∏—è—Ö'
                        ],
                        correct: 1,
                        explanation: '–õ—É—á—à–µ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –Ω–∞–ø—Ä—è–º—É—é, –Ω–æ –¥–µ–ª–∏–∫–∞—Ç–Ω–æ'
                    }
                ],
                passingScore: 70
            }
        ];

        templates.forEach(template => {
            this.testTemplates.set(template.id, template);
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–µ–π –æ–±—É—á–µ–Ω–∏—è
     */
    initializeLearningPaths() {
        const paths = [
            {
                id: 'frontend_developer',
                name: 'Frontend Developer',
                description: '–ü—É—Ç—å —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º',
                skills: ['HTML', 'CSS', 'JavaScript', 'React', 'TypeScript'],
                tests: ['html_basic', 'css_basic', 'javascript_basic', 'react_basic'],
                duration: '3-6 –º–µ—Å—è—Ü–µ–≤',
                difficulty: 'beginner'
            },
            {
                id: 'backend_developer',
                name: 'Backend Developer',
                description: '–ü—É—Ç—å —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±—ç–∫–µ–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º',
                skills: ['Python', 'Node.js', 'SQL', 'Git', 'Docker'],
                tests: ['python_basic', 'nodejs_basic', 'sql_basic', 'git_basic'],
                duration: '4-8 –º–µ—Å—è—Ü–µ–≤',
                difficulty: 'beginner'
            },
            {
                id: 'czech_language',
                name: '–ß–µ—à—Å–∫–∏–π —è–∑—ã–∫',
                description: '–ò–∑—É—á–µ–Ω–∏–µ —á–µ—à—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã',
                skills: ['–ß–µ—à—Å–∫–∏–π'],
                tests: ['czech_basic', 'czech_intermediate', 'czech_advanced'],
                duration: '6-12 –º–µ—Å—è—Ü–µ–≤',
                difficulty: 'beginner'
            }
        ];

        paths.forEach(path => {
            this.learningPaths.set(path.id, path);
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getAvailableTests(userId, category = null) {
        const tests = Array.from(this.testTemplates.values());
        
        if (category) {
            return tests.filter(test => test.category === category);
        }
        
        return tests;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ø–æ ID
     */
    getTest(testId) {
        return this.testTemplates.get(testId);
    }

    /**
     * –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
     */
    startTest(userId, testId) {
        const test = this.getTest(testId);
        if (!test) {
            throw new Error('–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const testSession = {
            id: `${userId}_${testId}_${Date.now()}`,
            userId,
            testId,
            startTime: Date.now(),
            endTime: null,
            answers: [],
            score: null,
            status: 'in_progress'
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        if (!this.userResults.has(userId)) {
            this.userResults.set(userId, []);
        }
        this.userResults.get(userId).push(testSession);

        this.saveData();
        return testSession;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
     */
    submitAnswer(sessionId, questionId, answer) {
        const session = this.findSession(sessionId);
        if (!session) {
            throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
        let existingAnswer = session.answers.find(a => a.questionId === questionId);
        if (existingAnswer) {
            existingAnswer.answer = answer;
            existingAnswer.timestamp = Date.now();
        } else {
            session.answers.push({
                questionId,
                answer,
                timestamp: Date.now()
            });
        }

        this.saveData();
        return session;
    }

    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
     */
    finishTest(sessionId) {
        const session = this.findSession(sessionId);
        if (!session) {
            throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        const test = this.getTest(session.testId);
        const score = this.calculateScore(session, test);
        const passed = score >= test.passingScore;

        session.endTime = Date.now();
        session.score = score;
        session.status = passed ? 'passed' : 'failed';

        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –µ—Å–ª–∏ —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω
        if (passed) {
            this.createCertificate(session.userId, session.testId, score);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞–≤—ã–∫–∞
        this.updateSkillRating(session.userId, test.skill, score);

        this.saveData();
        return { session, passed, score };
    }

    /**
     * –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
     */
    calculateScore(session, test) {
        let correctAnswers = 0;
        let totalQuestions = test.questions.length;

        test.questions.forEach(question => {
            const answer = session.answers.find(a => a.questionId === question.id);
            if (answer && this.isAnswerCorrect(question, answer.answer)) {
                correctAnswers++;
            }
        });

        return Math.round((correctAnswers / totalQuestions) * 100);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
     */
    isAnswerCorrect(question, answer) {
        switch (question.type) {
            case 'multiple_choice':
                return answer === question.correct;
            case 'translation':
                return question.alternatives.includes(answer.toLowerCase().trim());
            case 'code':
                // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–µ–º–æ
                return answer && answer.length > 10;
            case 'scenario':
                return answer === question.correct;
            default:
                return false;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
     */
    createCertificate(userId, testId, score) {
        const test = this.getTest(testId);
        const certificate = {
            id: `${userId}_${testId}_${Date.now()}`,
            userId,
            testId,
            testName: test.name,
            skill: test.skill,
            score,
            issuedAt: Date.now(),
            expiresAt: Date.now() + (365 * 24 * 60 * 60 * 1000), // 1 –≥–æ–¥
            status: 'active'
        };

        if (!this.certificates.has(userId)) {
            this.certificates.set(userId, []);
        }
        this.certificates.get(userId).push(certificate);

        this.saveData();
        return certificate;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞–≤—ã–∫–∞
     */
    updateSkillRating(userId, skill, score) {
        if (!this.skillRatings.has(userId)) {
            this.skillRatings.set(userId, new Map());
        }

        const userRatings = this.skillRatings.get(userId);
        const currentRating = userRatings.get(skill) || { score: 0, tests: 0, lastUpdated: 0 };

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const newTests = currentRating.tests + 1;
        const newScore = Math.round((currentRating.score * currentRating.tests + score) / newTests);

        userRatings.set(skill, {
            score: newScore,
            tests: newTests,
            lastUpdated: Date.now()
        });

        this.saveData();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getUserSkillRatings(userId) {
        return this.skillRatings.get(userId) || new Map();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getUserCertificates(userId) {
        return this.certificates.get(userId) || [];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getUserTestResults(userId) {
        return this.userResults.get(userId) || [];
    }

    /**
     * –ü–æ–∏—Å–∫ —Å–µ—Å—Å–∏–∏ –ø–æ ID
     */
    findSession(sessionId) {
        for (const [userId, sessions] of this.userResults) {
            const session = sessions.find(s => s.id === sessionId);
            if (session) return session;
        }
        return null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–±—É—á–µ–Ω–∏—é
     */
    getLearningRecommendations(userId) {
        const userRatings = this.getUserSkillRatings(userId);
        const recommendations = [];

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–∞–±—ã–µ –Ω–∞–≤—ã–∫–∏
        for (const [skill, rating] of userRatings) {
            if (rating.score < 70) {
                const category = this.getSkillCategory(skill);
                const tests = this.getAvailableTests(userId, category.id);
                
                recommendations.push({
                    type: 'improve_skill',
                    skill,
                    currentScore: rating.score,
                    targetScore: 80,
                    tests: tests.filter(t => t.skill === skill),
                    priority: 'high'
                });
            }
        }

        // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏
        const learnedSkills = Array.from(userRatings.keys());
        const allSkills = this.getAllSkills();
        const newSkills = allSkills.filter(skill => !learnedSkills.includes(skill));

        if (newSkills.length > 0) {
            recommendations.push({
                type: 'learn_new_skill',
                skills: newSkills.slice(0, 3),
                priority: 'medium'
            });
        }

        return recommendations;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–≤—ã–∫–∞
     */
    getSkillCategory(skill) {
        for (const [categoryId, category] of this.testCategories) {
            if (category.skills.includes(skill)) {
                return category;
            }
        }
        return null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤
     */
    getAllSkills() {
        const skills = [];
        for (const category of this.testCategories.values()) {
            skills.push(...category.skills);
        }
        return skills;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    getAnalytics(userId) {
        const results = this.getUserTestResults(userId);
        const certificates = this.getUserCertificates(userId);
        const ratings = this.getUserSkillRatings(userId);

        const analytics = {
            totalTests: results.length,
            passedTests: results.filter(r => r.status === 'passed').length,
            averageScore: results.length > 0 ? 
                Math.round(results.reduce((sum, r) => sum + (r.score || 0), 0) / results.length) : 0,
            certificates: certificates.length,
            topSkills: Array.from(ratings.entries())
                .sort((a, b) => b[1].score - a[1].score)
                .slice(0, 5)
                .map(([skill, rating]) => ({ skill, score: rating.score })),
            recentActivity: results
                .sort((a, b) => b.startTime - a.startTime)
                .slice(0, 5)
        };

        return analytics;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç UI
        document.addEventListener('startTest', (e) => {
            const { userId, testId } = e.detail;
            this.startTest(userId, testId);
        });

        document.addEventListener('submitAnswer', (e) => {
            const { sessionId, questionId, answer } = e.detail;
            this.submitAnswer(sessionId, questionId, answer);
        });

        document.addEventListener('finishTest', (e) => {
            const { sessionId } = e.detail;
            this.finishTest(sessionId);
        });
    }

    /**
     * –í–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    enableTestMode() {
        console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
        const demoUserId = 'demo_user';
        
        // –î–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
        const demoResults = [
            {
                id: 'demo_1',
                userId: demoUserId,
                testId: 'javascript_basic',
                startTime: Date.now() - 86400000,
                endTime: Date.now() - 86300000,
                answers: [
                    { questionId: 1, answer: 0, timestamp: Date.now() - 86350000 },
                    { questionId: 2, answer: 0, timestamp: Date.now() - 86320000 }
                ],
                score: 85,
                status: 'passed'
            }
        ];
        
        this.userResults.set(demoUserId, demoResults);
        
        // –î–µ–º–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
        const demoCertificates = [
            {
                id: 'cert_1',
                userId: demoUserId,
                testId: 'javascript_basic',
                testName: 'JavaScript - –û—Å–Ω–æ–≤—ã',
                skill: 'JavaScript',
                score: 85,
                issuedAt: Date.now() - 86400000,
                expiresAt: Date.now() + (365 * 24 * 60 * 60 * 1000),
                status: 'active'
            }
        ];
        
        this.certificates.set(demoUserId, demoCertificates);
        
        // –î–µ–º–æ —Ä–µ–π—Ç–∏–Ω–≥–∏ –Ω–∞–≤—ã–∫–æ–≤
        const demoRatings = new Map();
        demoRatings.set('JavaScript', {
            score: 85,
            tests: 1,
            lastUpdated: Date.now() - 86400000
        });
        
        this.skillRatings.set(demoUserId, demoRatings);
        
        this.saveData();
        console.log('üß™ –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
     */
    getSystemStats() {
        const stats = {
            totalTests: this.testTemplates.size,
            totalCategories: this.testCategories.size,
            totalLearningPaths: this.learningPaths.size,
            totalUsers: this.userResults.size,
            totalCertificates: Array.from(this.certificates.values())
                .reduce((sum, certs) => sum + certs.length, 0),
            averageScore: this.calculateAverageScore(),
            mostPopularTests: this.getMostPopularTests(),
            topSkills: this.getTopSkills()
        };

        return stats;
    }

    /**
     * –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞
     */
    calculateAverageScore() {
        let totalScore = 0;
        let totalTests = 0;

        for (const results of this.userResults.values()) {
            for (const result of results) {
                if (result.score !== null) {
                    totalScore += result.score;
                    totalTests++;
                }
            }
        }

        return totalTests > 0 ? Math.round(totalScore / totalTests) : 0;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
     */
    getMostPopularTests() {
        const testCounts = new Map();

        for (const results of this.userResults.values()) {
            for (const result of results) {
                const count = testCounts.get(result.testId) || 0;
                testCounts.set(result.testId, count + 1);
            }
        }

        return Array.from(testCounts.entries())
            .sort((a, b) => b[1] - a[1])
            .slice(0, 5)
            .map(([testId, count]) => ({
                testId,
                testName: this.getTest(testId)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç',
                count
            }));
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –Ω–∞–≤—ã–∫–æ–≤
     */
    getTopSkills() {
        const skillScores = new Map();

        for (const ratings of this.skillRatings.values()) {
            for (const [skill, rating] of ratings) {
                const current = skillScores.get(skill) || { totalScore: 0, totalTests: 0 };
                current.totalScore += rating.score * rating.tests;
                current.totalTests += rating.tests;
                skillScores.set(skill, current);
            }
        }

        return Array.from(skillScores.entries())
            .map(([skill, data]) => ({
                skill,
                averageScore: Math.round(data.totalScore / data.totalTests),
                totalTests: data.totalTests
            }))
            .sort((a, b) => b.averageScore - a.averageScore)
            .slice(0, 10);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SkillsTestingSystem;
} 