/**
 * –î–≤–∏–∂–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
 */

class ValidationEngine {
    constructor() {
        this.validationRules = this.initializeValidationRules();
        this.validationResults = {};
        this.init();
    }

    init() {
        console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
        this.setupValidationTriggers();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    initializeValidationRules() {
        return {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            referral: {
                codeFormat: {
                    pattern: /^[A-Z0-9]{8}$/,
                    message: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 8 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)'
                },
                bonusRange: {
                    min: 0,
                    max: 10000,
                    message: '–ë–æ–Ω—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-10000 CZK'
                },
                trackingData: {
                    required: ['referrerId', 'userId', 'timestamp'],
                    message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è'
                }
            },

            // –í–∞–ª–∏–¥–∞—Ü–∏—è email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞
            email: {
                templateFormat: {
                    required: ['subject', 'body', 'variables'],
                    message: 'Email-—à–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å subject, body –∏ variables'
                },
                userSegments: {
                    required: ['role', 'location', 'preferences'],
                    message: '–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç—Ä–µ–±—É–µ—Ç role, location –∏ preferences'
                },
                campaignData: {
                    required: ['template', 'recipients', 'schedule'],
                    message: '–ö–∞–º–ø–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å template, recipients –∏ schedule'
                }
            },

            // –í–∞–ª–∏–¥–∞—Ü–∏—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            abTesting: {
                experimentConfig: {
                    required: ['id', 'name', 'variations', 'metric'],
                    message: '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å id, name, variations –∏ metric'
                },
                variationFormat: {
                    minVariations: 2,
                    maxVariations: 10,
                    message: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 10'
                },
                metricValidation: {
                    allowed: ['conversion_rate', 'click_rate', 'engagement_rate', 'revenue'],
                    message: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –º–µ—Ç—Ä–∏–∫–∞ –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞'
                }
            },

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫
            analytics: {
                ga4Config: {
                    required: ['measurement_id', 'api_secret'],
                    message: 'GA4 —Ç—Ä–µ–±—É–µ—Ç measurement_id –∏ api_secret'
                },
                facebookConfig: {
                    required: ['pixel_id', 'access_token'],
                    message: 'Facebook Pixel —Ç—Ä–µ–±—É–µ—Ç pixel_id –∏ access_token'
                },
                yandexConfig: {
                    required: ['counter_id', 'goal_id'],
                    message: 'Yandex.Metrica —Ç—Ä–µ–±—É–µ—Ç counter_id –∏ goal_id'
                },
                eventFormat: {
                    required: ['event_name', 'parameters'],
                    message: '–°–æ–±—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å event_name –∏ parameters'
                }
            },

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞
            optimization: {
                ruleFormat: {
                    required: ['element', 'condition', 'action'],
                    message: '–ü—Ä–∞–≤–∏–ª–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å element, condition –∏ action'
                },
                dataQuality: {
                    minDataPoints: 100,
                    message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–º–∏–Ω–∏–º—É–º 100 —Ç–æ—á–µ–∫)'
                },
                optimizationScope: {
                    allowed: ['ui', 'content', 'pricing', 'layout'],
                    message: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏'
                }
            },

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–π
            conversion: {
                funnelSteps: {
                    minSteps: 2,
                    maxSteps: 10,
                    message: '–í–æ—Ä–æ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 10 —à–∞–≥–æ–≤'
                },
                eventTracking: {
                    required: ['event_name', 'timestamp', 'user_id'],
                    message: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Ç—Ä–µ–±—É–µ—Ç event_name, timestamp –∏ user_id'
                },
                sourceTracking: {
                    required: ['source', 'medium', 'campaign'],
                    message: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–µ–±—É–µ—Ç source, medium –∏ campaign'
                }
            }
        };
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    setupValidationTriggers() {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', () => {
            this.validateAllComponents();
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        this.setupDataChangeListeners();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö
    setupDataChangeListeners() {
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ localStorage
        const originalSetItem = localStorage.setItem;
        localStorage.setItem = (key, value) => {
            originalSetItem.call(localStorage, key, value);
            this.validateDataChange(key, value);
        };

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ sessionStorage
        const originalSessionSetItem = sessionStorage.setItem;
        sessionStorage.setItem = (key, value) => {
            originalSessionSetItem.call(sessionStorage, key, value);
            this.validateDataChange(key, value);
        };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    validateDataChange(key, value) {
        if (key.includes('marketing') || key.includes('analytics') || key.includes('ab_test')) {
            console.log(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö: ${key}`);
            this.validateComponentData(key, value);
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    async validateAllComponents() {
        console.log('üîç –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
        
        const validations = [
            this.validateReferralSystem.bind(this),
            this.validateEmailMarketing.bind(this),
            this.validateABTesting.bind(this),
            this.validateExternalAnalytics.bind(this),
            this.validateOptimizationEngine.bind(this),
            this.validateConversionAnalytics.bind(this)
        ];

        for (const validation of validations) {
            try {
                await validation();
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.message}`);
                this.recordValidationResult(validation.name, false, error.message);
            }
        }

        this.generateValidationReport();
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    async validateReferralSystem() {
        console.log('üîó –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');
        
        const testData = {
            code: 'ABC12345',
            bonus: 500,
            tracking: {
                referrerId: 'user_123',
                userId: 'new_user_456',
                timestamp: Date.now()
            }
        };

        const validations = [
            {
                name: '–§–æ—Ä–º–∞—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞',
                test: () => this.validatePattern(testData.code, this.validationRules.referral.codeFormat.pattern),
                message: this.validationRules.referral.codeFormat.message
            },
            {
                name: '–î–∏–∞–ø–∞–∑–æ–Ω –±–æ–Ω—É—Å–æ–≤',
                test: () => this.validateRange(testData.bonus, this.validationRules.referral.bonusRange.min, this.validationRules.referral.bonusRange.max),
                message: this.validationRules.referral.bonusRange.message
            },
            {
                name: '–î–∞–Ω–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è',
                test: () => this.validateRequiredFields(testData.tracking, this.validationRules.referral.trackingData.required),
                message: this.validationRules.referral.trackingData.message
            }
        ];

        for (const validation of validations) {
            const result = validation.test();
            this.recordValidationResult(`referral_${validation.name}`, result, result ? null : validation.message);
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞
    async validateEmailMarketing() {
        console.log('üìß –í–∞–ª–∏–¥–∞—Ü–∏—è email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞...');
        
        const testData = {
            template: {
                subject: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
                body: '–ü—Ä–∏–≤–µ—Ç, {{name}}!',
                variables: ['name', 'company']
            },
            segments: {
                role: 'jobseeker',
                location: 'Prague',
                preferences: ['tech', 'remote']
            },
            campaign: {
                template: 'welcome',
                recipients: ['user1@example.com', 'user2@example.com'],
                schedule: '2024-01-15T10:00:00Z'
            }
        };

        const validations = [
            {
                name: '–§–æ—Ä–º–∞—Ç email-—à–∞–±–ª–æ–Ω–∞',
                test: () => this.validateRequiredFields(testData.template, this.validationRules.email.templateFormat.required),
                message: this.validationRules.email.templateFormat.message
            },
            {
                name: '–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                test: () => this.validateRequiredFields(testData.segments, this.validationRules.email.userSegments.required),
                message: this.validationRules.email.userSegments.message
            },
            {
                name: '–î–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏',
                test: () => this.validateRequiredFields(testData.campaign, this.validationRules.email.campaignData.required),
                message: this.validationRules.email.campaignData.message
            }
        ];

        for (const validation of validations) {
            const result = validation.test();
            this.recordValidationResult(`email_${validation.name}`, result, result ? null : validation.message);
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    async validateABTesting() {
        console.log('üî¨ –í–∞–ª–∏–¥–∞—Ü–∏—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
        
        const testData = {
            experiment: {
                id: 'exp_001',
                name: 'Landing Page CTA',
                variations: ['primary', 'secondary'],
                metric: 'conversion_rate'
            }
        };

        const validations = [
            {
                name: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞',
                test: () => this.validateRequiredFields(testData.experiment, this.validationRules.abTesting.experimentConfig.required),
                message: this.validationRules.abTesting.experimentConfig.message
            },
            {
                name: '–§–æ—Ä–º–∞—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤',
                test: () => this.validateRange(testData.experiment.variations.length, this.validationRules.abTesting.variationFormat.minVariations, this.validationRules.abTesting.variationFormat.maxVariations),
                message: this.validationRules.abTesting.variationFormat.message
            },
            {
                name: '–í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫–∏',
                test: () => this.validateAllowedValues(testData.experiment.metric, this.validationRules.abTesting.metricValidation.allowed),
                message: this.validationRules.abTesting.metricValidation.message
            }
        ];

        for (const validation of validations) {
            const result = validation.test();
            this.recordValidationResult(`ab_test_${validation.name}`, result, result ? null : validation.message);
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫
    async validateExternalAnalytics() {
        console.log('üìä –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫...');
        
        const testData = {
            ga4: {
                measurement_id: 'G-XXXXXXXXXX',
                api_secret: 'secret_key_123'
            },
            facebook: {
                pixel_id: '123456789',
                access_token: 'fb_token_123'
            },
            yandex: {
                counter_id: '12345',
                goal_id: 'goal_1'
            },
            event: {
                event_name: 'page_view',
                parameters: { page_title: 'Home Page' }
            }
        };

        const validations = [
            {
                name: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GA4',
                test: () => this.validateRequiredFields(testData.ga4, this.validationRules.analytics.ga4Config.required),
                message: this.validationRules.analytics.ga4Config.message
            },
            {
                name: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Facebook',
                test: () => this.validateRequiredFields(testData.facebook, this.validationRules.analytics.facebookConfig.required),
                message: this.validationRules.analytics.facebookConfig.message
            },
            {
                name: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Yandex',
                test: () => this.validateRequiredFields(testData.yandex, this.validationRules.analytics.yandexConfig.required),
                message: this.validationRules.analytics.yandexConfig.message
            },
            {
                name: '–§–æ—Ä–º–∞—Ç —Å–æ–±—ã—Ç–∏—è',
                test: () => this.validateRequiredFields(testData.event, this.validationRules.analytics.eventFormat.required),
                message: this.validationRules.analytics.eventFormat.message
            }
        ];

        for (const validation of validations) {
            const result = validation.test();
            this.recordValidationResult(`analytics_${validation.name}`, result, result ? null : validation.message);
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞
    async validateOptimizationEngine() {
        console.log('‚öôÔ∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞...');
        
        const testData = {
            rule: {
                element: 'cta_button',
                condition: 'conversion_rate < 0.1',
                action: 'change_color_to_blue'
            },
            dataPoints: 150,
            scope: 'ui'
        };

        const validations = [
            {
                name: '–§–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏',
                test: () => this.validateRequiredFields(testData.rule, this.validationRules.optimization.ruleFormat.required),
                message: this.validationRules.optimization.ruleFormat.message
            },
            {
                name: '–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö',
                test: () => testData.dataPoints >= this.validationRules.optimization.dataQuality.minDataPoints,
                message: this.validationRules.optimization.dataQuality.message
            },
            {
                name: '–û–±–ª–∞—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏',
                test: () => this.validateAllowedValues(testData.scope, this.validationRules.optimization.optimizationScope.allowed),
                message: this.validationRules.optimization.optimizationScope.message
            }
        ];

        for (const validation of validations) {
            const result = validation.test();
            this.recordValidationResult(`optimization_${validation.name}`, result, result ? null : validation.message);
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–π
    async validateConversionAnalytics() {
        console.log('üìà –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–π...');
        
        const testData = {
            funnel: ['view', 'click', 'register', 'complete'],
            event: {
                event_name: 'registration_completed',
                timestamp: Date.now(),
                user_id: 'user_123'
            },
            source: {
                source: 'google',
                medium: 'cpc',
                campaign: 'winter_2024'
            }
        };

        const validations = [
            {
                name: '–®–∞–≥–∏ –≤–æ—Ä–æ–Ω–∫–∏',
                test: () => this.validateRange(testData.funnel.length, this.validationRules.conversion.funnelSteps.minSteps, this.validationRules.conversion.funnelSteps.maxSteps),
                message: this.validationRules.conversion.funnelSteps.message
            },
            {
                name: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π',
                test: () => this.validateRequiredFields(testData.event, this.validationRules.conversion.eventTracking.required),
                message: this.validationRules.eventTracking.message
            },
            {
                name: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤',
                test: () => this.validateRequiredFields(testData.source, this.validationRules.conversion.sourceTracking.required),
                message: this.validationRules.conversion.sourceTracking.message
            }
        ];

        for (const validation of validations) {
            const result = validation.test();
            this.recordValidationResult(`conversion_${validation.name}`, result, result ? null : validation.message);
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    validateComponentData(key, value) {
        try {
            const data = JSON.parse(value);
            const component = this.identifyComponent(key);
            
            if (component && this.validationRules[component]) {
                console.log(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${component}`);
                this.validateComponentRules(component, data);
            }
        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${key}`);
        }
    }

    // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ –∫–ª—é—á—É
    identifyComponent(key) {
        if (key.includes('referral')) return 'referral';
        if (key.includes('email')) return 'email';
        if (key.includes('ab_test')) return 'abTesting';
        if (key.includes('analytics')) return 'analytics';
        if (key.includes('optimization')) return 'optimization';
        if (key.includes('conversion')) return 'conversion';
        return null;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    validateComponentRules(component, data) {
        const rules = this.validationRules[component];
        if (!rules) return;

        Object.entries(rules).forEach(([ruleName, rule]) => {
            const isValid = this.validateRule(rule, data);
            this.recordValidationResult(`${component}_${ruleName}`, isValid, isValid ? null : rule.message);
        });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª–∞
    validateRule(rule, data) {
        if (rule.pattern) {
            return rule.pattern.test(data);
        }
        if (rule.required) {
            return this.validateRequiredFields(data, rule.required);
        }
        if (rule.min !== undefined && rule.max !== undefined) {
            return this.validateRange(data, rule.min, rule.max);
        }
        if (rule.allowed) {
            return this.validateAllowedValues(data, rule.allowed);
        }
        return true;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    validatePattern(value, pattern) {
        return pattern.test(value);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    validateRange(value, min, max) {
        return value >= min && value <= max;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    validateRequiredFields(data, requiredFields) {
        return requiredFields.every(field => data.hasOwnProperty(field) && data[field] !== null && data[field] !== undefined);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    validateAllowedValues(value, allowedValues) {
        return allowedValues.includes(value);
    }

    // –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    recordValidationResult(validationName, passed, error = null) {
        this.validationResults[validationName] = {
            passed,
            error,
            timestamp: Date.now()
        };
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    generateValidationReport() {
        const totalValidations = Object.keys(this.validationResults).length;
        const passedValidations = Object.values(this.validationResults).filter(r => r.passed).length;
        const failedValidations = totalValidations - passedValidations;
        const successRate = (passedValidations / totalValidations * 100).toFixed(1);

        console.log('üìã –û–¢–ß–ï–¢ –û –í–ê–õ–ò–î–ê–¶–ò–ò –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í');
        console.log('=' .repeat(60));
        console.log(`–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${totalValidations}`);
        console.log(`–£—Å–ø–µ—à–Ω—ã—Ö: ${passedValidations}`);
        console.log(`–ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failedValidations}`);
        console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${successRate}%`);
        console.log('=' .repeat(60));

        // –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
        Object.entries(this.validationResults).forEach(([validationName, result]) => {
            const status = result.passed ? '‚úÖ' : '‚ùå';
            console.log(`${status} ${validationName}: ${result.passed ? '–ü–†–û–ô–î–ï–ù–ê' : '–ü–†–û–í–ê–õ–ï–ù–ê'}`);
            if (result.error) {
                console.log(`   –û—à–∏–±–∫–∞: ${result.error}`);
            }
        });

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        this.saveValidationReport();
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    saveValidationReport() {
        const report = {
            timestamp: Date.now(),
            summary: {
                total: Object.keys(this.validationResults).length,
                passed: Object.values(this.validationResults).filter(r => r.passed).length,
                failed: Object.values(this.validationResults).filter(r => !r.passed).length
            },
            details: this.validationResults
        };

        localStorage.setItem('marketing_validation_report', JSON.stringify(report));
        console.log('üíæ –û—Ç—á–µ—Ç –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    getValidationStats() {
        const stats = {
            total: Object.keys(this.validationResults).length,
            passed: Object.values(this.validationResults).filter(r => r.passed).length,
            failed: Object.values(this.validationResults).filter(r => !r.passed).length,
            successRate: 0
        };

        if (stats.total > 0) {
            stats.successRate = (stats.passed / stats.total * 100).toFixed(1);
        }

        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', stats);
        return stats;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    checkCriticalErrors() {
        const criticalValidations = [
            'referral_codeFormat',
            'email_templateFormat',
            'ab_test_experimentConfig',
            'analytics_ga4Config',
            'optimization_ruleFormat',
            'conversion_eventTracking'
        ];

        const criticalErrors = criticalValidations.filter(validation => 
            this.validationResults[validation] && !this.validationResults[validation].passed
        );

        if (criticalErrors.length > 0) {
            console.error('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò –í–ê–õ–ò–î–ê–¶–ò–ò:');
            criticalErrors.forEach(error => {
                console.error(`   ‚ùå ${error}: ${this.validationResults[error].error}`);
            });
            return false;
        }

        console.log('‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
        return true;
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
    autoFixValidationErrors() {
        console.log('üîß –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...');
        
        let fixedCount = 0;
        Object.entries(this.validationResults).forEach(([validationName, result]) => {
            if (!result.passed) {
                const fixed = this.attemptAutoFix(validationName, result.error);
                if (fixed) {
                    fixedCount++;
                    this.recordValidationResult(validationName, true, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ');
                }
            }
        });

        console.log(`üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—à–∏–±–æ–∫: ${fixedCount}`);
        return fixedCount;
    }

    // –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    attemptAutoFix(validationName, error) {
        // –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
        if (validationName.includes('codeFormat')) {
            return this.fixCodeFormat();
        }
        if (validationName.includes('required')) {
            return this.fixRequiredFields(validationName);
        }
        if (validationName.includes('range')) {
            return this.fixRangeValues(validationName);
        }
        return false;
    }

    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–¥–∞
    fixCodeFormat() {
        // –õ–æ–≥–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–¥–∞
        return true;
    }

    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    fixRequiredFields(validationName) {
        // –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π
        return true;
    }

    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    fixRangeValues(validationName) {
        // –õ–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π
        return true;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const validationEngine = new ValidationEngine();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.ValidationEngine = ValidationEngine; 