// üîê AuthManager - –µ–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (v1.0.5)
// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Firebase Anonymous Auth –∏ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

class AuthManager {
  constructor() {
    this.unsubscribe = null;
    this.isInitialized = false;
    this.currentUser = null;
    this.currentProfile = null;
    this.handlers = new Map();
    this.DEFAULT_TIMEOUT = 300000; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 5 –º–∏–Ω—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
    
    console.log('[AuthManager] v1.0.5 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
    this.init().catch(error => {
      console.error('[AuthManager] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    });
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Auth
  async init() {
    if (this.isInitialized) {
      console.log('[AuthManager] —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    try {
      if (typeof firebase === 'undefined') {
        throw new Error('Firebase –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
      }

      this.auth = firebase.auth();
      this.firestore = firebase.firestore();
      console.log('[AuthManager] Firebase Auth –∏ Firestore –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
      
      this.isInitialized = true;
      console.log('[AuthManager] –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('[AuthManager] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  subscribe(options = {}) {
    if (!this.isInitialized) {
      console.error('[AuthManager] –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
      return;
    }

    const {
      onLoggedIn = () => {},
      onLoggedOut = () => {},
      timeout = this.DEFAULT_TIMEOUT,
      id = 'default'
    } = options;

    console.log(`[AuthManager] –ü–æ–¥–ø–∏—Å–∫–∞ ${id} —Å —Ç–∞–π–º–∞—É—Ç–æ–º ${timeout}ms`);

    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    if (this.unsubscribe) {
      this.unsubscribe();
    }

    let handled = false;
    let timeoutId = null;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
    timeoutId = setTimeout(() => {
      if (!handled) {
        console.log(`[AuthManager] ${id}: —Ç–∞–π–º–∞—É—Ç –≤—ã—à–µ–ª, —Å—á–∏—Ç–∞–µ–º user = null`);
        handled = true;
        onLoggedOut();
        this.unsubscribe();
      }
    }, timeout);

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    this.unsubscribe = this.auth.onAuthStateChanged(async (user) => {
      console.log(`[AuthManager] ${id}: onAuthStateChanged ‚Üí`, user?.uid || '–í—ã—Ö–æ–¥');
      
      if (user && !handled) {
        handled = true;
        clearTimeout(timeoutId);
        
        try {
          // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firestore
          const profile = await this.getUserProfile(user.uid);
          
          this.currentUser = user;
          this.currentProfile = profile;
          
          console.log(`[AuthManager] ${id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω`, {
            uid: user.uid,
            isAnonymous: user.isAnonymous,
            role: profile?.role || 'unknown'
          });
          
          onLoggedIn(user, profile);
        } catch (error) {
          console.error('[AuthManager] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
          // –î–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø–æ–ª—É—á–µ–Ω, —Å—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º
          this.currentUser = user;
          onLoggedIn(user, null);
        }
      } else if (!user && !handled) {
        handled = true;
        clearTimeout(timeoutId);
        this.currentUser = null;
        this.currentProfile = null;
        console.log(`[AuthManager] ${id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª`);
        onLoggedOut();
      }
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firestore
  async getUserProfile(uid) {
    try {
      const doc = await this.firestore.collection('users').doc(uid).get();
      if (doc.exists) {
        return doc.data();
      }
      return null;
    } catch (error) {
      console.error('[AuthManager] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      return null;
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –¥–µ–º–æ-—Å–∏—Å—Ç–µ–º—ã)
  setUser(user, profile) {
    this.currentUser = user;
    this.currentProfile = profile;
    console.log('[AuthManager] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', {
      uid: user?.uid,
      role: profile?.role,
      isDemo: profile?.isDemoAccount
    });
  }

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
  unsubscribe(id = 'default') {
    if (this.unsubscribe) {
      this.unsubscribe();
      this.unsubscribe = null;
      console.log(`[AuthManager] –û—Ç–ø–∏—Å–∫–∞ ${id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getCurrentUser() {
    return this.currentUser;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
  getCurrentProfile() {
    return this.currentProfile;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  isAuthenticated() {
    return !!this.currentUser;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  isDemoUser() {
    return this.currentProfile?.isDemoAccount || false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  isAnonymousUser() {
    return this.currentUser?.isAnonymous || false;
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  async signOut() {
    try {
      if (this.currentUser) {
        await this.auth.signOut();
        this.currentUser = null;
        this.currentProfile = null;
        console.log('[AuthManager] –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
      }
    } catch (error) {
      console.error('[AuthManager] –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
      throw error;
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.authManager = new AuthManager(); 