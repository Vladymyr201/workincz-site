/**
 * üíº Jobs Module - –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
 * –í–µ—Ä—Å–∏—è: 2.0.0
 * –î–∞—Ç–∞: 30.07.2025
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: Firebase Firestore + AuthManager
 */

import { validateInput, sanitizeHTML } from '../../utils/validation/index.js';

class JobsManager {
  constructor() {
    this.db = null;
    this.auth = null;
    this.currentUser = null;
    this.jobsCache = new Map();
    this.applicationsCache = new Map();
    
    // –§–∏–ª—å—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.filters = {
      category: 'all',
      location: 'all',
      workType: 'all',
      jobType: 'all',
      withHousing: false,
      urgent: false,
      salaryMin: null,
      salaryMax: null,
      status: 'active'
    };
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    this.pagination = {
      currentPage: 1,
      itemsPerPage: 20,
      totalItems: 0,
      hasMore: true,
      lastDoc: null
    };
    
    // –õ–∏–º–∏—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.limits = {
      free: {
        applications: 5,
        savedJobs: 10,
        jobPostings: 1
      },
      premium: {
        applications: 50,
        savedJobs: 100,
        jobPostings: 10
      },
      vip: {
        applications: 999,
        savedJobs: 999,
        jobPostings: 999
      }
    };
    
    this.isInitialized = false;
    this.init();
  }

  async init() {
    console.log('üíº JobsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...');
    
    try {
      // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Firebase
      await this.waitForFirebase();
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Firebase
      this.db = window.firebaseDb;
      this.auth = window.firebaseAuth;
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      this.setupAuthListener();
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.setupEventListeners();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await this.loadInitialData();
      
      this.isInitialized = true;
      console.log('‚úÖ JobsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
      this.dispatchEvent('jobsManagerReady', { manager: this });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JobsManager:', error);
      this.handleError(error);
    }
  }

  async waitForFirebase() {
    let attempts = 0;
    const maxAttempts = 100;
    
    while (!window.firebaseDb && attempts < maxAttempts) {
      console.log(`‚è≥ –ñ–¥–µ–º Firebase (–ø–æ–ø—ã—Ç–∫–∞ ${attempts + 1}/${maxAttempts})...`);
      await new Promise(resolve => setTimeout(resolve, 100));
      attempts++;
    }
    
    if (!window.firebaseDb) {
      throw new Error('Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏');
    }
  }

  setupAuthListener() {
    if (this.auth) {
      this.auth.onAuthStateChanged((user) => {
        this.currentUser = user;
        if (user) {
          console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ JobsManager:', user.email);
          this.loadUserData();
        } else {
          console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ JobsManager');
          this.clearUserData();
        }
      });
    }
  }

  setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç–∫–ª–∏–∫–æ–≤
    document.addEventListener('click', (e) => {
      if (e.target.matches('.apply-btn, .apply-btn *')) {
        e.preventDefault();
        const btn = e.target.closest('.apply-btn');
        const jobId = btn.dataset.jobId;
        this.applyToJob(jobId);
      }
      
      if (e.target.matches('.bid-btn, .bid-btn *')) {
        e.preventDefault();
        const btn = e.target.closest('.bid-btn');
        const jobId = btn.dataset.jobId;
        this.submitBid(jobId);
      }
      
      if (e.target.matches('.save-btn, .save-btn *')) {
        e.preventDefault();
        const btn = e.target.closest('.save-btn');
        const jobId = btn.dataset.jobId;
        this.saveJob(jobId);
      }
      
      if (e.target.matches('.share-btn, .share-btn *')) {
        e.preventDefault();
        const btn = e.target.closest('.share-btn');
        const jobId = btn.dataset.jobId;
        this.shareJob(jobId);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    document.addEventListener('change', (e) => {
      if (e.target.matches('.job-filter')) {
        this.handleFilterChange(e.target);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞
    document.addEventListener('input', (e) => {
      if (e.target.matches('.job-search')) {
        this.handleSearchInput(e.target);
      }
    });
  }

  async loadInitialData() {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
      await this.loadJobs();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      if (this.currentUser) {
        await this.loadUserData();
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  async loadJobs(limit = 20, resetPagination = false) {
    try {
      console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏...');
      
      if (resetPagination) {
        this.pagination.currentPage = 1;
        this.pagination.lastDoc = null;
        this.pagination.hasMore = true;
      }
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Firestore
      let query = this.db.collection('jobs');
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      if (this.filters.status !== 'all') {
        query = query.where('status', '==', this.filters.status);
      }
      if (this.filters.category !== 'all') {
        query = query.where('category', '==', this.filters.category);
      }
      if (this.filters.location !== 'all') {
        query = query.where('location', '==', this.filters.location);
      }
      if (this.filters.workType !== 'all') {
        query = query.where('workType', '==', this.filters.workType);
      }
      if (this.filters.jobType !== 'all') {
        query = query.where('jobType', '==', this.filters.jobType);
      }
      if (this.filters.withHousing) {
        query = query.where('withHousing', '==', true);
      }
      if (this.filters.urgent) {
        query = query.where('urgent', '==', true);
      }
      if (this.filters.salaryMin) {
        query = query.where('salaryMin', '>=', this.filters.salaryMin);
      }
      if (this.filters.salaryMax) {
        query = query.where('salaryMax', '<=', this.filters.salaryMax);
      }
      
      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
      query = query.orderBy('createdAt', 'desc');
      
      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
      if (this.pagination.lastDoc) {
        query = query.startAfter(this.pagination.lastDoc);
      }
      
      query = query.limit(limit);
      
      const snapshot = await query.get();
      
      const jobs = [];
      snapshot.forEach((doc) => {
        const jobData = {
          id: doc.id,
          ...doc.data(),
          createdAt: doc.data().createdAt?.toDate(),
          updatedAt: doc.data().updatedAt?.toDate(),
        };
        jobs.push(jobData);
        this.jobsCache.set(doc.id, jobData);
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
      this.pagination.lastDoc = snapshot.docs[snapshot.docs.length - 1] || null;
      this.pagination.hasMore = snapshot.docs.length === limit;
      this.pagination.totalItems += jobs.length;
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${jobs.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º UI
      this.updateJobsUI(jobs);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≥—Ä—É–∑–∫–µ
      this.dispatchEvent('jobsLoaded', { jobs, pagination: this.pagination });
      
      return jobs;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π:', error);
      this.handleError(error);
      return [];
    }
  }

  async loadUserData() {
    if (!this.currentUser) return;
    
    try {
      console.log('üë§ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const applicationsSnapshot = await this.db
        .collection('applications')
        .where('userId', '==', this.currentUser.uid)
        .get();
      
      const applications = [];
      applicationsSnapshot.forEach((doc) => {
        applications.push({
          id: doc.id,
          ...doc.data()
        });
      });
      
      this.applicationsCache.clear();
      applications.forEach(app => {
        this.applicationsCache.set(app.jobId, app);
      });
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
      const savedJobsSnapshot = await this.db
        .collection('users')
        .doc(this.currentUser.uid)
        .collection('savedJobs')
        .get();
      
      const savedJobs = [];
      savedJobsSnapshot.forEach((doc) => {
        savedJobs.push(doc.id);
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º UI
      this.updateUserUI(applications, savedJobs);
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${applications.length} –∑–∞—è–≤–æ–∫ –∏ ${savedJobs.length} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  }

  clearUserData() {
    this.applicationsCache.clear();
    this.updateUserUI([], []);
  }

  async applyToJob(jobId) {
    try {
      if (!this.currentUser) {
        this.showLoginModal();
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
      const canApply = await this.checkApplicationLimit();
      if (!canApply) {
        this.showUpgradeModal('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∞–≤–∞–ª –ª–∏ —É–∂–µ –∑–∞—è–≤–∫—É
      if (this.applicationsCache.has(jobId)) {
        this.showError('–í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é');
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
      const job = this.jobsCache.get(jobId);
      if (!job) {
        this.showError('–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
      const application = {
        jobId,
        userId: this.currentUser.uid,
        userEmail: this.currentUser.email,
        jobTitle: job.title,
        employerId: job.employerId,
        status: 'pending',
        createdAt: new Date(),
        updatedAt: new Date()
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
      const docRef = await this.db.collection('applications').add(application);
      application.id = docRef.id;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
      this.applicationsCache.set(jobId, application);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º UI
      this.updateJobButton(jobId, 'applied');
      
      this.showSuccess('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞!');
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏
      this.dispatchEvent('jobApplied', { jobId, application });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏:', error);
      this.handleError(error);
    }
  }

  async checkApplicationLimit() {
    if (!this.currentUser) return false;
    
    try {
      const userDoc = await this.db.collection('users').doc(this.currentUser.uid).get();
      const userData = userDoc.data();
      const userType = userData?.type || 'free';
      
      const currentApplications = this.applicationsCache.size;
      const limit = this.limits[userType].applications;
      
      return currentApplications < limit;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞:', error);
      return false;
    }
  }

  async saveJob(jobId) {
    try {
      if (!this.currentUser) {
        this.showLoginModal();
        return;
      }
      
      const job = this.jobsCache.get(jobId);
      if (!job) {
        this.showError('–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ
      const savedJobRef = this.db
        .collection('users')
        .doc(this.currentUser.uid)
        .collection('savedJobs')
        .doc(jobId);
      
      const savedJobDoc = await savedJobRef.get();
      
      if (savedJobDoc.exists) {
        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö
        await savedJobRef.delete();
        this.updateJobButton(jobId, 'unsaved');
        this.showSuccess('–í–∞–∫–∞–Ω—Å–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö');
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ
        await savedJobRef.set({
          jobId,
          savedAt: new Date()
        });
        this.updateJobButton(jobId, 'saved');
        this.showSuccess('–í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏:', error);
      this.handleError(error);
    }
  }

  async submitBid(jobId) {
    try {
      if (!this.currentUser) {
        this.showLoginModal();
        return;
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏
      this.showBidModal(jobId);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∞—á–∏ —Å—Ç–∞–≤–∫–∏:', error);
      this.handleError(error);
    }
  }

  async shareJob(jobId) {
    try {
      const job = this.jobsCache.get(jobId);
      if (!job) {
        this.showError('–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }
      
      const shareUrl = `${window.location.origin}/job-details.html?id=${jobId}`;
      
      if (navigator.share) {
        await navigator.share({
          title: job.title,
          text: job.description,
          url: shareUrl
        });
      } else {
        // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        await navigator.clipboard.writeText(shareUrl);
        this.showSuccess('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —à–∞—Ä–∏–Ω–≥–∞:', error);
      this.handleError(error);
    }
  }

  handleFilterChange(element) {
    const filterName = element.name;
    const filterValue = element.type === 'checkbox' ? element.checked : element.value;
    
    this.filters[filterName] = filterValue;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
    this.loadJobs(20, true);
  }

  handleSearchInput(element) {
    const query = element.value.trim();
    
    // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ –ø–æ–∏—Å–∫–∞
    clearTimeout(this.searchTimeout);
    this.searchTimeout = setTimeout(() => {
      this.searchJobs(query);
    }, 300);
  }

  async searchJobs(query) {
    try {
      if (!query) {
        await this.loadJobs(20, true);
        return;
      }
      
      console.log('üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π:', query);
      
      // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é
      const snapshot = await this.db
        .collection('jobs')
        .where('status', '==', 'active')
        .orderBy('title')
        .get();
      
      const jobs = [];
      snapshot.forEach((doc) => {
        const jobData = doc.data();
        const searchText = `${jobData.title} ${jobData.description}`.toLowerCase();
        
        if (searchText.includes(query.toLowerCase())) {
          jobs.push({
            id: doc.id,
            ...jobData
          });
        }
      });
      
      this.updateJobsUI(jobs);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
      this.handleError(error);
    }
  }

  updateJobsUI(jobs) {
    const jobsContainer = document.getElementById('jobsContainer');
    if (!jobsContainer) return;
    
    if (jobs.length === 0) {
      jobsContainer.innerHTML = `
        <div class="text-center py-12">
          <div class="text-gray-400 text-6xl mb-4">üîç</div>
          <h3 class="text-xl font-semibold text-gray-600 mb-2">–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
          <p class="text-gray-500">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</p>
        </div>
      `;
      return;
    }
    
    const jobsHTML = jobs.map(job => this.renderJobCard(job)).join('');
    jobsContainer.innerHTML = jobsHTML;
  }

  updateUserUI(applications, savedJobs) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∑–∞—è–≤–æ–∫
    applications.forEach(app => {
      this.updateJobButton(app.jobId, 'applied');
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö
    savedJobs.forEach(jobId => {
      this.updateJobButton(jobId, 'saved');
    });
  }

  updateJobButton(jobId, state) {
    const applyBtn = document.querySelector(`[data-job-id="${jobId}"].apply-btn`);
    const saveBtn = document.querySelector(`[data-job-id="${jobId}"].save-btn`);
    
    if (applyBtn) {
      switch (state) {
        case 'applied':
          applyBtn.innerHTML = '<i class="fas fa-check"></i> –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞';
          applyBtn.classList.add('bg-green-500', 'text-white');
          applyBtn.classList.remove('bg-primary-600', 'hover:bg-primary-700');
          applyBtn.disabled = true;
          break;
        default:
          applyBtn.innerHTML = '<i class="fas fa-paper-plane"></i> –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è';
          applyBtn.classList.remove('bg-green-500', 'text-white');
          applyBtn.classList.add('bg-primary-600', 'hover:bg-primary-700');
          applyBtn.disabled = false;
      }
    }
    
    if (saveBtn) {
      switch (state) {
        case 'saved':
          saveBtn.innerHTML = '<i class="fas fa-heart"></i> –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ';
          saveBtn.classList.add('text-red-500');
          break;
        default:
          saveBtn.innerHTML = '<i class="far fa-heart"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
          saveBtn.classList.remove('text-red-500');
      }
    }
  }

  renderJobCard(job) {
    const isApplied = this.applicationsCache.has(job.id);
    const isSaved = false; // TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ
    
    return `
      <div class="job-card bg-white rounded-lg shadow-md p-6 mb-4 border border-gray-200">
        <div class="flex justify-between items-start mb-4">
          <div class="flex-1">
            <h3 class="text-xl font-semibold text-gray-900 mb-2">${sanitizeHTML(job.title)}</h3>
            <p class="text-gray-600 mb-2">${sanitizeHTML(job.company)}</p>
            <div class="flex items-center text-sm text-gray-500 mb-2">
              <i class="fas fa-map-marker-alt mr-2"></i>
              ${sanitizeHTML(job.location)}
            </div>
          </div>
          <div class="flex space-x-2">
            <button class="save-btn text-gray-400 hover:text-red-500 transition-colors" data-job-id="${job.id}">
              <i class="far fa-heart"></i>
            </button>
            <button class="share-btn text-gray-400 hover:text-blue-500 transition-colors" data-job-id="${job.id}">
              <i class="fas fa-share"></i>
            </button>
          </div>
        </div>
        
        <p class="text-gray-700 mb-4 line-clamp-3">${sanitizeHTML(job.description)}</p>
        
        <div class="flex flex-wrap gap-2 mb-4">
          ${job.tags ? job.tags.map(tag => `
            <span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">${sanitizeHTML(tag)}</span>
          `).join('') : ''}
        </div>
        
        <div class="flex justify-between items-center">
          <div class="flex items-center space-x-4 text-sm text-gray-600">
            <span><i class="fas fa-money-bill-wave mr-1"></i> ${this.formatSalary(job.salary)}</span>
            <span><i class="fas fa-clock mr-1"></i> ${this.formatWorkType(job.workType)}</span>
            ${job.withHousing ? '<span class="text-green-600"><i class="fas fa-home mr-1"></i> –ñ–∏–ª—å–µ</span>' : ''}
            ${job.urgent ? '<span class="text-red-600"><i class="fas fa-exclamation-triangle mr-1"></i> –°—Ä–æ—á–Ω–æ</span>' : ''}
          </div>
          
          <div class="flex space-x-2">
            <button class="apply-btn bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg font-medium transition-colors ${isApplied ? 'bg-green-500' : ''}" data-job-id="${job.id}" ${isApplied ? 'disabled' : ''}>
              ${isApplied ? '<i class="fas fa-check"></i> –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞' : '<i class="fas fa-paper-plane"></i> –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è'}
            </button>
            ${job.allowBidding ? `
              <button class="bid-btn bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded-lg font-medium transition-colors" data-job-id="${job.id}">
                <i class="fas fa-gavel"></i> –°—Ç–∞–≤–∫–∞
              </button>
            ` : ''}
          </div>
        </div>
      </div>
    `;
  }

  formatSalary(salary) {
    if (!salary) return '–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏';
    
    if (typeof salary === 'object') {
      const { min, max, currency = 'CZK' } = salary;
      if (min && max) {
        return `${min.toLocaleString()} - ${max.toLocaleString()} ${currency}`;
      }
      return `${min.toLocaleString()} ${currency}`;
    }
    
    return `${salary.toLocaleString()} CZK`;
  }

  formatWorkType(workType) {
    const types = {
      'full-time': '–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å',
      'part-time': '–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å',
      'contract': '–ö–æ–Ω—Ç—Ä–∞–∫—Ç',
      'temporary': '–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
      'internship': '–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞'
    };
    
    return types[workType] || workType;
  }

  showLoginModal() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
    modal.innerHTML = `
      <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
        <h3 class="text-xl font-semibold mb-4">–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç</h3>
        <p class="text-gray-600 mb-4">–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</p>
        <div class="flex space-x-2">
          <button class="flex-1 bg-primary-600 text-white py-2 rounded-lg" onclick="window.location.href='/auth/login.html'">
            –í–æ–π—Ç–∏
          </button>
          <button class="flex-1 bg-gray-200 text-gray-800 py-2 rounded-lg" onclick="this.closest('.fixed').remove()">
            –û—Ç–º–µ–Ω–∞
          </button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  }

  showUpgradeModal(message) {
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
    modal.innerHTML = `
      <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
        <h3 class="text-xl font-semibold mb-4">–û–±–Ω–æ–≤–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç</h3>
        <p class="text-gray-600 mb-4">${message}</p>
        <div class="flex space-x-2">
          <button class="flex-1 bg-primary-600 text-white py-2 rounded-lg" onclick="window.location.href='/pricing.html'">
            –û–±–Ω–æ–≤–∏—Ç—å
          </button>
          <button class="flex-1 bg-gray-200 text-gray-800 py-2 rounded-lg" onclick="this.closest('.fixed').remove()">
            –ü–æ–∑–∂–µ
          </button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  }

  showBidModal(jobId) {
    const job = this.jobsCache.get(jobId);
    if (!job) return;
    
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
    modal.innerHTML = `
      <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
        <h3 class="text-xl font-semibold mb-4">–ü–æ–¥–∞—Ç—å —Å—Ç–∞–≤–∫—É</h3>
        <p class="text-gray-600 mb-4">–í–∞–∫–∞–Ω—Å–∏—è: ${sanitizeHTML(job.title)}</p>
        
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 mb-2">–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ (CZK)</label>
          <input type="number" id="bidAmount" class="w-full border border-gray-300 rounded-lg px-3 py-2" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É">
        </div>
        
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 mb-2">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
          <textarea id="bidComment" class="w-full border border-gray-300 rounded-lg px-3 py-2 h-24" placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ..."></textarea>
        </div>
        
        <div class="flex space-x-2">
          <button class="flex-1 bg-primary-600 text-white py-2 rounded-lg" onclick="this.submitBid('${jobId}')">
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É
          </button>
          <button class="flex-1 bg-gray-200 text-gray-800 py-2 rounded-lg" onclick="this.closest('.fixed').remove()">
            –û—Ç–º–µ–Ω–∞
          </button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  }

  showSuccess(message) {
    if (window.showToast) {
      window.showToast(message, 'success');
    } else {
      alert(message);
    }
  }

  showError(message) {
    if (window.showToast) {
      window.showToast(message, 'error');
    } else {
      alert(message);
    }
  }

  handleError(error) {
    console.error('‚ùå JobsManager Error:', error);
    
    const message = error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏';
    this.showError(message);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    this.dispatchEvent('jobsError', { error, message });
  }

  dispatchEvent(eventName, data = {}) {
    const event = new CustomEvent(`jobs:${eventName}`, {
      detail: { manager: this, ...data }
    });
    document.dispatchEvent(event);
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  getJobs() {
    return Array.from(this.jobsCache.values());
  }

  getJobById(jobId) {
    return this.jobsCache.get(jobId);
  }

  getApplications() {
    return Array.from(this.applicationsCache.values());
  }

  isApplied(jobId) {
    return this.applicationsCache.has(jobId);
  }

  getFilters() {
    return { ...this.filters };
  }

  setFilters(newFilters) {
    this.filters = { ...this.filters, ...newFilters };
    this.loadJobs(20, true);
  }

  getPagination() {
    return { ...this.pagination };
  }

  loadMore() {
    if (this.pagination.hasMore) {
      return this.loadJobs(20, false);
    }
    return Promise.resolve([]);
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const jobsManager = new JobsManager();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default jobsManager;
export { JobsManager }; 